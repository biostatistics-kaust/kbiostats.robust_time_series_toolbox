/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI192727 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI202896 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI242425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI229178 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI240047 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI239093 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI239015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI238913 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI17403 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI154433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI154638 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI177626 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI203864 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI202666 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI203749 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI203748 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI196649 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI196648 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI203722 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI203721 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI203718 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI203717 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI204477 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148064 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148068 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI202715 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI202502 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI192086 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI175878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI175816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI175818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI176020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
NTI176020.base = NTI112;
NTI175816.base = NTI175878;
var NNI175818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI175816, name: "nanosecond", sons: null}]};
NTI175818.node = NNI175818;
NTI192086.base = NTI128;
NTI202502.base = NTI124;
NTI202715.base = NTI124;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3852.base = NTI3828;
NTI148068.base = NTI124;
NTI148067.base = NTI148068;
NTI148064.base = NTI124;
var NNI196649 = {kind: 1, offset: "dof", len: 0, typ: NTI104, name: "dof", sons: null};
NTI196649.node = NNI196649;
NTI196648.base = NTI196649;
var NNI203722 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI196648, name: "distribution", sons: null}, 
{kind: 1, offset: "location", len: 0, typ: NTI124, name: "location", sons: null}, 
{kind: 1, offset: "scale", len: 0, typ: NTI124, name: "scale", sons: null}]};
NTI203722.node = NNI203722;
NTI203721.base = NTI203722;
var NNI202666 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI202666, name: "twoTailed", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI202666, name: "oneTailed", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI202666, name: "rightTailed", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI202666, name: "leftTailed", len: 0, sons: null}}};
NTI202666.node = NNI202666;
var NNI203749 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI203721, name: "distribution", sons: null}, 
{kind: 1, offset: "test_score", len: 0, typ: NTI124, name: "test_score", sons: null}, 
{kind: 1, offset: "test_type", len: 0, typ: NTI202666, name: "test_type", sons: null}]};
NTI203749.node = NNI203749;
NTI203748.base = NTI203749;
var NNI203718 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI203721, name: "distribution", sons: null}, 
{kind: 1, offset: "hypothesis_test", len: 0, typ: NTI203748, name: "hypothesis_test", sons: null}]};
NTI203718.node = NNI203718;
NTI203717.base = NTI203718;
NTI204477.base = NTI203717;
NTI203864.base = NTI138;
NTI177626.base = NTI138;
NTI154638.base = NTI124;
NTI154433.base = NTI124;
NTI238913.base = NTI124;
NTI239015.base = NTI148068;
NTI239093.base = NTI148068;
NTI240047.base = NTI124;
NTI229178.base = NTI104;
NTI242425.base = NTI124;
NTI202896.base = NTI124;
NTI192727.base = NTI124;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}
		var unit_weights_176017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI176020);
						var cof_192085 = nimCopy(null, [7.6180091729471457e+01, -8.6505320329416776e+01, 2.4014098240830911e+01, -1.2317395724501550e+00, 1.2086509738661790e-03, -5.3952393849530003e-06], NTI192086);

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		throw e_15818;

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
					var cof_192726 = nimCopy(null, [-1.3026537197817094e+00, 6.4196979235649021e-01, 1.9476473204185836e-02, -9.5615147868086305e-03, -9.4659534448203605e-04, 3.6683949785276101e-04, 4.2523324806907003e-05, -2.0278578112534001e-05, -1.6242900046470000e-06, 1.3036558355800000e-06, 1.5626441722000001e-08, -8.5238095914999995e-08, 6.5290544390000001e-09, 5.0593434950000004e-09, -9.9136415599999992e-10, -2.2736512200000000e-10, 9.6467910999999994e-11, 2.3940379999999998e-12, -6.8860269999999998e-12, 8.9448700000000004e-13, 3.1309199999999997e-13, -1.1270800000000000e-13, 3.8099999999999998e-16, 7.1059999999999999e-15, -1.5230000000000001e-15, -9.3999999999999999e-17, 1.2099999999999999e-16, -2.7999999999999999e-17], NTI192727);
var nimvm_7173 = false;
process.exitCode = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];

function classify_29030(x_29032) {
	var result_29033 = 0;

	BeforeRet: do {
		if ((x_29032 == 0.0)) {
		if (((1.0000000000000000e+00 / x_29032) == Infinity)) {
		result_29033 = 2;
		break BeforeRet;
		}
		else {
			result_29033 = 3;
			break BeforeRet;
		}
		
		}
		
		if (((x_29032 * 5.0000000000000000e-01) == x_29032)) {
		if ((0.0 < x_29032)) {
		result_29033 = 5;
		break BeforeRet;
		}
		else {
			result_29033 = 6;
			break BeforeRet;
		}
		
		}
		
		if (!((x_29032 == x_29032))) {
		result_29033 = 4;
		break BeforeRet;
		}
		
		result_29033 = 0;
		break BeforeRet;
	} while (false);

	return result_29033;

}

function interpolated_if_not_valid_155829(data_155831, i_155832) {
			var Tmp1;

	var result_155833 = 0.0;

	BeforeRet: do {
		var v_155834 = data_155831[i_155832];
			if ((((classify_29030(v_155834) == 4) || (classify_29030(v_155834) == 5)) || (classify_29030(v_155834) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_155834 * 1.0000000000000000e+01) / 1.0000000000000000e+01) == v_155834));			}		if (Tmp1) {
		if ((i_155832 == 0)) {
		result_155833 = data_155831[(i_155832 + 1)];
		break BeforeRet;
		}
		else {
		if ((i_155832 == (data_155831 != null ? (data_155831.length-1) : -1))) {
		result_155833 = data_155831[(i_155832 - 1)];
		break BeforeRet;
		}
		else {
			result_155833 = (5.0000000000000000e-01 * (data_155831[(i_155832 - 1)] + data_155831[(i_155832 + 1)]));
			break BeforeRet;
		}
		}
		}
		
		result_155833 = data_155831[i_155832];
		break BeforeRet;
	} while (false);

	return result_155833;

}

function fill_non_numerical(v_155889) {
	var result_155890 = null;

		L1: do {
			var k_155914 = 0;
			var colontmp__155926 = 0;
			colontmp__155926 = (v_155889 != null ? (v_155889.length-1) : -1);
			var res_155929 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_155929 <= colontmp__155926)) break L3;
						k_155914 = res_155929;
						if (result_155890 != null) { result_155890.push(interpolated_if_not_valid_155829(v_155889, k_155914)); } else { result_155890 = [interpolated_if_not_valid_155829(v_155889, k_155914)]; };
						res_155929 += 1;
					}
			} while(false);
		} while(false);

	return result_155890;

}
var state_171605 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_178832 = [null];
var local_instance_178833 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function HEX2A_175401(a_175403, b_175404) {
	var result_175405 = 0;

		result_175405 = (a_175403 * b_175404);

	return result_175405;

}

function convert_176448(unit_from_176452, unit_to_176454, quantity_176456) {
		var Tmp1;

	var result_176457 = 0;

		if ((unit_from_176452 < unit_to_176454)) {
		Tmp1 = Math.trunc(quantity_176456 / Math.trunc(unit_weights_176017[unit_to_176454] / unit_weights_176017[unit_from_176452]));
		}
		else {
		Tmp1 = HEX2A_175401(Math.trunc(unit_weights_176017[unit_from_176452] / unit_weights_176017[unit_to_176454]), quantity_176456);
		}
		
		result_176457 = Tmp1;

	return result_176457;

}

function init_time_176085(unix_176087, nanosecond_176088) {
	var result_178018 = {seconds: 0, nanosecond: 0};

		result_178018.seconds = unix_176087;
		result_178018.nanosecond = nanosecond_176088;

	return result_178018;

}

function get_time_178961() {
	var result_178963 = {seconds: 0, nanosecond: 0};

		var millis_179001 = new Date().getTime();
		var seconds_179012 = convert_176448(2, 3, millis_179001);
		var nanos_179034 = convert_176448(2, 0, Math.trunc(millis_179001 % convert_176448(3, 2, 1)));
		nimCopy(result_178963, init_time_176085(seconds_179012, nanos_179034), NTI175818);

	return result_178963;

}
var start_188831 = [get_time_178961()];
var lc_191331 = [{}];

function min_240137(x_240142) {
	var result_240143 = 0.0;

		result_240143 = x_240142[0];
		L1: do {
			var i_240162 = 0;
			var colontmp__240164 = 0;
			colontmp__240164 = (x_240142 != null ? (x_240142.length-1) : -1);
			var res_240167 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_240167 <= colontmp__240164)) break L3;
						i_240162 = res_240167;
						if ((x_240142[i_240162] < result_240143)) {
						result_240143 = x_240142[i_240162];
						}
						
						res_240167 += 1;
					}
			} while(false);
		} while(false);

	return result_240143;

}

function HEX2DHEX3D_168380(x_168385, x_168385_Idx, y_168387) {
		x_168385[x_168385_Idx] = (x_168385[x_168385_Idx] - y_168387);

	
}

function HEX2BHEX3D_44127(x_44132, x_44132_Idx, y_44134) {
		x_44132[x_44132_Idx] = (x_44132[x_44132_Idx] + y_44134);

	
}

function gammaln_192081(x_192083) {
	var result_192084 = 0.0;

	BeforeRet: do {
		var ser_192088 = [1.0000000001900149e+00];
		var xx_192089 = x_192083;
		var y_192090 = [x_192083];
		var tmp_192091 = [(x_192083 + 5.5000000000000000e+00)];
		HEX2DHEX3D_168380(tmp_192091, 0, ((xx_192089 + 5.0000000000000000e-01) * Math.log(tmp_192091[0])));
		L1: do {
			var j_192122 = 0;
			var res_192146 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_192146 <= 5)) break L3;
						j_192122 = res_192146;
						HEX2BHEX3D_44127(y_192090, 0, 1.0000000000000000e+00);
						HEX2BHEX3D_44127(ser_192088, 0, (cof_192085[j_192122] / y_192090[0]));
						res_192146 += 1;
					}
			} while(false);
		} while(false);
		result_192084 = (Math.log(((2.5066282746310007e+00 * ser_192088[0]) / xx_192089)) - tmp_192091[0]);
		break BeforeRet;
	} while (false);

	return result_192084;

}

function HEX2AHEX3D_144887(x_144892, x_144892_Idx, y_144894) {
		x_144892[x_144892_Idx] = (x_144892[x_144892_Idx] * y_144894);

	
}

function low_reg_gamma_192313(a_192315, x_192316) {
		var Tmp1;

	var result_192317 = 0.0;

	BeforeRet: do {
		var ap_192318 = [a_192315];
		var sum_192320 = [(1.0000000000000000e+00 - (0.0 / a_192315))];
		var del_192321 = [sum_192320[0]];
		var b_192322 = [((x_192316 + 1.0000000000000000e+00) - a_192315)];
		var c_192323 = 9.9999999999999988e+29;
		var d_192324 = (1.0000000000000000e+00 / b_192322[0]);
		var h_192325 = [d_192324];
		var an_192326 = 0.0;
		var endval_192327 = 0.0;
		var aln_192328 = gammaln_192081(a_192315);
		if ((1.0000000000000000e+00 <= a_192315)) {
		Tmp1 = a_192315;
		}
		else {
		Tmp1 = (1.0000000000000000e+00 / a_192315);
		}
		
		var itmax_192329 = Math.trunc((((-1.0000000000000000e+00 + (Math.log(Tmp1) * 8.5000000000000000e+00)) + (a_192315 * 4.0000000000000002e-01)) + 1.7000000000000000e+01));
		if (((x_192316 < 0.0) || (a_192315 <= 0.0))) {
		result_192317 = NaN;
		break BeforeRet;
		}
		else {
		if ((x_192316 < (a_192315 + 1.0000000000000000e+00))) {
		L2: do {
			var i_192341 = 0;
			var res_192419 = 1;
			L3: do {
					L4: while (true) {
					if (!(res_192419 <= itmax_192329)) break L4;
						i_192341 = res_192419;
						HEX2BHEX3D_44127(ap_192318, 0, 1.0000000000000000e+00);
						HEX2AHEX3D_144887(del_192321, 0, (x_192316 / ap_192318[0]));
						HEX2BHEX3D_44127(sum_192320, 0, del_192321[0]);
						res_192419 += 1;
					}
			} while(false);
		} while(false);
		var p_a_x_192372 = [(sum_192320[0] * Math.exp(((-(x_192316) + (a_192315 * Math.log(x_192316))) - aln_192328)))];
		HEX2AHEX3D_144887(p_a_x_192372, 0, 5.0000000000000000e-01);
		result_192317 = p_a_x_192372[0];
		break BeforeRet;
		}
		}
		L5: do {
			var i_192394 = 0;
			var res_192426 = 1;
			L6: do {
					L7: while (true) {
					if (!(res_192426 <= itmax_192329)) break L7;
						i_192394 = res_192426;
						an_192326 = (-(i_192394) * (i_192394 - a_192315));
						HEX2BHEX3D_44127(b_192322, 0, 2.0000000000000000e+00);
						d_192324 = ((an_192326 * d_192324) + b_192322[0]);
						c_192323 = (b_192322[0] + (an_192326 / c_192323));
						d_192324 = (1.0000000000000000e+00 / d_192324);
						HEX2AHEX3D_144887(h_192325, 0, (d_192324 * c_192323));
						res_192426 += 1;
					}
			} while(false);
		} while(false);
		result_192317 = (1.0000000000000000e+00 - (h_192325[0] * Math.exp(((-(x_192316) + (a_192315 * Math.log(x_192316))) - aln_192328))));
		break BeforeRet;
	} while (false);

	return result_192317;

}

function cdf_198232(d_198234, x_198235) {
	var result_198236 = 0.0;

	BeforeRet: do {
		if ((x_198235 <= 0.0)) {
		result_198236 = 0.0;
		break BeforeRet;
		}
		
		result_198236 = low_reg_gamma_192313((d_198234.dof / 2.0000000000000000e+00), (x_198235 / 2.0000000000000000e+00));
		break BeforeRet;
	} while (false);

	return result_198236;

}

function p_value_238652(sd_238657) {
		var Tmp1;
			var Tmp2;

	var result_238658 = 0.0;

	BeforeRet: do {
		if ((sd_238657.test_type == 0)) {
		result_238658 = ((1.0000000000000000e+00 - cdf_198232(sd_238657.distribution, Math.abs(sd_238657.test_score))) + cdf_198232(sd_238657.distribution, -(Math.abs(sd_238657.test_score))));
		break BeforeRet;
		}
		
		if ((sd_238657.test_type == 3)) {
		result_238658 = cdf_198232(sd_238657.distribution, sd_238657.test_score);
		break BeforeRet;
		}
		
		if ((sd_238657.test_type == 2)) {
		result_238658 = (1.0000000000000000e+00 - cdf_198232(sd_238657.distribution, sd_238657.test_score));
		break BeforeRet;
		}
		
		var p1_238689 = (1.0000000000000000e+00 - cdf_198232(sd_238657.distribution, sd_238657.test_score));
		var p2_238690 = cdf_198232(sd_238657.distribution, sd_238657.test_score);
			if (!(p1_238689 < p2_238690)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_238689);			}		if (Tmp2) {
		Tmp1 = p1_238689;
		}
		else {
		Tmp1 = p2_238690;
		}
		
		result_238658 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_238658;

}

function HEX5E_148027(a_148029, b_148030) {
	var result_148031 = 0.0;

		result_148031 = Math.pow(a_148029, b_148030);

	return result_148031;

}

function gammapinv_192662(p_192664, a_192665) {
		var Tmp1;

	var result_192666 = 0.0;

	BeforeRet: do {
		var a1_192667 = (a_192665 - 1.0000000000000000e+00);
		var eps_192668 = 1.0000000000000000e-08;
		var gln_192669 = gammaln_192081(a_192665);
		var x_192670 = [0.0];
		var err_192671 = 0.0;
		var t_192672 = 0.0;
		var u_192673 = 0.0;
		var pp_192674 = 0.0;
		var lna1_192675 = 0.0;
		var afac_192676 = 0.0;
		if ((1.0000000000000000e+00 <= p_192664)) {
		result_192666 = nimMax(1.0000000000000000e+02, (a_192665 + (1.0000000000000000e+02 * Math.sqrt(a_192665))));
		break BeforeRet;
		}
		
		if ((p_192664 <= 0.0)) {
		result_192666 = 0.0;
		break BeforeRet;
		}
		
		if ((1.0000000000000000e+00 < a_192665)) {
		lna1_192675 = Math.log(a1_192667);
		afac_192676 = Math.exp(((a1_192667 * (lna1_192675 - 1.0000000000000000e+00)) - gln_192669));
		if ((p_192664 < 5.0000000000000000e-01)) {
		Tmp1 = p_192664;
		}
		else {
		Tmp1 = (1.0000000000000000e+00 - p_192664);
		}
		
		pp_192674 = Tmp1;
		t_192672 = Math.sqrt((-2.0000000000000000e+00 * Math.log(pp_192674)));
		x_192670[0] = (((2.3075299999999999e+00 + (t_192672 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_192672 * (9.9229000000000001e-01 + (t_192672 * 4.4810000000000003e-02))))) - t_192672);
		if ((p_192664 < 5.0000000000000000e-01)) {
		x_192670[0] = -(x_192670[0]);
		}
		
		x_192670[0] = nimMax(1.0000000000000000e-03, (a_192665 * HEX5E_148027(((1.0000000000000000e+00 - (1.0000000000000000e+00 / (9.0000000000000000e+00 * a_192665))) - (x_192670[0] / (3.0000000000000000e+00 * Math.sqrt(a_192665)))), 3.0000000000000000e+00)));
		}
		else {
			t_192672 = (1.0000000000000000e+00 - (a_192665 * (2.5300000000000000e-01 + (a_192665 * 1.2000000000000000e-01))));
			if ((p_192664 < t_192672)) {
			x_192670[0] = HEX5E_148027((p_192664 / t_192672), (1.0000000000000000e+00 / a_192665));
			}
			else {
				x_192670[0] = (1.0000000000000000e+00 - Math.log((1.0000000000000000e+00 - ((p_192664 - t_192672) / (1.0000000000000000e+00 - t_192672)))));
			}
			
		}
		
		L2: do {
			var j_192691 = 0;
			var res_192705 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_192705 <= 11)) break L4;
						j_192691 = res_192705;
						if ((x_192670[0] <= 0.0)) {
						result_192666 = 0.0;
						break BeforeRet;
						}
						
						err_192671 = (low_reg_gamma_192313(a_192665, x_192670[0]) - p_192664);
						if ((1.0000000000000000e+00 < a_192665)) {
						t_192672 = (afac_192676 * Math.exp((-((x_192670[0] - a1_192667)) + (a1_192667 * (Math.log(x_192670[0]) - lna1_192675)))));
						}
						else {
							t_192672 = Math.exp(((-(x_192670[0]) + (a1_192667 * Math.log(x_192670[0]))) - gln_192669));
						}
						
						u_192673 = (err_192671 / t_192672);
						t_192672 = (u_192673 / (1.0000000000000000e+00 - (5.0000000000000000e-01 * nimMin(1.0000000000000000e+00, (u_192673 * (((a_192665 - 1.0000000000000000e+00) / x_192670[0]) - 1.0000000000000000e+00))))));
						HEX2DHEX3D_168380(x_192670, 0, t_192672);
						if ((x_192670[0] <= 0.0)) {
						x_192670[0] = (5.0000000000000000e-01 * (x_192670[0] + t_192672));
						}
						
						if ((Math.abs(t_192672) < (eps_192668 * x_192670[0]))) {
						break L2;
						}
						
						res_192705 += 1;
					}
			} while(false);
		} while(false);
		result_192666 = x_192670[0];
		break BeforeRet;
	} while (false);

	return result_192666;

}

function inv_198250(d_198252, p_198253) {
	var result_198254 = 0.0;

	BeforeRet: do {
		result_198254 = (2.0000000000000000e+00 * gammapinv_192662(p_198253, (5.0000000000000000e-01 * d_198252.dof)));
		break BeforeRet;
	} while (false);

	return result_198254;

}

function mean_198268(d_198270) {
	var result_198271 = 0.0;

	BeforeRet: do {
		result_198271 = d_198270.dof;
		break BeforeRet;
	} while (false);

	return result_198271;

}

function null_confidence_interval_236213(sd_236218, alpha_236220) {
	var result_236221 = null;

	BeforeRet: do {
		var default_ci_236234 = [inv_198250(sd_236218.distribution, (5.0000000000000000e-01 * alpha_236220)), inv_198250(sd_236218.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_236220)))];
		var right_ci_236247 = [inv_198250(sd_236218.distribution, 0.0), inv_198250(sd_236218.distribution, (1.0000000000000000e+00 - alpha_236220))];
		var left_ci_236261 = [inv_198250(sd_236218.distribution, (1.0000000000000000e+00 - alpha_236220)), inv_198250(sd_236218.distribution, 1.0000000000000000e+00)];
		var test_score_236262 = mean_198268(sd_236218.distribution);
		if ((test_score_236262 < default_ci_236234[0])) {
		result_236221 = nimCopy(null, right_ci_236247, NTI202502);
		break BeforeRet;
		}
		else {
		if ((default_ci_236234[1] < test_score_236262)) {
		result_236221 = nimCopy(null, left_ci_236261, NTI202502);
		break BeforeRet;
		}
		}
		result_236221 = nimCopy(null, default_ci_236234, NTI202502);
		break BeforeRet;
	} while (false);

	return result_236221;

}

function HEX24_198078(d_198080) {
	var result_198081 = null;

		var fmt_res_198084 = mnewString(0);
		if (fmt_res_198084 != null) { fmt_res_198084 = (fmt_res_198084).concat(makeNimstrLit("ChiSquare(dof=")); } else { fmt_res_198084 = makeNimstrLit("ChiSquare(dof="); };
		if (fmt_res_198084 != null) { fmt_res_198084 = (fmt_res_198084).concat(cstrToNimstr((Math.trunc(d_198080.dof))+"")); } else { fmt_res_198084 = cstrToNimstr((Math.trunc(d_198080.dof))+"").slice(); };
		if (fmt_res_198084 != null) { fmt_res_198084 = (fmt_res_198084).concat(makeNimstrLit(")")); } else { fmt_res_198084 = makeNimstrLit(")"); };
		result_198081 = nimCopy(null, fmt_res_198084, NTI138);

	return result_198081;

}

function flatten_243897(test_243902) {
	var result_243903 = null;

		result_243903 = {score: 0.0, p_value: 0.0, null_confidence_interval: null, distribution: null};
		result_243903.score = test_243902.test_score;
		result_243903.p_value = p_value_238652(test_243902);
		result_243903.null_confidence_interval = nimCopy(null, null_confidence_interval_236213(test_243902, 5.0000000000000003e-02), NTI202715);
		result_243903.distribution = nimCopy(null, HEX24_198078(test_243902.distribution), NTI138);

	return result_243903;

}

function htest_score_240186(distribution_240190, score_240192, test_type_240194) {
	var result_240196 = null;

		result_240196 = {distribution: null, test_score: 0.0, test_type: 0};
		result_240196.distribution = distribution_240190;
		result_240196.test_score = score_240192;
		result_240196.test_type = test_type_240194;

	return result_240196;

}

function chisquare_198053(dof_198055) {
	var result_198056 = null;

		result_198056 = {dof: 0.0};
		result_198056.dof = dof_198055;

	return result_198056;

}

function existence_change_point_hypothesis(test_scores_244018) {
	var result_244019 = null;

		var total_score_244035 = ((test_scores_244018 != null ? test_scores_244018.length : 0) * min_240137(test_scores_244018));
		result_244019 = flatten_243897(htest_score_240186(chisquare_198053((2.0000000000000000e+00 * (test_scores_244018 != null ? test_scores_244018.length : 0))), total_score_244035, 1));

	return result_244019;

}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function add_intercept_202463(x_202465) {
	var result_202466 = null;

		L1: do {
			var r_202490 = 0;
			var colontmp__202514 = 0;
			colontmp__202514 = (x_202465 != null ? (x_202465.length-1) : -1);
			var res_202517 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_202517 <= colontmp__202514)) break L3;
						r_202490 = res_202517;
						if (result_202466 != null) { result_202466.push([x_202465[r_202490], 1.0000000000000000e+00]); } else { result_202466 = [[x_202465[r_202490], 1.0000000000000000e+00]]; };
						res_202517 += 1;
					}
			} while(false);
		} while(false);

	return result_202466;

}

function HEX5BHEX5D_203119(s_203126, x_203129) {
	var result_203131 = null;

		var a_203201 = x_203129.a;
		var l_203401 = ((x_203129.b - a_203201) + 1);
		result_203131 = new Array(l_203401); for (var i=0;i<l_203401;++i) {result_203131[i]=0.0;}		L1: do {
			var i_203421 = 0;
			var i_203429 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_203429 < l_203401)) break L3;
						i_203421 = i_203429;
						result_203131[i_203421] = s_203126[(i_203421 + a_203201)];
						i_203429 += 1;
					}
			} while(false);
		} while(false);

	return result_203131;

}

function HEX2EHEX2E_57828(a_57833, b_57835) {
	var result_57843 = {a: 0, b: 0};

		result_57843.a = a_57833;
		result_57843.b = b_57835;

	return result_57843;

}

function cols_157438(a_157440) {
	var result_157441 = 0;

		result_157441 = (a_157440[0] != null ? a_157440[0].length : 0);

	return result_157441;

}

function as_column_vector_155014(v_155016) {
	var result_155017 = null;

		L1: do {
			var i_155036 = 0;
			var colontmp__155060 = 0;
			colontmp__155060 = (v_155016 != null ? v_155016.length : 0);
			var res_155063 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_155063 <= colontmp__155060)) break L3;
						i_155036 = res_155063;
						if (result_155017 != null) { result_155017.push([v_155016[(i_155036 - 1)]]); } else { result_155017 = [[v_155016[(i_155036 - 1)]]]; };
						res_155063 += 1;
					}
			} while(false);
		} while(false);

	return result_155017;

}

function identity_166014(rows_166016, cols_166018) {
	var result_166019 = null;

		var cols0_166020 = cols_166018;
		if ((cols_166018 < 0)) {
		cols0_166020 = rows_166016;
		}
		
		L1: do {
			var i_166032 = 0;
			var res_166100 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_166100 <= rows_166016)) break L3;
						i_166032 = res_166100;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_166019 != null) { result_166019.push(Tmp4); } else { result_166019 = [Tmp4]; };
						L5: do {
							var j_166069 = 0;
							var res_166094 = 1;
							L6: do {
									L7: while (true) {
									if (!(res_166094 <= cols0_166020)) break L7;
										j_166069 = res_166094;
										if ((i_166032 == j_166069)) {
										if (result_166019[(i_166032 - 1)] != null) { result_166019[(i_166032 - 1)].push(1.0000000000000000e+00); } else { result_166019[(i_166032 - 1)] = [1.0000000000000000e+00]; };
										}
										else {
										if (result_166019[(i_166032 - 1)] != null) { result_166019[(i_166032 - 1)].push(0.0); } else { result_166019[(i_166032 - 1)] = [0.0]; };
										}
										
										res_166094 += 1;
									}
							} while(false);
						} while(false);
						res_166100 += 1;
					}
			} while(false);
		} while(false);

	return result_166019;

}

function rows_157414(a_157416) {
	var result_157417 = 0;

		result_157417 = (a_157416 != null ? a_157416.length : 0);

	return result_157417;

}

function hstack_166814(matrices_166817) {
	var result_166818 = null;

		L1: do {
			var k_166836 = 0;
			var colontmp__167100 = 0;
			colontmp__167100 = ((matrices_166817 != null ? matrices_166817.length : 0) - 1);
			var res_167103 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_167103 <= colontmp__167100)) break L3;
						k_166836 = res_167103;
						res_167103 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var r_167012 = 0;
			var colontmp__167120 = 0;
			colontmp__167120 = (rows_157414(matrices_166817[0]) - 1);
			var res_167123 = 0;
			L5: do {
					L6: while (true) {
					if (!(res_167123 <= colontmp__167120)) break L6;
						r_167012 = res_167123;
						var Tmp7 = nimCopy(null, [], NTI148068);
						if (result_166818 != null) { result_166818.push(Tmp7); } else { result_166818 = [Tmp7]; };
						L8: do {
							var a_167076 = null;
							var i_167119 = 0;
							L9: do {
									L10: while (true) {
									if (!(i_167119 < (matrices_166817 != null ? matrices_166817.length : 0))) break L10;
										a_167076 = matrices_166817[i_167119];
										L11: do {
											var c_167088 = 0;
											var colontmp__167110 = 0;
											colontmp__167110 = (cols_157438(a_167076) - 1);
											var res_167113 = 0;
											L12: do {
													L13: while (true) {
													if (!(res_167113 <= colontmp__167110)) break L13;
														c_167088 = res_167113;
														var Tmp14 = nimCopy(null, a_167076[r_167012][c_167088], NTI124);
														if (result_166818[r_167012] != null) { result_166818[r_167012].push(Tmp14); } else { result_166818[r_167012] = [Tmp14]; };
														res_167113 += 1;
													}
											} while(false);
										} while(false);
										i_167119 += 1;
									}
							} while(false);
						} while(false);
						res_167123 += 1;
					}
			} while(false);
		} while(false);

	return result_166818;

}

function HEX2FHEX3D_20255(x_20258, x_20258_Idx, y_20259) {
		x_20258[x_20258_Idx] = (x_20258[x_20258_Idx] / y_20259);

	
}

function gauss_jordan_168319(a_168321, b_168322) {
	var result_168323 = null;

	BeforeRet: do {
		var m_168326 = hstack_166814([a_168321, b_168322]);
		var c_168327 = 0.0;
		var maxrow_168329 = 0;
		L1: do {
			var y_168341 = 0;
			var colontmp__168484 = 0;
			colontmp__168484 = (rows_157414(m_168326) - 1);
			var res_168487 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_168487 <= colontmp__168484)) break L3;
						y_168341 = res_168487;
						maxrow_168329 = y_168341;
						L4: do {
							var y2_168350 = 0;
							var colontmp__168459 = 0;
							var colontmp__168460 = 0;
							colontmp__168459 = (y_168341 + 1);
							colontmp__168460 = (rows_157414(m_168326) - 1);
							var res_168463 = colontmp__168459;
							L5: do {
									L6: while (true) {
									if (!(res_168463 <= colontmp__168460)) break L6;
										y2_168350 = res_168463;
										if ((Math.abs(m_168326[maxrow_168329][y_168341]) < Math.abs(m_168326[y2_168350][y_168341]))) {
										maxrow_168329 = y2_168350;
										}
										
										res_168463 += 1;
									}
							} while(false);
						} while(false);
						var Tmp7 = m_168326[y_168341]; m_168326[y_168341] = m_168326[maxrow_168329]; m_168326[maxrow_168329] = Tmp7;						L8: do {
							var y2_168369 = 0;
							var colontmp__168476 = 0;
							var colontmp__168477 = 0;
							colontmp__168476 = (y_168341 + 1);
							colontmp__168477 = (rows_157414(m_168326) - 1);
							var res_168480 = colontmp__168476;
							L9: do {
									L10: while (true) {
									if (!(res_168480 <= colontmp__168477)) break L10;
										y2_168369 = res_168480;
										c_168327 = (m_168326[y2_168369][y_168341] / m_168326[y_168341][y_168341]);
										L11: do {
											var x_168378 = 0;
											var colontmp__168469 = 0;
											colontmp__168469 = (cols_157438(m_168326) - 1);
											var res_168472 = y_168341;
											L12: do {
													L13: while (true) {
													if (!(res_168472 <= colontmp__168469)) break L13;
														x_168378 = res_168472;
														HEX2DHEX3D_168380(m_168326[y2_168369], x_168378, (m_168326[y_168341][x_168378] * c_168327));
														res_168472 += 1;
													}
											} while(false);
										} while(false);
										res_168480 += 1;
									}
							} while(false);
						} while(false);
						res_168487 += 1;
					}
			} while(false);
		} while(false);
		var y_168402 = (rows_157414(m_168326) - 1);
		var x0_168404 = 0;
		L14: do {
				L15: while (true) {
				if (!(0 <= y_168402)) break L15;
					c_168327 = m_168326[y_168402][y_168402];
					L16: do {
						var y2_168417 = 0;
						var colontmp__168494 = 0;
						colontmp__168494 = (y_168402 - 1);
						var res_168497 = 0;
						L17: do {
								L18: while (true) {
								if (!(res_168497 <= colontmp__168494)) break L18;
									y2_168417 = res_168497;
									x0_168404 = (cols_157438(m_168326) - 1);
									L19: do {
											L20: while (true) {
											if (!((y_168402 - 1) < x0_168404)) break L20;
												HEX2DHEX3D_168380(m_168326[y2_168417], x0_168404, ((m_168326[y_168402][x0_168404] * m_168326[y2_168417][y_168402]) / c_168327));
												x0_168404 -= 1;
											}
									} while(false);
									res_168497 += 1;
								}
						} while(false);
					} while(false);
					HEX2FHEX3D_20255(m_168326[y_168402], y_168402, c_168327);
					L21: do {
						var x_168446 = 0;
						var colontmp__168502 = 0;
						var colontmp__168503 = 0;
						colontmp__168502 = rows_157414(m_168326);
						colontmp__168503 = (cols_157438(m_168326) - 1);
						var res_168506 = colontmp__168502;
						L22: do {
								L23: while (true) {
								if (!(res_168506 <= colontmp__168503)) break L23;
									x_168446 = res_168506;
									HEX2FHEX3D_20255(m_168326[y_168402], x_168446, c_168327);
									res_168506 += 1;
								}
						} while(false);
					} while(false);
					y_168402 -= 1;
				}
		} while(false);
		result_168323 = nimCopy(null, m_168326, NTI148067);
		break BeforeRet;
	} while (false);

	return result_168323;

}

function inverse_168523(a_168525) {
	var result_168526 = null;

		var b_168527 = identity_166014(rows_157414(a_168525), cols_157438(a_168525));
		var c_168528 = gauss_jordan_168319(a_168525, b_168527);
		L1: do {
			var i_168540 = 0;
			var colontmp__168595 = 0;
			colontmp__168595 = (rows_157414(a_168525) - 1);
			var res_168598 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_168598 <= colontmp__168595)) break L3;
						i_168540 = res_168598;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_168526 != null) { result_168526.push(Tmp4); } else { result_168526 = [Tmp4]; };
						L5: do {
							var j_168574 = 0;
							var colontmp__168587 = 0;
							var colontmp__168588 = 0;
							colontmp__168587 = cols_157438(a_168525);
							colontmp__168588 = (cols_157438(c_168528) - 1);
							var res_168591 = colontmp__168587;
							L6: do {
									L7: while (true) {
									if (!(res_168591 <= colontmp__168588)) break L7;
										j_168574 = res_168591;
										var Tmp8 = nimCopy(null, c_168528[i_168540][j_168574], NTI124);
										if (result_168526[i_168540] != null) { result_168526[i_168540].push(Tmp8); } else { result_168526[i_168540] = [Tmp8]; };
										res_168591 += 1;
									}
							} while(false);
						} while(false);
						res_168598 += 1;
					}
			} while(false);
		} while(false);

	return result_168526;

}

function standard_matrix_product_159614(a_159616, b_159617) {
	var result_159618 = null;

		var n_159808 = (a_159616 != null ? a_159616.length : 0);
		L1: do {
			var i_159832 = 0;
			var colontmp__159957 = 0;
			colontmp__159957 = (a_159616 != null ? (a_159616.length-1) : -1);
			var res_159960 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_159960 <= colontmp__159957)) break L3;
						i_159832 = res_159960;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_159618 != null) { result_159618.push(Tmp4); } else { result_159618 = [Tmp4]; };
						L5: do {
							var j_159895 = 0;
							var colontmp__159950 = 0;
							colontmp__159950 = (b_159617[0] != null ? (b_159617[0].length-1) : -1);
							var res_159953 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_159953 <= colontmp__159950)) break L7;
										j_159895 = res_159953;
										if (result_159618[i_159832] != null) { result_159618[i_159832].push(0.0); } else { result_159618[i_159832] = [0.0]; };
										L8: do {
											var k_159929 = 0;
											var colontmp__159943 = 0;
											colontmp__159943 = (b_159617 != null ? (b_159617.length-1) : -1);
											var res_159946 = 0;
											L9: do {
													L10: while (true) {
													if (!(res_159946 <= colontmp__159943)) break L10;
														k_159929 = res_159946;
														HEX2BHEX3D_44127(result_159618[i_159832], j_159895, (a_159616[i_159832][k_159929] * b_159617[k_159929][j_159895]));
														res_159946 += 1;
													}
											} while(false);
										} while(false);
										res_159953 += 1;
									}
							} while(false);
						} while(false);
						res_159960 += 1;
					}
			} while(false);
		} while(false);

	return result_159618;

}

function multiply_159977(a_159979, b_159980) {
	var result_159981 = null;

		result_159981 = nimCopy(null, standard_matrix_product_159614(a_159979, b_159980), NTI148067);

	return result_159981;

}

function HEX2A_159995(a_159997, b_159998) {
	var result_159999 = null;

		result_159999 = nimCopy(null, multiply_159977(a_159997, b_159998), NTI148067);

	return result_159999;

}

function transpose_166614(a_166616) {
	var result_166617 = null;

		L1: do {
			var q_166655 = 0;
			var colontmp__166724 = 0;
			colontmp__166724 = (a_166616[0] != null ? (a_166616[0].length-1) : -1);
			var res_166727 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_166727 <= colontmp__166724)) break L3;
						q_166655 = res_166727;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_166617 != null) { result_166617.push(Tmp4); } else { result_166617 = [Tmp4]; };
						L5: do {
							var k_166704 = 0;
							var colontmp__166717 = 0;
							colontmp__166717 = (a_166616 != null ? (a_166616.length-1) : -1);
							var res_166720 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_166720 <= colontmp__166717)) break L7;
										k_166704 = res_166720;
										var Tmp8 = nimCopy(null, a_166616[k_166704][q_166655], NTI124);
										if (result_166617[q_166655] != null) { result_166617[q_166655].push(Tmp8); } else { result_166617[q_166655] = [Tmp8]; };
										res_166720 += 1;
									}
							} while(false);
						} while(false);
						res_166727 += 1;
					}
			} while(false);
		} while(false);

	return result_166617;

}

function t_166744(a_166746) {
	var result_166747 = null;

		result_166747 = nimCopy(null, transpose_166614(a_166746), NTI148067);

	return result_166747;

}

function subtract_157814(a_157816, b_157817) {
	var result_157818 = null;

		L1: do {
			var k_158224 = 0;
			var colontmp__158307 = 0;
			colontmp__158307 = (a_157816 != null ? (a_157816.length-1) : -1);
			var res_158310 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_158310 <= colontmp__158307)) break L3;
						k_158224 = res_158310;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_157818 != null) { result_157818.push(Tmp4); } else { result_157818 = [Tmp4]; };
						L5: do {
							var q_158287 = 0;
							var colontmp__158300 = 0;
							colontmp__158300 = (a_157816[0] != null ? (a_157816[0].length-1) : -1);
							var res_158303 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_158303 <= colontmp__158300)) break L7;
										q_158287 = res_158303;
										if (result_157818[k_158224] != null) { result_157818[k_158224].push((a_157816[k_158224][q_158287] - b_157817[k_158224][q_158287])); } else { result_157818[k_158224] = [(a_157816[k_158224][q_158287] - b_157817[k_158224][q_158287])]; };
										res_158303 += 1;
									}
							} while(false);
						} while(false);
						res_158310 += 1;
					}
			} while(false);
		} while(false);

	return result_157818;

}

function HEX2D_158363(a_158365, b_158366) {
	var result_158367 = null;

		result_158367 = nimCopy(null, subtract_157814(a_158365, b_158366), NTI148067);

	return result_158367;

}

function norm_153214(a_153216, p_153217) {
	var result_153218 = [0.0];

		L1: do {
			var k_153242 = 0;
			var colontmp__153254 = 0;
			colontmp__153254 = (a_153216 != null ? (a_153216.length-1) : -1);
			var res_153257 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_153257 <= colontmp__153254)) break L3;
						k_153242 = res_153257;
						HEX2BHEX3D_44127(result_153218, 0, Math.pow(a_153216[k_153242], p_153217));
						res_153257 += 1;
					}
			} while(false);
		} while(false);
		result_153218[0] = Math.pow(result_153218[0], (1.0000000000000000e+00 / p_153217));

	return result_153218[0];

}

function wise_multiply_159127(a_159129, b_159130) {
	var result_159131 = null;

		L1: do {
			var k_159155 = 0;
			var colontmp__159238 = 0;
			colontmp__159238 = (a_159129 != null ? (a_159129.length-1) : -1);
			var res_159241 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_159241 <= colontmp__159238)) break L3;
						k_159155 = res_159241;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_159131 != null) { result_159131.push(Tmp4); } else { result_159131 = [Tmp4]; };
						L5: do {
							var q_159218 = 0;
							var colontmp__159231 = 0;
							colontmp__159231 = (a_159129[0] != null ? (a_159129[0].length-1) : -1);
							var res_159234 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_159234 <= colontmp__159231)) break L7;
										q_159218 = res_159234;
										if (result_159131[k_159155] != null) { result_159131[k_159155].push((a_159129[k_159155][q_159218] * b_159130)); } else { result_159131[k_159155] = [(a_159129[k_159155][q_159218] * b_159130)]; };
										res_159234 += 1;
									}
							} while(false);
						} while(false);
						res_159241 += 1;
					}
			} while(false);
		} while(false);

	return result_159131;

}

function wise_multiply_159258(a_159260, b_159261) {
	var result_159262 = null;

		result_159262 = nimCopy(null, wise_multiply_159127(b_159261, a_159260), NTI148067);

	return result_159262;

}

function HEX2A_159384(a_159386, b_159387) {
	var result_159388 = null;

		result_159388 = nimCopy(null, wise_multiply_159258(a_159386, b_159387), NTI148067);

	return result_159388;

}

function pow_153856(a_153858, b_153859) {
	var result_153860 = null;

		L1: do {
			var k_153884 = 0;
			var colontmp__153896 = 0;
			colontmp__153896 = (a_153858 != null ? (a_153858.length-1) : -1);
			var res_153899 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_153899 <= colontmp__153896)) break L3;
						k_153884 = res_153899;
						if (result_153860 != null) { result_153860.push(Math.pow(a_153858[k_153884], b_153859)); } else { result_153860 = [Math.pow(a_153858[k_153884], b_153859)]; };
						res_153899 += 1;
					}
			} while(false);
		} while(false);

	return result_153860;

}

function HEX2EHEX5E_153952(a_153954, b_153955) {
	var result_153956 = null;

		result_153956 = nimCopy(null, pow_153856(a_153954, b_153955), NTI148064);

	return result_153956;

}

function constant_vector_154014(cols_154016, constant_154017) {
	var result_154018 = null;

		L1: do {
			var i_154030 = 0;
			var res_154044 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_154044 <= cols_154016)) break L3;
						i_154030 = res_154044;
						var Tmp4 = nimCopy(null, constant_154017, NTI124);
						if (result_154018 != null) { result_154018.push(Tmp4); } else { result_154018 = [Tmp4]; };
						res_154044 += 1;
					}
			} while(false);
		} while(false);

	return result_154018;

}

function zeros_154061(col_154063) {
	var result_154064 = null;

		result_154064 = nimCopy(null, constant_vector_154014(col_154063, 0.0), NTI148064);

	return result_154064;

}

function diag_157614(a_157616) {
	var result_157617 = null;

		result_157617 = nimCopy(null, zeros_154061(rows_157414(a_157616)), NTI148064);
		L1: do {
			var i_157629 = 0;
			var colontmp__157631 = 0;
			colontmp__157631 = (rows_157414(a_157616) - 1);
			var res_157634 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_157634 <= colontmp__157631)) break L3;
						i_157629 = res_157634;
						result_157617[i_157629] = a_157616[i_157629][i_157629];
						res_157634 += 1;
					}
			} while(false);
		} while(false);

	return result_157617;

}

function any_val_151414(a_151416, true_val_151417) {
	var result_151418 = false;

	BeforeRet: do {
		L1: do {
			var k_151442 = 0;
			var colontmp__151444 = 0;
			colontmp__151444 = (a_151416 != null ? (a_151416.length-1) : -1);
			var res_151447 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_151447 <= colontmp__151444)) break L3;
						k_151442 = res_151447;
						if ((a_151416[k_151442] == true_val_151417)) {
						result_151418 = true;
						break BeforeRet;
						}
						
						res_151447 += 1;
					}
			} while(false);
		} while(false);
		result_151418 = false;
		break BeforeRet;
	} while (false);

	return result_151418;

}

function subtract_149014(a_149016, b_149017) {
	var result_149018 = null;

		L1: do {
			var k_149224 = 0;
			var colontmp__149236 = 0;
			colontmp__149236 = (a_149016 != null ? (a_149016.length-1) : -1);
			var res_149239 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_149239 <= colontmp__149236)) break L3;
						k_149224 = res_149239;
						if (result_149018 != null) { result_149018.push((a_149016[k_149224] - b_149017[k_149224])); } else { result_149018 = [(a_149016[k_149224] - b_149017[k_149224])]; };
						res_149239 += 1;
					}
			} while(false);
		} while(false);

	return result_149018;

}

function HEX2D_149292(a_149294, b_149295) {
	var result_149296 = null;

		result_149296 = nimCopy(null, subtract_149014(a_149294, b_149295), NTI148064);

	return result_149296;

}

function divide_150456(a_150458, b_150459) {
	var result_150460 = null;

		L1: do {
			var k_150484 = 0;
			var colontmp__150496 = 0;
			colontmp__150496 = (a_150458 != null ? (a_150458.length-1) : -1);
			var res_150499 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_150499 <= colontmp__150496)) break L3;
						k_150484 = res_150499;
						if (result_150460 != null) { result_150460.push((a_150458[k_150484] / b_150459)); } else { result_150460 = [(a_150458[k_150484] / b_150459)]; };
						res_150499 += 1;
					}
			} while(false);
		} while(false);

	return result_150460;

}

function HEX2F_150594(a_150596, b_150597) {
	var result_150598 = null;

		result_150598 = nimCopy(null, divide_150456(a_150596, b_150597), NTI148064);

	return result_150598;

}

function sum_160414(a_160416, axis_160417) {
	var result_160418 = [null];

		if ((axis_160417 == 0)) {
		L1: do {
			var c_160456 = 0;
			var colontmp__160592 = 0;
			colontmp__160592 = (a_160416[0] != null ? (a_160416[0].length-1) : -1);
			var res_160595 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_160595 <= colontmp__160592)) break L3;
						c_160456 = res_160595;
						if (result_160418[0] != null) { result_160418[0].push(0.0); } else { result_160418[0] = [0.0]; };
						L4: do {
							var r_160490 = 0;
							var colontmp__160585 = 0;
							colontmp__160585 = (a_160416 != null ? (a_160416.length-1) : -1);
							var res_160588 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_160588 <= colontmp__160585)) break L6;
										r_160490 = res_160588;
										HEX2BHEX3D_44127(result_160418[0], c_160456, a_160416[r_160490][c_160456]);
										res_160588 += 1;
									}
							} while(false);
						} while(false);
						res_160595 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			L7: do {
				var r_160524 = 0;
				var colontmp__160608 = 0;
				colontmp__160608 = (a_160416 != null ? (a_160416.length-1) : -1);
				var res_160611 = 0;
				L8: do {
						L9: while (true) {
						if (!(res_160611 <= colontmp__160608)) break L9;
							r_160524 = res_160611;
							if (result_160418[0] != null) { result_160418[0].push(0.0); } else { result_160418[0] = [0.0]; };
							L10: do {
								var c_160572 = 0;
								var colontmp__160601 = 0;
								colontmp__160601 = (a_160416[0] != null ? (a_160416[0].length-1) : -1);
								var res_160604 = 0;
								L11: do {
										L12: while (true) {
										if (!(res_160604 <= colontmp__160601)) break L12;
											c_160572 = res_160604;
											HEX2BHEX3D_44127(result_160418[0], r_160524, a_160416[r_160524][c_160572]);
											res_160604 += 1;
										}
								} while(false);
							} while(false);
							res_160611 += 1;
						}
				} while(false);
			} while(false);
		}
		

	return result_160418[0];

}

function mean_161814(a_161816, axis_161817) {
	var result_161818 = null;

	BeforeRet: do {
		if ((axis_161817 == 0)) {
		result_161818 = nimCopy(null, HEX2F_150594(sum_160414(a_161816, axis_161817), cols_157438(a_161816)), NTI148064);
		break BeforeRet;
		}
		
		result_161818 = nimCopy(null, HEX2F_150594(sum_160414(a_161816, axis_161817), rows_157414(a_161816)), NTI148064);
		break BeforeRet;
	} while (false);

	return result_161818;

}

function pow_161327(a_161329, b_161330) {
	var result_161331 = null;

		L1: do {
			var k_161355 = 0;
			var colontmp__161438 = 0;
			colontmp__161438 = (a_161329 != null ? (a_161329.length-1) : -1);
			var res_161441 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_161441 <= colontmp__161438)) break L3;
						k_161355 = res_161441;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_161331 != null) { result_161331.push(Tmp4); } else { result_161331 = [Tmp4]; };
						L5: do {
							var q_161418 = 0;
							var colontmp__161431 = 0;
							colontmp__161431 = (a_161329[0] != null ? (a_161329[0].length-1) : -1);
							var res_161434 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_161434 <= colontmp__161431)) break L7;
										q_161418 = res_161434;
										if (result_161331[k_161355] != null) { result_161331[k_161355].push(Math.pow(a_161329[k_161355][q_161418], b_161330)); } else { result_161331[k_161355] = [Math.pow(a_161329[k_161355][q_161418], b_161330)]; };
										res_161434 += 1;
									}
							} while(false);
						} while(false);
						res_161441 += 1;
					}
			} while(false);
		} while(false);

	return result_161331;

}

function HEX2EHEX5E_161494(a_161496, b_161497) {
	var result_161498 = null;

		result_161498 = nimCopy(null, pow_161327(a_161496, b_161497), NTI148067);

	return result_161498;

}

function wise_variance_162034(a_162036, axis_162037) {
	var result_162038 = null;

	BeforeRet: do {
		result_162038 = nimCopy(null, HEX2EHEX5E_153952(HEX2D_149292(mean_161814(HEX2EHEX5E_161494(a_162036, 2.0000000000000000e+00), axis_162037), mean_161814(a_162036, axis_162037)), 2.0000000000000000e+00), NTI148064);
		break BeforeRet;
	} while (false);

	return result_162038;

}

function wise_standard_deviation_162235(a_162237, axis_162238) {
	var result_162239 = null;

	BeforeRet: do {
		result_162239 = nimCopy(null, HEX2EHEX5E_153952(wise_variance_162034(a_162237, axis_162238), 5.0000000000000000e-01), NTI148064);
		break BeforeRet;
	} while (false);

	return result_162239;

}

function addition_148656(a_148658, b_148659) {
	var result_148660 = null;

		L1: do {
			var k_148684 = 0;
			var colontmp__148696 = 0;
			colontmp__148696 = (a_148658 != null ? (a_148658.length-1) : -1);
			var res_148699 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_148699 <= colontmp__148696)) break L3;
						k_148684 = res_148699;
						if (result_148660 != null) { result_148660.push((a_148658[k_148684] + b_148659)); } else { result_148660 = [(a_148658[k_148684] + b_148659)]; };
						res_148699 += 1;
					}
			} while(false);
		} while(false);

	return result_148660;

}

function subtract_149256(a_149258, b_149259) {
	var result_149260 = null;

		result_149260 = nimCopy(null, addition_148656(a_149258, -(b_149259)), NTI148064);

	return result_149260;

}

function HEX2D_149310(a_149312, b_149313) {
	var result_149314 = null;

		result_149314 = nimCopy(null, subtract_149256(a_149312, b_149313), NTI148064);

	return result_149314;

}

function ravel_167814(a_167816) {
	var result_167817 = null;

		L1: do {
			var r_167829 = 0;
			var colontmp__167861 = 0;
			colontmp__167861 = (rows_157414(a_167816) - 1);
			var res_167864 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_167864 <= colontmp__167861)) break L3;
						r_167829 = res_167864;
						L4: do {
							var c_167841 = 0;
							var colontmp__167854 = 0;
							colontmp__167854 = (cols_157438(a_167816) - 1);
							var res_167857 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_167857 <= colontmp__167854)) break L6;
										c_167841 = res_167857;
										var Tmp7 = nimCopy(null, a_167816[r_167829][c_167841], NTI124);
										if (result_167817 != null) { result_167817.push(Tmp7); } else { result_167817 = [Tmp7]; };
										res_167857 += 1;
									}
							} while(false);
						} while(false);
						res_167864 += 1;
					}
			} while(false);
		} while(false);

	return result_167817;

}

function mean_155214(a_155216, axis_155217) {
	var result_155218 = [0.0];

		L1: do {
			var k_155424 = 0;
			var colontmp__155443 = 0;
			colontmp__155443 = (a_155216 != null ? (a_155216.length-1) : -1);
			var res_155446 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_155446 <= colontmp__155443)) break L3;
						k_155424 = res_155446;
						HEX2BHEX3D_44127(result_155218, 0, a_155216[k_155424]);
						res_155446 += 1;
					}
			} while(false);
		} while(false);
		result_155218[0] = (result_155218[0] / (a_155216 != null ? a_155216.length : 0));

	return result_155218[0];

}

function loglikelihood_197964(d_197966, y_197967) {
	var result_197968 = [0.0];

		L1: do {
			var yi_197977 = 0.0;
			var i_197991 = 0;
			var l_197993 = (y_197967 != null ? y_197967.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_197991 < l_197993)) break L3;
						yi_197977 = y_197967[i_197991];
						HEX2BHEX3D_44127(result_197968, 0, (((-5.0000000000000000e-01 * Math.log(6.2831853071795862e+00)) - Math.log(d_197966.std)) - (Math.pow((yi_197977 - d_197966.mean), 2.0000000000000000e+00) / ((2.0000000000000000e+00 * d_197966.std) * d_197966.std))));
						i_197991 += 1;
					}
			} while(false);
		} while(false);

	return result_197968[0];

}

function normal_197031(mean_197033, std_197034) {
	var result_197035 = null;

		result_197035 = {mean: 0.0, std: 0.0};
		result_197035.mean = mean_197033;
		result_197035.std = std_197034;

	return result_197035;

}

function scaled_shifted_203959(distribution_203963, location_203965, scale_203967) {
	var result_203969 = null;

		result_203969 = {distribution: null, location: 0.0, scale: 0.0};
		result_203969.distribution = distribution_203963;
		result_203969.location = location_203965;
		result_203969.scale = scale_203967;

	return result_203969;

}

function htest_score_204014(distribution_204018, score_204020, test_type_204022) {
	var result_204024 = null;

		result_204024 = {distribution: null, test_score: 0.0, test_type: 0};
		result_204024.distribution = distribution_204018;
		result_204024.test_score = score_204020;
		result_204024.test_type = test_type_204022;

	return result_204024;

}

function shifted_estimator_203947(distribution_203951, location_203953, scale_203955) {
	var result_203957 = null;

		var est_distribution_203991 = scaled_shifted_203959(distribution_203951, location_203953, scale_203955);
		var est_null_distribution_204003 = scaled_shifted_203959(distribution_203951, 0.0, scale_203955);
		result_203957 = {distribution: null, hypothesis_test: null};
		result_203957.distribution = est_distribution_203991;
		result_203957.hypothesis_test = htest_score_204014(est_null_distribution_204003, location_203953, 0);

	return result_203957;

}

function invchisquare_199866(dof_199868, scale_199869) {
		var Tmp1;

	var result_199870 = null;

		result_199870 = {dof: 0.0, scale: 0.0};
		result_199870.dof = dof_199868;
		if ((classify_29030(scale_199869) == 4)) {
		Tmp1 = (1.0000000000000000e+00 / dof_199868);
		}
		else {
		Tmp1 = scale_199869;
		}
		
		result_199870.scale = Tmp1;

	return result_199870;

}

function new_seq_204472(len_204476) {
	var result_204478 = null;

		result_204478 = new Array(len_204476); for (var i=0;i<len_204476;++i) {result_204478[i]=null;}
	return result_204478;

}

function len_204437(x_204443) {
	var result_204444 = 0;

		result_204444 = nimMax(0, ((x_204443.b - x_204443.a) + 1));

	return result_204444;

}

function scaled_shifted_204144(distribution_204148, location_204150, scale_204152) {
	var result_204154 = null;

		result_204154 = {distribution: null, location: 0.0, scale: 0.0};
		result_204154.distribution = distribution_204148;
		result_204154.location = location_204150;
		result_204154.scale = scale_204152;

	return result_204154;

}

function htest_score_204199(distribution_204203, score_204205, test_type_204207) {
	var result_204209 = null;

		result_204209 = {distribution: null, test_score: 0.0, test_type: 0};
		result_204209.distribution = distribution_204203;
		result_204209.test_score = score_204205;
		result_204209.test_type = test_type_204207;

	return result_204209;

}

function shifted_estimator_204132(distribution_204136, location_204138, scale_204140) {
	var result_204142 = null;

		var est_distribution_204176 = scaled_shifted_204144(distribution_204136, location_204138, scale_204140);
		var est_null_distribution_204188 = scaled_shifted_204144(distribution_204136, 0.0, scale_204140);
		result_204142 = {distribution: null, hypothesis_test: null};
		result_204142.distribution = est_distribution_204176;
		result_204142.hypothesis_test = htest_score_204199(est_null_distribution_204188, location_204138, 0);

	return result_204142;

}

function studentt_196693(dof_196695) {
	var result_196696 = null;

		result_196696 = {dof: 0};
		result_196696.dof = Math.trunc(dof_196695);

	return result_196696;

}

function htest_score_204538(distribution_204542, score_204544, test_type_204546) {
	var result_204548 = null;

		result_204548 = {distribution: null, test_score: 0.0, test_type: 0};
		result_204548.distribution = distribution_204542;
		result_204548.test_score = score_204544;
		result_204548.test_type = test_type_204546;

	return result_204548;

}

function central_f_200848(df1_200850, df2_200851) {
	var result_200852 = null;

		result_200852 = {df1: 0.0, df2: 0.0};
		result_200852.df1 = df1_200850;
		result_200852.df2 = df2_200851;

	return result_200852;

}

function new_seq_177621(len_177625) {
	var result_177627 = null;

		result_177627 = new Array(len_177625); for (var i=0;i<len_177625;++i) {result_177627[i]=null;}
	return result_177627;

}

function ols_model_203860(x_203862, y_203863, names_203880) {
			var Tmp1;
		var Tmp2;
		var Tmp3;
		var Tmp9;

	var result_203881 = null;

		result_203881 = {residuals: null, sum_squared_errors: 0.0, degrees_of_freedom: 0.0, variance_matrix_coefficients: null, include_intercept: false, loglikelihood: 0.0, R2: 0.0, adjustedR2: 0.0, beta_hat: null, coefficients: null, noise_variance: null, model_significance: null, feature_names: null};
			if (!(0 < (names_203880 != null ? names_203880.length : 0))) Tmp1 = false; else {				Tmp1 = !(((names_203880 != null ? names_203880.length : 0) == cols_157438(x_203862)));			}		if (Tmp1) {
		var e_203919 = null;
		e_203919 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_203919.message = nimCopy(null, makeNimstrLit("incorrect number of feature names"), NTI138);
		e_203919.parent = null;
		raiseException(e_203919, "ValueError");
		}
		
		var y_203928 = as_column_vector_155014(y_203863);
		var xp_x_203929 = inverse_168523(HEX2A_159995(t_166744(x_203862), x_203862));
		var beta_hat_203930 = HEX2A_159995(HEX2A_159995(xp_x_203929, t_166744(x_203862)), y_203928);
		var ypred_203931 = HEX2A_159995(x_203862, beta_hat_203930);
		var residuals_203932 = nimCopy(null, t_166744(HEX2D_158363(y_203928, ypred_203931))[0], NTI148068);
		var sse_203933 = HEX5E_148027(norm_153214(residuals_203932, 2.0000000000000000e+00), 2.0000000000000000e+00);
		var variance_normalization_factor_203934 = (((rows_157414(x_203862) - cols_157438(x_203862)) - 1) / (rows_157414(x_203862) - cols_157438(x_203862)));
		var s2_203935 = ((sse_203933 / ((rows_157414(x_203862) - cols_157438(x_203862)) - 1)) * variance_normalization_factor_203934);
		var var_beta_hat_203936 = HEX2A_159384(s2_203935, xp_x_203929);
		var estimate_std_203937 = HEX2EHEX5E_153952(diag_157614(var_beta_hat_203936), 5.0000000000000000e-01);
		var coefficients_203938 = nimCopy(null, t_166744(beta_hat_203930)[0], NTI148068);
		var include_intercept_203939 = any_val_151414(wise_standard_deviation_162235(x_203862, 0), 0.0);
		var total_model_variation_203941 = HEX5E_148027(norm_153214(HEX2D_149310(ravel_167814(ypred_203931), mean_155214(ravel_167814(ypred_203931), 0)), 2.0000000000000000e+00), 2.0000000000000000e+00);
		if (include_intercept_203939) {
		total_model_variation_203941 = HEX5E_148027(norm_153214(HEX2D_149310(ravel_167814(ypred_203931), mean_155214(y_203863, 0)), 2.0000000000000000e+00), 2.0000000000000000e+00);
		}
		else {
			total_model_variation_203941 = HEX5E_148027(norm_153214(HEX2D_149292(y_203863, residuals_203932), 2.0000000000000000e+00), 2.0000000000000000e+00);
		}
		
		if (include_intercept_203939) {
		Tmp2 = -1;
		}
		else {
		Tmp2 = 0;
		}
		
		var f_score_203944 = ((total_model_variation_203941 / (cols_157438(x_203862) + Tmp2)) / (sse_203933 / (rows_157414(x_203862) - cols_157438(x_203862))));
		result_203881.include_intercept = include_intercept_203939;
		result_203881.residuals = nimCopy(null, residuals_203932, NTI148068);
		result_203881.sum_squared_errors = sse_203933;
		result_203881.variance_matrix_coefficients = nimCopy(null, var_beta_hat_203936, NTI148067);
		result_203881.R2 = (total_model_variation_203941 / (total_model_variation_203941 + sse_203933));
		if (include_intercept_203939) {
		Tmp3 = -1;
		}
		else {
		Tmp3 = 0;
		}
		
		result_203881.adjustedR2 = (1.0000000000000000e+00 - (((rows_157414(x_203862) + Tmp3) / (rows_157414(x_203862) - cols_157438(x_203862))) * (1.0000000000000000e+00 - result_203881.R2)));
		result_203881.beta_hat = nimCopy(null, ravel_167814(beta_hat_203930), NTI148064);
		result_203881.loglikelihood = loglikelihood_197964(normal_197031(0.0, Math.sqrt(Math.abs(((sse_203933 * ((result_203881.degrees_of_freedom + 1.0000000000000000e-10) - 2.0000000000000000e+00)) / (rows_157414(x_203862) - cols_157438(x_203862)))))), residuals_203932);
		result_203881.degrees_of_freedom = (rows_157414(x_203862) - cols_157438(x_203862));
		result_203881.noise_variance = shifted_estimator_203947(invchisquare_199866((result_203881.degrees_of_freedom + 1.0000000000000000e-10), NaN), 0.0, ((sse_203933 * ((result_203881.degrees_of_freedom + 1.0000000000000000e-10) - 2.0000000000000000e+00)) / (rows_157414(x_203862) - cols_157438(x_203862))));
		L4: do {
			var HEX3Atmp_204409 = HEX2EHEX2E_57828(0, (estimate_std_203937 != null ? (estimate_std_203937.length-1) : -1));
			var i_204413 = 0;
			var result_204503 = new_seq_204472(len_204437(HEX3Atmp_204409));
			L5: do {
				var it_204511 = 0;
				L6: do {
					var x_205215 = 0;
					var colontmp__205217 = 0;
					var colontmp__205219 = 0;
					colontmp__205217 = HEX3Atmp_204409.a;
					colontmp__205219 = HEX3Atmp_204409.b;
					var res_205221 = colontmp__205217;
					L7: do {
							L8: while (true) {
							if (!(res_205221 <= colontmp__205219)) break L8;
								x_205215 = res_205221;
								it_204511 = x_205215;
								result_204503[i_204413] = shifted_estimator_204132(studentt_196693(result_203881.degrees_of_freedom), coefficients_203938[it_204511], estimate_std_203937[it_204511]);
								i_204413 += 1;
								res_205221 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
		} while(false);
		result_203881.coefficients = nimCopy(null, result_204503, NTI204477);
		if (include_intercept_203939) {
		Tmp9 = -1;
		}
		else {
		Tmp9 = 0;
		}
		
		var ms_model_dof_204535 = (cols_157438(x_203862) + Tmp9);
		var ms_residual_dof_204536 = (rows_157414(x_203862) - cols_157438(x_203862));
		result_203881.model_significance = htest_score_204538(central_f_200848(ms_model_dof_204535, ms_residual_dof_204536), ((total_model_variation_203941 / ms_model_dof_204535) / (sse_203933 / ms_residual_dof_204536)), 1);
		if ((0 < (names_203880 != null ? names_203880.length : 0))) {
		result_203881.feature_names = nimCopy(null, names_203880, NTI203864);
		}
		else {
			L10: do {
				var HEX3Atmp_205009 = HEX2EHEX2E_57828(1, cols_157438(x_203862));
				var i_205013 = 0;
				var result_205052 = new_seq_177621(len_204437(HEX3Atmp_205009));
				L11: do {
					var it_205060 = 0;
					L12: do {
						var x_205230 = 0;
						var colontmp__205232 = 0;
						var colontmp__205234 = 0;
						colontmp__205232 = HEX3Atmp_205009.a;
						colontmp__205234 = HEX3Atmp_205009.b;
						var res_205236 = colontmp__205232;
						L13: do {
								L14: while (true) {
								if (!(res_205236 <= colontmp__205234)) break L14;
									x_205230 = res_205236;
									it_205060 = x_205230;
									var fmt_res_205065 = mnewString(0);
									if (fmt_res_205065 != null) { fmt_res_205065 = (fmt_res_205065).concat(makeNimstrLit("x")); } else { fmt_res_205065 = makeNimstrLit("x"); };
									if (fmt_res_205065 != null) { fmt_res_205065 = (fmt_res_205065).concat(cstrToNimstr((it_205060)+"")); } else { fmt_res_205065 = cstrToNimstr((it_205060)+"").slice(); };
									result_205052[i_205013] = nimCopy(null, fmt_res_205065, NTI138);
									i_205013 += 1;
									res_205236 += 1;
								}
						} while(false);
					} while(false);
				} while(false);
			} while(false);
			result_203881.feature_names = nimCopy(null, result_205052, NTI177626);
		}
		

	return result_203881;

}

function wise_multiply_158614(a_158616, b_158617) {
	var result_158618 = null;

		L1: do {
			var k_159024 = 0;
			var colontmp__159107 = 0;
			colontmp__159107 = (a_158616 != null ? (a_158616.length-1) : -1);
			var res_159110 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_159110 <= colontmp__159107)) break L3;
						k_159024 = res_159110;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_158618 != null) { result_158618.push(Tmp4); } else { result_158618 = [Tmp4]; };
						L5: do {
							var q_159087 = 0;
							var colontmp__159100 = 0;
							colontmp__159100 = (a_158616[0] != null ? (a_158616[0].length-1) : -1);
							var res_159103 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_159103 <= colontmp__159100)) break L7;
										q_159087 = res_159103;
										if (result_158618[k_159024] != null) { result_158618[k_159024].push((a_158616[k_159024][q_159087] * b_158617[k_159024][q_159087])); } else { result_158618[k_159024] = [(a_158616[k_159024][q_159087] * b_158617[k_159024][q_159087])]; };
										res_159103 += 1;
									}
							} while(false);
						} while(false);
						res_159110 += 1;
					}
			} while(false);
		} while(false);

	return result_158618;

}

function HEX2EHEX2A_159276(a_159278, b_159279) {
	var result_159280 = null;

		result_159280 = nimCopy(null, wise_multiply_158614(a_159278, b_159279), NTI148067);

	return result_159280;

}

function predict_226235(model_226237, x_226238) {
	var result_226239 = null;

		result_226239 = {predictions: null, degrees_of_freedom: 0.0, prediction_means: null};
		var yhat_226248 = ravel_167814(HEX2A_159995(x_226238, as_column_vector_155014(model_226237.beta_hat)));
		var yvar_226250 = sum_160414(HEX2EHEX2A_159276(HEX2A_159995(x_226238, model_226237.variance_matrix_coefficients), x_226238), 1);
		var estimate_std_226251 = HEX2EHEX5E_153952(yvar_226250, 5.0000000000000000e-01);
		result_226239.prediction_means = nimCopy(null, yhat_226248, NTI148064);
		result_226239.degrees_of_freedom = ((estimate_std_226251 != null ? estimate_std_226251.length : 0) - 1);
		L1: do {
			var HEX3Atmp_226409 = HEX2EHEX2E_57828(0, (estimate_std_226251 != null ? (estimate_std_226251.length-1) : -1));
			var i_226413 = 0;
			var result_226452 = new_seq_204472(len_204437(HEX3Atmp_226409));
			L2: do {
				var it_226460 = 0;
				L3: do {
					var x_226488 = 0;
					var colontmp__226490 = 0;
					var colontmp__226492 = 0;
					colontmp__226490 = HEX3Atmp_226409.a;
					colontmp__226492 = HEX3Atmp_226409.b;
					var res_226494 = colontmp__226490;
					L4: do {
							L5: while (true) {
							if (!(res_226494 <= colontmp__226492)) break L5;
								x_226488 = res_226494;
								it_226460 = x_226488;
								result_226452[i_226413] = shifted_estimator_204132(studentt_196693(result_226239.degrees_of_freedom), yhat_226248[it_226460], estimate_std_226251[it_226460]);
								i_226413 += 1;
								res_226494 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
		} while(false);
		result_226239.predictions = nimCopy(null, result_226452, NTI204477);

	return result_226239;

}

function data_transform_202230(x_202232, dt_202233) {
	var result_202234 = null;

		L1: do {
			var r_202246 = 0;
			var colontmp__202258 = 0;
			colontmp__202258 = rows_157414(x_202232);
			var res_202261 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_202261 <= colontmp__202258)) break L3;
						r_202246 = res_202261;
						if (result_202234 != null) { result_202234.push(dt_202233(x_202232[(r_202246 - 1)])); } else { result_202234 = [dt_202233(x_202232[(r_202246 - 1)])]; };
						res_202261 += 1;
					}
			} while(false);
		} while(false);

	return result_202234;

}

function add_154450(x_154456, x_154456_Idx, y_154459) {
		var xl_154467 = (x_154456[x_154456_Idx] != null ? x_154456[x_154456_Idx].length : 0);
		if (x_154456[x_154456_Idx].length < (xl_154467 + (y_154459 != null ? y_154459.length : 0))) { for (var i=x_154456[x_154456_Idx].length;i<(xl_154467 + (y_154459 != null ? y_154459.length : 0));++i) x_154456[x_154456_Idx].push(0.0); }
               else { x_154456[x_154456_Idx].length = (xl_154467 + (y_154459 != null ? y_154459.length : 0)); };
		L1: do {
			var i_154502 = 0;
			var colontmp__154504 = 0;
			colontmp__154504 = (y_154459 != null ? (y_154459.length-1) : -1);
			var res_154507 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_154507 <= colontmp__154504)) break L3;
						i_154502 = res_154507;
						x_154456[x_154456_Idx][(xl_154467 + i_154502)] = y_154459[i_154502];
						res_154507 += 1;
					}
			} while(false);
		} while(false);

	
}

function hstack_154619(a_154621, b_154622) {
	var result_154623 = [null];

		result_154623[0] = nimCopy(null, [], NTI154638);
		add_154450(result_154623, 0, []);
		L1: do {
			var c_154684 = 0;
			var colontmp__154707 = 0;
			colontmp__154707 = ((a_154621 != null ? a_154621.length : 0) - 1);
			var res_154710 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_154710 <= colontmp__154707)) break L3;
						c_154684 = res_154710;
						var Tmp4 = nimCopy(null, a_154621[c_154684], NTI124);
						if (result_154623[0] != null) { result_154623[0].push(Tmp4); } else { result_154623[0] = [Tmp4]; };
						res_154710 += 1;
					}
			} while(false);
		} while(false);
		var Tmp5 = nimCopy(null, b_154622, NTI124);
		if (result_154623[0] != null) { result_154623[0].push(Tmp5); } else { result_154623[0] = [Tmp5]; };

	return result_154623[0];

}

function ar1_227214(y_227216, include_mean_227217, feature_name_227218) {

		function HEX3Aanonymous_227314(x_227322) {
			var result_227327 = null;

				result_227327 = nimCopy(null, hstack_154619(x_227322, 1.0000000000000000e+00), NTI148064);

			return result_227327;

		}

	var result_227219 = null;

		var y_0_to_t_1_227266 = HEX5BHEX5D_203119(y_227216, HEX2EHEX2E_57828(0, ((y_227216 != null ? (y_227216.length-1) : -1) - 1)));
		var y_1_to_t_227313 = HEX5BHEX5D_203119(y_227216, HEX2EHEX2E_57828(1, (y_227216 != null ? (y_227216.length-1) : -1)));
		if (include_mean_227217) {
		result_227219 = ols_model_203860(data_transform_202230(as_column_vector_155014(y_0_to_t_1_227266), HEX3Aanonymous_227314), y_1_to_t_227313, [feature_name_227218]);
		}
		else {
			result_227219 = ols_model_203860(as_column_vector_155014(y_0_to_t_1_227266), y_1_to_t_227313, [feature_name_227218]);
		}
		

	return result_227219;

}

function mean_199681(d_199683) {
		var Tmp1;

	var result_199684 = 0.0;

	BeforeRet: do {
		if ((1.0000000000000000e+00 < d_199683.shape)) {
		Tmp1 = (d_199683.scale / (d_199683.shape - 1.0000000000000000e+00));
		}
		else {
		Tmp1 = NaN;
		}
		
		result_199684 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_199684;

}

function as_inv_gamma_200625(d_200627) {
	var result_200628 = null;

		result_200628 = {shape: (d_200627.dof / 2.0000000000000000e+00), scale: ((d_200627.dof * d_200627.scale) / 2.0000000000000000e+00)};

	return result_200628;

}

function mean_200697(d_200699) {
	var result_200700 = 0.0;

		result_200700 = mean_199681(as_inv_gamma_200625(d_200699));

	return result_200700;

}

function mean_213267(d_213272) {
	var result_213273 = 0.0;

		result_213273 = ((mean_200697(d_213272.distribution) * d_213272.scale) + d_213272.location);

	return result_213273;

}

function estimate_213248(d_213253) {
	var result_213254 = 0.0;

		result_213254 = mean_213267(d_213253.distribution);

	return result_213254;

}

function hstack_154414(vectors_154417) {
	var result_154418 = [null];

		result_154418[0] = nimCopy(null, [], NTI154433);
		add_154450(result_154418, 0, []);
		L1: do {
			var a_154563 = null;
			var i_154605 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_154605 < (vectors_154417 != null ? vectors_154417.length : 0))) break L3;
						a_154563 = vectors_154417[i_154605];
						L4: do {
							var c_154582 = 0;
							var colontmp__154596 = 0;
							colontmp__154596 = ((a_154563 != null ? a_154563.length : 0) - 1);
							var res_154599 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_154599 <= colontmp__154596)) break L6;
										c_154582 = res_154599;
										var Tmp7 = nimCopy(null, a_154563[c_154582], NTI124);
										if (result_154418[0] != null) { result_154418[0].push(Tmp7); } else { result_154418[0] = [Tmp7]; };
										res_154599 += 1;
									}
							} while(false);
						} while(false);
						i_154605 += 1;
					}
			} while(false);
		} while(false);

	return result_154418[0];

}

function model_candidate_239301(x_239303, y_239304, change_point_239305) {
	var result_239306 = null;

		result_239306 = {after_model: null, before_model: null, after_residual_model: null, before_residual_model: null, loglikelihood: 0.0, change_point_candidate: 0, parameters_mean: null, before_model_covariance_parameters: null, existence_change_point_hypothesis: null};
		var pre_x_239353 = add_intercept_202463(HEX5BHEX5D_203119(x_239303, HEX2EHEX2E_57828(0, change_point_239305)));
		var pre_y_239392 = HEX5BHEX5D_203119(y_239304, HEX2EHEX2E_57828(0, change_point_239305));
		var post_x_239437 = add_intercept_202463(HEX5BHEX5D_203119(x_239303, HEX2EHEX2E_57828((change_point_239305 + 1), (x_239303 != null ? (x_239303.length-1) : -1))));
		var post_y_239482 = HEX5BHEX5D_203119(y_239304, HEX2EHEX2E_57828((change_point_239305 + 1), (y_239304 != null ? (y_239304.length-1) : -1)));
		var pre_ols_model_239495 = ols_model_203860(pre_x_239353, pre_y_239392, [makeNimstrLit("beta1"), makeNimstrLit("beta0")]);
		var post_ols_model_239508 = ols_model_203860(post_x_239437, HEX2D_149292(post_y_239482, predict_226235(pre_ols_model_239495, post_x_239437).prediction_means), [makeNimstrLit("delta1"), makeNimstrLit("delta0")]);
		var pre_residual_ar_model_239509 = ar1_227214(pre_ols_model_239495.residuals, false, makeNimstrLit("phi0"));
		var post_residual_ar_model_239510 = ar1_227214(post_ols_model_239508.residuals, false, makeNimstrLit("phi1"));
		var likelihood_model_239617 = (loglikelihood_197964(normal_197031(0.0, Math.sqrt(estimate_213248(pre_residual_ar_model_239509.noise_variance))), pre_ols_model_239495.residuals) + loglikelihood_197964(normal_197031(0.0, Math.sqrt(estimate_213248(post_residual_ar_model_239510.noise_variance))), post_ols_model_239508.residuals));
		result_239306 = {before_model: pre_ols_model_239495, after_model: post_ols_model_239508, before_residual_model: pre_residual_ar_model_239509, after_residual_model: post_residual_ar_model_239510, loglikelihood: likelihood_model_239617, change_point_candidate: change_point_239305, parameters_mean: hstack_154414([pre_ols_model_239495.beta_hat, pre_residual_ar_model_239509.beta_hat, post_ols_model_239508.beta_hat, post_residual_ar_model_239510.beta_hat]), before_model_covariance_parameters: null, existence_change_point_hypothesis: null};

	return result_239306;

}

function data_transform_202278(x_202280, dt_202281) {
	var result_202282 = null;

		L1: do {
			var r_202294 = 0;
			var colontmp__202306 = 0;
			colontmp__202306 = (rows_157414(x_202280) - 1);
			var res_202309 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_202309 <= colontmp__202306)) break L3;
						r_202294 = res_202309;
						if (result_202282 != null) { result_202282.push(dt_202281(x_202280[r_202294], r_202294)); } else { result_202282 = [dt_202281(x_202280[r_202294], r_202294)]; };
						res_202309 += 1;
					}
			} while(false);
		} while(false);

	return result_202282;

}

function constant_matrix_166214(rows_166216, cols_166217, constant_166218) {
	var result_166219 = null;

		L1: do {
			var i_166231 = 0;
			var res_166289 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_166289 <= rows_166216)) break L3;
						i_166231 = res_166289;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_166219 != null) { result_166219.push(Tmp4); } else { result_166219 = [Tmp4]; };
						L5: do {
							var j_166268 = 0;
							var res_166283 = 1;
							L6: do {
									L7: while (true) {
									if (!(res_166283 <= cols_166217)) break L7;
										j_166268 = res_166283;
										var Tmp8 = nimCopy(null, constant_166218, NTI124);
										if (result_166219[(i_166231 - 1)] != null) { result_166219[(i_166231 - 1)].push(Tmp8); } else { result_166219[(i_166231 - 1)] = [Tmp8]; };
										res_166283 += 1;
									}
							} while(false);
						} while(false);
						res_166289 += 1;
					}
			} while(false);
		} while(false);

	return result_166219;

}

function ones_166324(row_166326, col_166327) {
	var result_166328 = null;

		result_166328 = nimCopy(null, constant_matrix_166214(row_166326, col_166327, 1.0000000000000000e+00), NTI148067);

	return result_166328;

}

function covariance_matrix_for_before_model_238764(model_238766, x_238767) {

		function HEX3Aanonymous_238880(x_238891, i_238893) {
				var Tmp1;
				var Tmp2;

			var result_238901 = null;

				if ((model_238766.change_point_candidate < i_238893)) {
				Tmp1 = x_238891[0];
				}
				else {
				Tmp1 = 0.0;
				}
				
				if ((model_238766.change_point_candidate < i_238893)) {
				Tmp2 = 1.0000000000000000e+00;
				}
				else {
				Tmp2 = 0.0;
				}
				
				result_238901 = nimCopy(null, [x_238891[0], 1.0000000000000000e+00, Tmp1, Tmp2], NTI238913);

			return result_238901;

		}

	var result_238768 = null;

	BeforeRet: do {
		var t_238776 = (x_238767 != null ? x_238767.length : 0);
		var phi_238778 = nimMin(Math.abs(model_238766.before_residual_model.beta_hat[0]), 9.9999000000000005e-01);
		var covariance_factor_238833 = (estimate_213248(model_238766.before_model.noise_variance) / (1.0000000000000000e+00 - HEX5E_148027(phi_238778, 2.0000000000000000e+00)));
		var x_238927 = data_transform_202278(as_column_vector_155014(HEX5BHEX5D_203119(x_238767, HEX2EHEX2E_57828(1, (x_238767 != null ? (x_238767.length-1) : -1)))), HEX3Aanonymous_238880);
		var covariance_approx_239016 = nimCopy(null, [], NTI239015);
		L1: do {
			var r_239029 = 0;
			var res_239252 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_239252 <= 2)) break L3;
						r_239029 = res_239252;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (covariance_approx_239016 != null) { covariance_approx_239016.push(Tmp4); } else { covariance_approx_239016 = [Tmp4]; };
						L5: do {
							var c_239067 = 0;
							var res_239246 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_239246 <= 2)) break L7;
										c_239067 = res_239246;
										if (covariance_approx_239016[r_239029] != null) { covariance_approx_239016[r_239029].push((covariance_factor_238833 * HEX5E_148027(phi_238778, Math.abs(Math.trunc((c_239067 - r_239029) % t_238776))))); } else { covariance_approx_239016[r_239029] = [(covariance_factor_238833 * HEX5E_148027(phi_238778, Math.abs(Math.trunc((c_239067 - r_239029) % t_238776))))]; };
										res_239246 += 1;
									}
							} while(false);
						} while(false);
						res_239252 += 1;
					}
			} while(false);
		} while(false);
		var inverse_approximation_239078 = inverse_168523(covariance_approx_239016);
		var inverted_matrix_239094 = nimCopy(null, [], NTI239093);
		L8: do {
			var r_239114 = 0;
			var colontmp__239265 = 0;
			colontmp__239265 = ((x_238767 != null ? (x_238767.length-1) : -1) - 1);
			var res_239268 = 0;
			L9: do {
					L10: while (true) {
					if (!(res_239268 <= colontmp__239265)) break L10;
						r_239114 = res_239268;
						var Tmp11 = nimCopy(null, [], NTI148068);
						if (inverted_matrix_239094 != null) { inverted_matrix_239094.push(Tmp11); } else { inverted_matrix_239094 = [Tmp11]; };
						L12: do {
							var c_239159 = 0;
							var colontmp__239258 = 0;
							colontmp__239258 = ((x_238767 != null ? (x_238767.length-1) : -1) - 1);
							var res_239261 = 0;
							L13: do {
									L14: while (true) {
									if (!(res_239261 <= colontmp__239258)) break L14;
										c_239159 = res_239261;
										if (covariance_approx_239016[r_239114] != null) { covariance_approx_239016[r_239114].push(0.0); } else { covariance_approx_239016[r_239114] = [0.0]; };
										if (((r_239114 == c_239159) && ((r_239114 == 0) || (r_239114 == ((x_238767 != null ? (x_238767.length-1) : -1) - 1))))) {
										inverted_matrix_239094[r_239114][c_239159] = inverse_approximation_239078[0][0];
										}
										else {
										if ((r_239114 == c_239159)) {
										inverted_matrix_239094[r_239114][c_239159] = inverse_approximation_239078[1][1];
										}
										else {
										if ((Math.abs((r_239114 - c_239159)) <= 1)) {
										inverted_matrix_239094[r_239114][c_239159] = inverse_approximation_239078[1][0];
										}
										}}
										res_239261 += 1;
									}
							} while(false);
						} while(false);
						res_239268 += 1;
					}
			} while(false);
		} while(false);
		result_238768 = nimCopy(null, inverse_168523(HEX2A_159995(HEX2A_159995(t_166744(x_238927), inverted_matrix_239094), x_238927)), NTI148067);
		break BeforeRet;
		var covariance_239201 = ones_166324((t_238776 - 1), (t_238776 - 1));
		L15: do {
			var r_239221 = 0;
			var colontmp__239281 = 0;
			colontmp__239281 = ((x_238767 != null ? (x_238767.length-1) : -1) - 1);
			var res_239284 = 0;
			L16: do {
					L17: while (true) {
					if (!(res_239284 <= colontmp__239281)) break L17;
						r_239221 = res_239284;
						L18: do {
							var c_239241 = 0;
							var colontmp__239274 = 0;
							colontmp__239274 = ((x_238767 != null ? (x_238767.length-1) : -1) - 1);
							var res_239277 = 0;
							L19: do {
									L20: while (true) {
									if (!(res_239277 <= colontmp__239274)) break L20;
										c_239241 = res_239277;
										covariance_239201[r_239221][c_239241] = (covariance_factor_238833 * HEX5E_148027(phi_238778, Math.abs(Math.trunc((c_239241 - r_239221) % t_238776))));
										res_239277 += 1;
									}
							} while(false);
						} while(false);
						res_239284 += 1;
					}
			} while(false);
		} while(false);
		result_238768 = nimCopy(null, inverse_168523(HEX2A_159995(HEX2A_159995(t_166744(x_238927), inverse_168523(covariance_239201)), x_238927)), NTI148067);
	} while (false);

	return result_238768;

}

function HEX5BHEX5D_156218(a_156220, r_156221, c_156222) {
	var result_156223 = 0.0;

		result_156223 = a_156220[r_156221][c_156222];

	return result_156223;

}

function existence_change_point_wald_test_240014(models_240017) {
	var result_240022 = null;

	BeforeRet: do {
		var m_240030 = (models_240017 != null ? models_240017.length : 0);
		var base_distribution_240031 = {dof: 2.0000000000000000e+00};
		var scores_240048 = nimCopy(null, [], NTI240047);
		L1: do {
			var j_240068 = 0;
			var colontmp__240221 = 0;
			colontmp__240221 = (models_240017 != null ? (models_240017.length-1) : -1);
			var res_240224 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_240224 <= colontmp__240221)) break L3;
						j_240068 = res_240224;
						var cov_240069 = nimCopy(null, models_240017[j_240068].before_model_covariance_parameters, NTI148067);
						var beta_240070 = as_column_vector_155014(models_240017[j_240068].after_model.beta_hat);
						var reduced_cov_240123 = [[HEX5BHEX5D_156218(cov_240069, 2, 2), HEX5BHEX5D_156218(cov_240069, 2, 3)], [HEX5BHEX5D_156218(cov_240069, 3, 2), HEX5BHEX5D_156218(cov_240069, 3, 3)]];
						var score_240124 = HEX2A_159995(HEX2A_159995(t_166744(beta_240070), inverse_168523(reduced_cov_240123)), beta_240070)[0][0];
						var Tmp4 = nimCopy(null, score_240124, NTI124);
						if (scores_240048 != null) { scores_240048.push(Tmp4); } else { scores_240048 = [Tmp4]; };
						res_240224 += 1;
					}
			} while(false);
		} while(false);
		var total_score_240184 = (m_240030 * min_240137(scores_240048));
		var hypothesis_240218 = htest_score_240186({dof: (2.0000000000000000e+00 * m_240030)}, total_score_240184, 2);
		result_240022 = hypothesis_240218;
		break BeforeRet;
	} while (false);

	return result_240022;

}

function rits_model_240692(x_240694, y_240695, candidate_change_point_start_240696, candidate_change_point_end_240697) {
								var Tmp5;
								var Tmp8;

	var result_240698 = null;

		result_240698 = {candidates: null, change_point_candidates: null, loglikelihood_candidates: null, loglikelihood: 0.0, change_point_index: 0, change_point_x: 0.0, model: null, parameters_mean: null};
		if (!(((y_240695 != null ? y_240695.length : 0) == (x_240694 != null ? x_240694.length : 0)))) {
		var e_240727 = null;
		e_240727 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_240727.message = nimCopy(null, makeNimstrLit("x and y must have the same size"), NTI138);
		e_240727.parent = null;
		raiseException(e_240727, "ValueError");
		}
		
		var likely_change_point_240738 = -1;
		result_240698.loglikelihood = -Infinity;
		L1: do {
			var k_240747 = 0;
			var res_240801 = candidate_change_point_start_240696;
			L2: do {
					L3: while (true) {
					if (!(res_240801 <= candidate_change_point_end_240697)) break L3;
						k_240747 = res_240801;
						L4: do {
								if ((k_240747 < 1)) Tmp5 = true; else {									Tmp5 = (((y_240695 != null ? (y_240695.length-1) : -1) - 2) < k_240747);								}							if (Tmp5) {
							break L4;
							}
							
							var candidate_240756 = model_candidate_239301(x_240694, y_240695, k_240747);
							var Tmp6 = nimCopy(null, k_240747, NTI17403);
							if (result_240698.change_point_candidates != null) { result_240698.change_point_candidates.push(Tmp6); } else { result_240698.change_point_candidates = [Tmp6]; };
							var Tmp7 = nimCopy(null, candidate_240756.loglikelihood, NTI124);
							if (result_240698.loglikelihood_candidates != null) { result_240698.loglikelihood_candidates.push(Tmp7); } else { result_240698.loglikelihood_candidates = [Tmp7]; };
								if (!!((classify_29030(candidate_240756.loglikelihood) == 4))) Tmp8 = false; else {									Tmp8 = (result_240698.loglikelihood < candidate_240756.loglikelihood);								}							if (Tmp8) {
							result_240698.loglikelihood = candidate_240756.loglikelihood;
							result_240698.model = candidate_240756;
							likely_change_point_240738 = k_240747;
							}
							
						} while(false);
						res_240801 += 1;
					}
			} while(false);
		} while(false);
		result_240698.parameters_mean = nimCopy(null, result_240698.model.parameters_mean, NTI148064);
		result_240698.model.before_model_covariance_parameters = nimCopy(null, covariance_matrix_for_before_model_238764(result_240698.model, x_240694), NTI148067);
		result_240698.model.existence_change_point_hypothesis = existence_change_point_wald_test_240014([result_240698.model]);
		result_240698.change_point_index = likely_change_point_240738;
		result_240698.change_point_x = x_240694[likely_change_point_240738];

	return result_240698;

}

function nsuRepeatStr(s_140022, n_140023) {
	var result_140024 = null;

		result_140024 = nimCopy(null, mnewString(0), NTI138);
		L1: do {
			var i_140036 = 0;
			var colontmp__140038 = 0;
			colontmp__140038 = n_140023;
			var res_140041 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_140041 <= colontmp__140038)) break L3;
						i_140036 = res_140041;
						if (result_140024 != null) { result_140024 = (result_140024).concat(s_140022); } else { result_140024 = s_140022.slice(); };
						res_140041 += 1;
					}
			} while(false);
		} while(false);

	return result_140024;

}

function parse_saturated_natural_47485(s_47487, b_47489, b_47489_Idx, start_47490) {
			var Tmp1;
					var Tmp4;

	var result_47492 = 0;

		var i_47493 = start_47490;
		if (((i_47493 < (s_47487 != null ? s_47487.length : 0)) && (s_47487[i_47493] == 43))) {
		i_47493 += 1;
		}
		
			if (!(i_47493 < (s_47487 != null ? s_47487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_47487[i_47493]] != undefined);			}		if (Tmp1) {
		b_47489[b_47489_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_47493 < (s_47487 != null ? s_47487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_47487[i_47493]] != undefined);					}				if (!Tmp4) break L3;
					var c_47535 = (s_47487[i_47493] - 48);
					if ((b_47489[b_47489_Idx] <= Math.trunc((2147483647 - c_47535) / 10))) {
					b_47489[b_47489_Idx] = ((b_47489[b_47489_Idx] * 10) + c_47535);
					}
					else {
						b_47489[b_47489_Idx] = 2147483647;
					}
					
					i_47493 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_47493 < (s_47487 != null ? s_47487.length : 0)) && (s_47487[i_47493] == 95))) break L6;
								i_47493 += 1;
							}
					} while(false);
				}
		} while(false);
		result_47492 = (i_47493 - start_47490);
		}
		

	return result_47492;

}

function HEX5BHEX5D_90105(s_90110, x_90113) {
	var result_90114 = null;

		var a_90201 = x_90113.a;
		var l_90401 = ((((s_90110 != null ? s_90110.length : 0) - x_90113.b) - a_90201) + 1);
		result_90114 = nimCopy(null, mnewString(l_90401), NTI138);
		L1: do {
			var i_90411 = 0;
			var i_90423 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_90423 < l_90401)) break L3;
						i_90411 = i_90423;
						result_90114[i_90411] = s_90110[(i_90411 + a_90201)];
						i_90423 += 1;
					}
			} while(false);
		} while(false);

	return result_90114;

}

function HEX2EHEX2E_90053(a_90058, b_90060) {
	var result_90068 = {a: 0, b: 0};

		result_90068.a = a_90058;
		result_90068.b = b_90060;

	return result_90068;

}

function parse_standard_format_specifier_146928(s_146930, start_146931, ignore_unknown_suffix_146933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_146934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_146934.fill = 32;
		result_146934.align = 0;
		result_146934.sign = 45;
		var i_146937 = start_146931;
		if ((((i_146937 + 1) < (s_146930 != null ? s_146930.length : 0)) && (ConstSet2[s_146930[(i_146937 + 1)]] != undefined))) {
		result_146934.fill = s_146930[i_146937];
		result_146934.align = s_146930[(i_146937 + 1)];
		i_146937 += 2;
		}
		else {
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (ConstSet3[s_146930[i_146937]] != undefined))) {
		result_146934.align = s_146930[i_146937];
		i_146937 += 1;
		}
		}
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (ConstSet4[s_146930[i_146937]] != undefined))) {
		result_146934.sign = s_146930[i_146937];
		i_146937 += 1;
		}
		
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 35))) {
		result_146934.alternateForm = true;
		i_146937 += 1;
		}
		
			if (!(((i_146937 + 1) < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_146930[(i_146937 + 1)]] != undefined);			}		if (Tmp1) {
		result_146934.padWithZero = true;
		i_146937 += 1;
		}
		
		var parsed_length_147022 = parse_saturated_natural_47485(s_146930, result_146934, "minimumWidth", i_146937);
		i_146937 += parsed_length_147022;
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 46))) {
		i_146937 += 1;
		var parsed_length_b_147042 = parse_saturated_natural_47485(s_146930, result_146934, "precision", i_146937);
		i_146937 += parsed_length_b_147042;
		}
		else {
			result_146934.precision = -1;
		}
		
			if (!(i_146937 < (s_146930 != null ? s_146930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_146930[i_146937]] != undefined);			}		if (Tmp2) {
		result_146934.typ = s_146930[i_146937];
		i_146937 += 1;
		}
		
		result_146934.endPosition = i_146937;
			if (!!((i_146937 == (s_146930 != null ? s_146930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_146933);			}		if (Tmp3) {
		var e_147120 = null;
		e_147120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_147120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_90105(s_146930, HEX2EHEX2E_90053(i_146937, 1))), NTI138);
		e_147120.parent = null;
		raiseException(e_147120, "ValueError");
		}
		

	return result_146934;

}

function nsuformatBiggestFloat(f_144223, format_144224, precision_144230, decimal_sep_144231) {
	var result_144232 = null;

		var precision_144401 = precision_144230;
		if ((precision_144401 == -1)) {
		precision_144401 = 6;
		}
		
		var res_144403 = null;
		switch (format_144224) {
		case 0:
			res_144403 = f_144223.toString();
			break;
		case 1:
			res_144403 = f_144223.toFixed(precision_144401);
			break;
		case 2:
			res_144403 = f_144223.toExponential(precision_144401);
			break;
		}
		result_144232 = nimCopy(null, cstrToNimstr(res_144403), NTI138);
		if (((1.0000000000000000e+00 / f_144223) == -Infinity)) {
		result_144232 = nimCopy(null, (makeNimstrLit("-")).concat(cstrToNimstr(res_144403)), NTI138);
		}
		
		L1: do {
			var i_144413 = 0;
			var colontmp__144425 = 0;
			colontmp__144425 = (result_144232 != null ? result_144232.length : 0);
			var i_144428 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_144428 < colontmp__144425)) break L3;
						i_144413 = i_144428;
						if ((ConstSet9[result_144232[i_144413]] != undefined)) {
						result_144232[i_144413] = decimal_sep_144231;
						}
						
						i_144428 += 1;
					}
			} while(false);
		} while(false);

	return result_144232;

}

function insert_21601(x_21604, x_21604_Idx, item_21605, i_21606) {
		var xl_21607 = (x_21604[x_21604_Idx] != null ? x_21604[x_21604_Idx].length : 0);
		x_21604[x_21604_Idx].length = (xl_21607 + (item_21605 != null ? item_21605.length : 0));
		var j_21608 = (xl_21607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_21606 <= j_21608)) break L2;
					x_21604[x_21604_Idx][(j_21608 + (item_21605 != null ? item_21605.length : 0))] = x_21604[x_21604_Idx][j_21608];
					j_21608 -= 1;
				}
		} while(false);
		j_21608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_21608 < (item_21605 != null ? item_21605.length : 0))) break L4;
					x_21604[x_21604_Idx][(j_21608 + i_21606)] = item_21605[j_21608];
					j_21608 += 1;
				}
		} while(false);

	
}

function nsuRepeatChar(c_139984, count_139985) {
	var result_139986 = null;

		result_139986 = nimCopy(null, mnewString(count_139985), NTI138);
		L1: do {
			var i_139998 = 0;
			var colontmp__140000 = 0;
			colontmp__140000 = (count_139985 - 1);
			var res_140003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_140003 <= colontmp__140000)) break L3;
						i_139998 = res_140003;
						result_139986[i_139998] = c_139984;
						res_140003 += 1;
					}
			} while(false);
		} while(false);

	return result_139986;

}

function validate_utf8_50955(s_50957) {
	var result_50958 = 0;

	BeforeRet: do {
		var i_50960 = 0;
		var l_50961 = (s_50957 != null ? s_50957.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_50960 < l_50961)) break L2;
					if ((s_50957[i_50960] <= 127)) {
					i_50960 += 1;
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 5) == 6)) {
					if ((s_50957[i_50960] < 194)) {
					result_50958 = i_50960;
					break BeforeRet;
					}
					
					if ((((i_50960 + 1) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2))) {
					i_50960 += 2;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 4) == 14)) {
					if (((((i_50960 + 2) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 2)] >>> 0) >>> 6) == 2))) {
					i_50960 += 3;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 3) == 30)) {
					if ((((((i_50960 + 3) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 2)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 3)] >>> 0) >>> 6) == 2))) {
					i_50960 += 4;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_50958 = -1;
		break BeforeRet;
	} while (false);

	return result_50958;

}

function nucruneLen(s_50507) {
	var result_50508 = 0;

		var i_50510 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_50510 < (s_50507 != null ? s_50507.length : 0))) break L2;
					if ((s_50507[i_50510] <= 127)) {
					i_50510 += 1;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 5) == 6)) {
					i_50510 += 2;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 4) == 14)) {
					i_50510 += 3;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 3) == 30)) {
					i_50510 += 4;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 2) == 62)) {
					i_50510 += 5;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 1) == 126)) {
					i_50510 += 6;
					}
					else {
					i_50510 += 1;
					}
					}}}}}
					result_50508 += 1;
				}
		} while(false);

	return result_50508;

}

function align_string_146827(s_146829, minimum_width_146830, align_146831, fill_146832) {
			var Tmp1;

	var result_146833 = null;

		if ((minimum_width_146830 == 0)) {
		result_146833 = nimCopy(null, s_146829, NTI138);
		}
		else {
			if ((validate_utf8_50955(s_146829) == -1)) {
			Tmp1 = nucruneLen(s_146829);
			}
			else {
			Tmp1 = (s_146829 != null ? s_146829.length : 0);
			}
			
			var s_rune_len_146835 = Tmp1;
			var to_fill_146836 = (minimum_width_146830 - s_rune_len_146835);
			if ((to_fill_146836 <= 0)) {
			result_146833 = nimCopy(null, s_146829, NTI138);
			}
			else {
			if (((align_146831 == 60) || (align_146831 == 0))) {
			result_146833 = nimCopy(null, (s_146829).concat(nsuRepeatChar(fill_146832, to_fill_146836)), NTI138);
			}
			else {
			if ((align_146831 == 94)) {
			var half_146837 = Math.trunc(to_fill_146836 / 2);
			result_146833 = nimCopy(null, (nsuRepeatChar(fill_146832, half_146837)).concat(s_146829,nsuRepeatChar(fill_146832, (to_fill_146836 - half_146837))), NTI138);
			}
			else {
				result_146833 = nimCopy(null, (nsuRepeatChar(fill_146832, to_fill_146836)).concat(s_146829), NTI138);
			}
			}}
		}
		

	return result_146833;

}

function nsuToUpperAsciiChar(c_137319) {
	var result_137320 = 0;

		if ((ConstSet11[c_137319] != undefined)) {
		result_137320 = (c_137319 - 32);
		}
		else {
			result_137320 = c_137319;
		}
		

	return result_137320;

}

function nsuToUpperAsciiStr(s_137367) {
	var result_137368 = null;

		result_137368 = nimCopy(null, mnewString((s_137367 != null ? s_137367.length : 0)), NTI138);
		L1: do {
			var i_137383 = 0;
			var colontmp__137391 = 0;
			colontmp__137391 = ((s_137367 != null ? s_137367.length : 0) - 1);
			var res_137394 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_137394 <= colontmp__137391)) break L3;
						i_137383 = res_137394;
						result_137368[i_137383] = nsuToUpperAsciiChar(s_137367[i_137383]);
						res_137394 += 1;
					}
			} while(false);
		} while(false);

	return result_137368;

}

function format_194002(value_194006, specifier_194008, res_194010, res_194010_Idx) {
		var Tmp1;

		var spec_194011 = parse_standard_format_specifier_146928(specifier_194008, 0, false);
		var fmode_194012 = 0;
		switch (spec_194011.typ) {
		case 101:
		case 69:
			fmode_194012 = 2;
			break;
		case 102:
		case 70:
			fmode_194012 = 1;
			break;
		case 103:
		case 71:
			fmode_194012 = 0;
			break;
		case 0:
			break;
		default: 
			var e_194018 = null;
			e_194018 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_194018.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_194011.typ]), NTI138);
			e_194018.parent = null;
			raiseException(e_194018, "ValueError");
			break;
		}
		var f_194027 = [nsuformatBiggestFloat(value_194006, fmode_194012, spec_194011.precision, 46)];
		var sign_194028 = false;
		if ((0.0 <= value_194006)) {
		if (!((spec_194011.sign == 45))) {
		sign_194028 = true;
		if ((value_194006 == 0.0)) {
		if (((1.0000000000000000e+00 / value_194006) == Infinity)) {
		insert_21601(f_194027, 0, nimCharToStr(spec_194011.sign), 0);
		}
		
		}
		else {
		insert_21601(f_194027, 0, nimCharToStr(spec_194011.sign), 0);
		}
		
		}
		
		}
		else {
			sign_194028 = true;
		}
		
		if (spec_194011.padWithZero) {
		var sign_str_194031 = [];
		if (sign_194028) {
		sign_str_194031 = nimCopy(null, nimCharToStr(f_194027[0][0]), NTI138);
		f_194027[0] = nimCopy(null, HEX5BHEX5D_90105(f_194027[0], HEX2EHEX2E_90053(1, 1)), NTI138);
		}
		
		var to_fill_194086 = ((spec_194011.minimumWidth - (f_194027[0] != null ? f_194027[0].length : 0)) - (sign_194028 ? 1:0));
		if ((0 < to_fill_194086)) {
		f_194027[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_194086)).concat(f_194027[0]), NTI138);
		}
		
		if (sign_194028) {
		f_194027[0] = nimCopy(null, (sign_str_194031).concat(f_194027[0]), NTI138);
		}
		
		}
		
		if ((spec_194011.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_194011.align;
		}
		
		var align_194089 = Tmp1;
		var result_194090 = align_string_146827(f_194027[0], spec_194011.minimumWidth, align_194089, spec_194011.fill);
		if ((ConstSet10[spec_194011.typ] != undefined)) {
		if (res_194010[res_194010_Idx] != null) { res_194010[res_194010_Idx] = (res_194010[res_194010_Idx]).concat(nsuToUpperAsciiStr(result_194090)); } else { res_194010[res_194010_Idx] = nsuToUpperAsciiStr(result_194090).slice(); };
		}
		else {
		if (res_194010[res_194010_Idx] != null) { res_194010[res_194010_Idx] = (res_194010[res_194010_Idx]).concat(result_194090); } else { res_194010[res_194010_Idx] = result_194090.slice(); };
		}
		

	
}

function mean_196874(d_196876) {
		var Tmp1;

	var result_196877 = 0.0;

	BeforeRet: do {
		if ((1 < d_196876.dof)) {
		Tmp1 = 0.0;
		}
		else {
		Tmp1 = NaN;
		}
		
		result_196877 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_196877;

}

function mean_206667(d_206672) {
	var result_206673 = 0.0;

		result_206673 = ((mean_196874(d_206672.distribution) * d_206672.scale) + d_206672.location);

	return result_206673;

}

function estimate_206648(d_206653) {
	var result_206654 = 0.0;

		result_206654 = mean_206667(d_206653.distribution);

	return result_206654;

}

function standard_deviation_207458(sd_207463) {
	var result_207464 = 0.0;

		result_207464 = sd_207463.distribution.scale;

	return result_207464;

}

function betacf_192591(x_192593, a_192594, b_192595) {
	var result_192596 = 0.0;

	BeforeRet: do {
		var qab_192598 = (a_192594 + b_192595);
		var qap_192599 = (a_192594 + 1.0000000000000000e+00);
		var qam_192600 = (a_192594 - 1.0000000000000000e+00);
		var c_192601 = 1.0000000000000000e+00;
		var d_192602 = (1.0000000000000000e+00 - ((qab_192598 * x_192593) / qap_192599));
		var m2_192603 = 0.0;
		var aa_192604 = 0.0;
		var del_192605 = 0.0;
		var h_192606 = [0.0];
		if ((Math.abs(d_192602) < 1.0000000000000001e-30)) {
		d_192602 = 1.0000000000000001e-30;
		}
		
		d_192602 = (1.0000000000000000e+00 / d_192602);
		h_192606[0] = d_192602;
		L1: do {
			var m_192620 = 0;
			var res_192644 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_192644 <= 100)) break L3;
						m_192620 = res_192644;
						m2_192603 = (2.0000000000000000e+00 * m_192620);
						aa_192604 = (((m_192620 * (b_192595 - m_192620)) * x_192593) / ((qam_192600 + m2_192603) * (a_192594 + m2_192603)));
						d_192602 = (1.0000000000000000e+00 + (aa_192604 * d_192602));
						if ((Math.abs(d_192602) < 1.0000000000000001e-30)) {
						d_192602 = 1.0000000000000001e-30;
						}
						
						c_192601 = (1.0000000000000000e+00 + (aa_192604 / c_192601));
						if ((Math.abs(c_192601) < 1.0000000000000001e-30)) {
						c_192601 = 1.0000000000000001e-30;
						}
						
						d_192602 = (1.0000000000000000e+00 / d_192602);
						HEX2AHEX3D_144887(h_192606, 0, (d_192602 * c_192601));
						aa_192604 = (((-((a_192594 + m_192620)) * (qab_192598 + m_192620)) * x_192593) / ((a_192594 + m2_192603) * (qap_192599 + m2_192603)));
						d_192602 = (1.0000000000000000e+00 + (aa_192604 * d_192602));
						if ((Math.abs(d_192602) < 1.0000000000000001e-30)) {
						d_192602 = 1.0000000000000001e-30;
						}
						
						c_192601 = (1.0000000000000000e+00 + (aa_192604 / c_192601));
						if ((Math.abs(c_192601) < 1.0000000000000001e-30)) {
						c_192601 = 1.0000000000000001e-30;
						}
						
						d_192602 = (1.0000000000000000e+00 / d_192602);
						del_192605 = (d_192602 * c_192601);
						HEX2AHEX3D_144887(h_192606, 0, del_192605);
						if ((Math.abs((del_192605 - 1.0000000000000000e+00)) < 2.9999999999999999e-07)) {
						break L1;
						}
						
						res_192644 += 1;
					}
			} while(false);
		} while(false);
		result_192596 = h_192606[0];
		break BeforeRet;
	} while (false);

	return result_192596;

}

function ibeta_192860(x_192862, a_192863, b_192864) {
		var Tmp1;
			var Tmp2;

	var result_192865 = 0.0;

	BeforeRet: do {
		if (((x_192862 == 0.0) || (x_192862 == 1.0000000000000000e+00))) {
		Tmp1 = 0.0;
		}
		else {
		Tmp1 = Math.exp(((((gammaln_192081((a_192863 + b_192864)) - gammaln_192081(a_192863)) - gammaln_192081(b_192864)) + (a_192863 * Math.log(x_192862))) + (b_192864 * Math.log((1.0000000000000000e+00 - x_192862)))));
		}
		
		var bt_192866 = Tmp1;
			if ((x_192862 < 0.0)) Tmp2 = true; else {				Tmp2 = (1.0000000000000000e+00 < x_192862);			}		if (Tmp2) {
		result_192865 = NaN;
		break BeforeRet;
		}
		
		if ((x_192862 < ((a_192863 + 1.0000000000000000e+00) / ((a_192863 + b_192864) + 2.0000000000000000e+00)))) {
		result_192865 = ((bt_192866 * betacf_192591(x_192862, a_192863, b_192864)) / a_192863);
		break BeforeRet;
		}
		
		result_192865 = (1.0000000000000000e+00 - ((bt_192866 * betacf_192591((1.0000000000000000e+00 - x_192862), b_192864, a_192863)) / b_192864));
		break BeforeRet;
	} while (false);

	return result_192865;

}

function ibetainv_192880(p_192882, a_192883, b_192884) {
			var Tmp1;
		var Tmp2;
							var Tmp6;

	var result_192885 = 0.0;

	BeforeRet: do {
		var a1_192887 = (a_192883 - 1.0000000000000000e+00);
		var b1_192888 = (b_192884 - 1.0000000000000000e+00);
		var lna_192889 = 0.0;
		var lnb_192890 = 0.0;
		var pp_192891 = 0.0;
		var t_192892 = 0.0;
		var u_192893 = 0.0;
		var err_192894 = 0.0;
		var x_192895 = [0.0];
		var al_192896 = 0.0;
		var h_192897 = 0.0;
		var w_192898 = 0.0;
		var afac_192899 = 0.0;
		if ((p_192882 <= 0.0)) {
		result_192885 = 0.0;
		break BeforeRet;
		}
		
		if ((1.0000000000000000e+00 <= p_192882)) {
		result_192885 = 1.0000000000000000e+01;
		break BeforeRet;
		}
		
			if (!(1.0000000000000000e+00 <= a_192883)) Tmp1 = false; else {				Tmp1 = (1.0000000000000000e+00 <= b_192884);			}		if (Tmp1) {
		if ((p_192882 < 5.0000000000000000e-01)) {
		Tmp2 = p_192882;
		}
		else {
		Tmp2 = (1.0000000000000000e+00 - p_192882);
		}
		
		pp_192891 = Tmp2;
		t_192892 = Math.sqrt((-2.0000000000000000e+00 * Math.log(pp_192891)));
		x_192895[0] = (((2.3075299999999999e+00 + (t_192892 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_192892 * (9.9229000000000001e-01 + (t_192892 * 4.4810000000000003e-02))))) - t_192892);
		if ((p_192882 < 5.0000000000000000e-01)) {
		x_192895[0] = -(x_192895[0]);
		}
		
		al_192896 = (((x_192895[0] * x_192895[0]) - 3.0000000000000000e+00) / 6.0000000000000000e+00);
		h_192897 = (2.0000000000000000e+00 / ((1.0000000000000000e+00 / ((2.0000000000000000e+00 * a_192883) - 1.0000000000000000e+00)) + (1.0000000000000000e+00 / ((2.0000000000000000e+00 * b_192884) - 1.0000000000000000e+00))));
		w_192898 = (((x_192895[0] * Math.sqrt((al_192896 + h_192897))) / h_192897) - (((1.0000000000000000e+00 / ((2.0000000000000000e+00 * b_192884) - 1.0000000000000000e+00)) - (1.0000000000000000e+00 / ((2.0000000000000000e+00 * a_192883) - 1.0000000000000000e+00))) * ((al_192896 + 8.3333333333333337e-01) - (2.0000000000000000e+00 / (3.0000000000000000e+00 * h_192897)))));
		x_192895[0] = (a_192883 / (a_192883 + (b_192884 * Math.exp((2.0000000000000000e+00 * w_192898)))));
		}
		else {
			lna_192889 = Math.log((a_192883 / (a_192883 + b_192884)));
			lnb_192890 = Math.log((b_192884 / (a_192883 + b_192884)));
			t_192892 = (Math.exp((a_192883 * lna_192889)) / a_192883);
			u_192893 = (Math.exp((b_192884 * lnb_192890)) / b_192884);
			w_192898 = (t_192892 + u_192893);
			if ((p_192882 < (t_192892 / w_192898))) {
			x_192895[0] = Math.pow(((a_192883 * w_192898) * p_192882), (1.0000000000000000e+00 / a_192883));
			}
			else {
				x_192895[0] = (1.0000000000000000e+00 - Math.pow(((b_192884 * w_192898) * (1.0000000000000000e+00 - p_192882)), (1.0000000000000000e+00 / b_192884)));
			}
			
		}
		
		afac_192899 = ((-(gammaln_192081(a_192883)) - gammaln_192081(b_192884)) + gammaln_192081((a_192883 + b_192884)));
		L3: do {
			var j_192916 = 0;
			var res_192932 = 0;
			L4: do {
					L5: while (true) {
					if (!(res_192932 <= 9)) break L5;
						j_192916 = res_192932;
						if (((x_192895[0] == 0.0) || (x_192895[0] == 1.0000000000000000e+00))) {
						result_192885 = x_192895[0];
						break BeforeRet;
						}
						
						err_192894 = (ibeta_192860(x_192895[0], a_192883, b_192884) - p_192882);
						t_192892 = Math.exp((((a1_192887 * Math.log(x_192895[0])) + (b1_192888 * Math.log((1.0000000000000000e+00 - x_192895[0])))) + afac_192899));
						u_192893 = (err_192894 / t_192892);
						t_192892 = (u_192893 / (1.0000000000000000e+00 - (5.0000000000000000e-01 * nimMin(1.0000000000000000e+00, (u_192893 * ((a1_192887 / x_192895[0]) - (b1_192888 / (1.0000000000000000e+00 - x_192895[0]))))))));
						HEX2DHEX3D_168380(x_192895, 0, t_192892);
						if ((x_192895[0] <= 0.0)) {
						x_192895[0] = (5.0000000000000000e-01 * (x_192895[0] + t_192892));
						}
						
						if ((1.0000000000000000e+00 <= x_192895[0])) {
						x_192895[0] = (5.0000000000000000e-01 * ((x_192895[0] + t_192892) + 1.0000000000000000e+00));
						}
						
							if (!(Math.abs(t_192892) < (1.0000000000000000e-08 * x_192895[0]))) Tmp6 = false; else {								Tmp6 = (0 < j_192916);							}						if (Tmp6) {
						break L3;
						}
						
						res_192932 += 1;
					}
			} while(false);
		} while(false);
		result_192885 = x_192895[0];
		break BeforeRet;
	} while (false);

	return result_192885;

}

function inv_196855(d_196857, p_196858) {
		var Tmp1;

	var result_196859 = 0.0;

	BeforeRet: do {
		var x_196860 = ibetainv_192880((2.0000000000000000e+00 * nimMin(p_196858, (1.0000000000000000e+00 - p_196858))), (5.0000000000000000e-01 * d_196857.dof), 5.0000000000000000e-01);
		x_196860 = Math.sqrt(((d_196857.dof * (1.0000000000000000e+00 - x_196860)) / x_196860));
		if ((5.0000000000000000e-01 < p_196858)) {
		Tmp1 = x_196860;
		}
		else {
		Tmp1 = -(x_196860);
		}
		
		result_196859 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_196859;

}

function inv_208470(d_208475, p_208477) {
	var result_208478 = 0.0;

		result_208478 = ((inv_196855(d_208475.distribution, p_208477) * d_208475.scale) + d_208475.location);

	return result_208478;

}

function confidence_interval_208448(sd_208453, alpha_208455) {
	var result_208456 = null;

		result_208456 = nimCopy(null, [inv_208470(sd_208453.distribution, (5.0000000000000000e-01 * alpha_208455)), inv_208470(sd_208453.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_208455)))], NTI202502);

	return result_208456;

}

function test_score_210241(d_210246) {
	var result_210247 = 0.0;

		result_210247 = (d_210246.distribution.location / d_210246.distribution.scale);

	return result_210247;

}

function cdf_196836(d_196838, x_196839) {
	var result_196840 = 0.0;

	BeforeRet: do {
		var dof2_196841 = (d_196838.dof * 5.0000000000000000e-01);
		result_196840 = ibeta_192860(((x_196839 + Math.sqrt(((x_196839 * x_196839) + d_196838.dof))) / (2.0000000000000000e+00 * Math.sqrt(((x_196839 * x_196839) + d_196838.dof)))), dof2_196841, dof2_196841);
		break BeforeRet;
	} while (false);

	return result_196840;

}

function cdf_211738(d_211743, x_211745) {
	var result_211746 = 0.0;

		result_211746 = cdf_196836(d_211743.distribution, ((x_211745 - d_211743.location) / d_211743.scale));

	return result_211746;

}

function p_value_211710(sd_211715) {
		var Tmp1;
			var Tmp2;

	var result_211716 = 0.0;

	BeforeRet: do {
		if ((sd_211715.test_type == 0)) {
		result_211716 = ((1.0000000000000000e+00 - cdf_211738(sd_211715.distribution, Math.abs(sd_211715.test_score))) + cdf_211738(sd_211715.distribution, -(Math.abs(sd_211715.test_score))));
		break BeforeRet;
		}
		
		if ((sd_211715.test_type == 3)) {
		result_211716 = cdf_211738(sd_211715.distribution, sd_211715.test_score);
		break BeforeRet;
		}
		
		if ((sd_211715.test_type == 2)) {
		result_211716 = (1.0000000000000000e+00 - cdf_211738(sd_211715.distribution, sd_211715.test_score));
		break BeforeRet;
		}
		
		var p1_211861 = (1.0000000000000000e+00 - cdf_211738(sd_211715.distribution, sd_211715.test_score));
		var p2_211882 = cdf_211738(sd_211715.distribution, sd_211715.test_score);
			if (!(p1_211861 < p2_211882)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_211861);			}		if (Tmp2) {
		Tmp1 = p1_211861;
		}
		else {
		Tmp1 = p2_211882;
		}
		
		result_211716 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_211716;

}

function p_value_211652(d_211657) {
	var result_211658 = 0.0;

		result_211658 = p_value_211710(d_211657.hypothesis_test);

	return result_211658;

}

function estimate_as_string_205789(estimator_205794, title_205796, name_205798) {
	var result_205799 = null;

		if (title_205796) {
		var fmt_res_205803 = mnewString(0);
		if (fmt_res_205803 != null) { fmt_res_205803 = (fmt_res_205803).concat(makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A")); } else { fmt_res_205803 = makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A"); };
		if (result_205799 != null) { result_205799 = (result_205799).concat((nsuRepeatStr(makeNimstrLit(" "), ((name_205798 != null ? name_205798.length : 0) + 1))).concat(fmt_res_205803)); } else { result_205799 = (nsuRepeatStr(makeNimstrLit(" "), ((name_205798 != null ? name_205798.length : 0) + 1))).concat(fmt_res_205803).slice(); };
		}
		
		var fmt_res_205807 = [mnewString(0)];
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit(" ")); } else { fmt_res_205807[0] = makeNimstrLit(" "); };
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(name_205798); } else { fmt_res_205807[0] = name_205798.slice(); };
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit("|")); } else { fmt_res_205807[0] = makeNimstrLit("|"); };
		format_194002(estimate_206648(estimator_205794), makeNimstrLit(">9.5f"), fmt_res_205807, 0);
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit("| ")); } else { fmt_res_205807[0] = makeNimstrLit("| "); };
		format_194002(standard_deviation_207458(estimator_205794), makeNimstrLit(">9.5f"), fmt_res_205807, 0);
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit("| ")); } else { fmt_res_205807[0] = makeNimstrLit("| "); };
		format_194002(confidence_interval_208448(estimator_205794, 5.0000000000000003e-02)[0], makeNimstrLit(">9.5f"), fmt_res_205807, 0);
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit(" ")); } else { fmt_res_205807[0] = makeNimstrLit(" "); };
		format_194002(confidence_interval_208448(estimator_205794, 5.0000000000000003e-02)[1], makeNimstrLit(">9.5f"), fmt_res_205807, 0);
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit("| ")); } else { fmt_res_205807[0] = makeNimstrLit("| "); };
		format_194002(test_score_210241(estimator_205794), makeNimstrLit(">9.5f"), fmt_res_205807, 0);
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit("| ")); } else { fmt_res_205807[0] = makeNimstrLit("| "); };
		format_194002(p_value_211652(estimator_205794), makeNimstrLit(">9.5e"), fmt_res_205807, 0);
		if (fmt_res_205807[0] != null) { fmt_res_205807[0] = (fmt_res_205807[0]).concat(makeNimstrLit("|")); } else { fmt_res_205807[0] = makeNimstrLit("|"); };
		if (result_205799 != null) { result_205799 = (result_205799).concat(fmt_res_205807[0]); } else { result_205799 = fmt_res_205807[0].slice(); };

	return result_205799;

}

function standard_deviation_214058(sd_214063) {
	var result_214064 = 0.0;

		result_214064 = sd_214063.distribution.scale;

	return result_214064;

}

function inv_199662(d_199664, p_199665) {
	var result_199666 = 0.0;

	BeforeRet: do {
		result_199666 = (d_199664.scale / gammapinv_192662((1.0000000000000000e+00 - p_199665), d_199664.shape));
		break BeforeRet;
	} while (false);

	return result_199666;

}

function inv_200679(d_200681, p_200682) {
	var result_200683 = 0.0;

		result_200683 = inv_199662(as_inv_gamma_200625(d_200681), p_200682);

	return result_200683;

}

function inv_215070(d_215075, p_215077) {
	var result_215078 = 0.0;

		result_215078 = ((inv_200679(d_215075.distribution, p_215077) * d_215075.scale) + d_215075.location);

	return result_215078;

}

function confidence_interval_215048(sd_215053, alpha_215055) {
	var result_215056 = null;

		result_215056 = nimCopy(null, [inv_215070(sd_215053.distribution, (5.0000000000000000e-01 * alpha_215055)), inv_215070(sd_215053.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_215055)))], NTI202502);

	return result_215056;

}

function test_score_216841(d_216846) {
	var result_216847 = 0.0;

		result_216847 = (d_216846.distribution.location / d_216846.distribution.scale);

	return result_216847;

}

function cdf_199643(d_199645, x_199646) {
	var result_199647 = 0.0;

	BeforeRet: do {
		if ((x_199646 < 0.0)) {
		result_199647 = 0.0;
		break BeforeRet;
		}
		
		result_199647 = (1.0000000000000000e+00 - low_reg_gamma_192313(d_199645.shape, (d_199645.scale / x_199646)));
		break BeforeRet;
	} while (false);

	return result_199647;

}

function cdf_200661(d_200663, x_200664) {
	var result_200665 = 0.0;

		result_200665 = cdf_199643(as_inv_gamma_200625(d_200663), x_200664);

	return result_200665;

}

function cdf_218338(d_218343, x_218345) {
	var result_218346 = 0.0;

		result_218346 = cdf_200661(d_218343.distribution, ((x_218345 - d_218343.location) / d_218343.scale));

	return result_218346;

}

function p_value_218310(sd_218315) {
		var Tmp1;
			var Tmp2;

	var result_218316 = 0.0;

	BeforeRet: do {
		if ((sd_218315.test_type == 0)) {
		result_218316 = ((1.0000000000000000e+00 - cdf_218338(sd_218315.distribution, Math.abs(sd_218315.test_score))) + cdf_218338(sd_218315.distribution, -(Math.abs(sd_218315.test_score))));
		break BeforeRet;
		}
		
		if ((sd_218315.test_type == 3)) {
		result_218316 = cdf_218338(sd_218315.distribution, sd_218315.test_score);
		break BeforeRet;
		}
		
		if ((sd_218315.test_type == 2)) {
		result_218316 = (1.0000000000000000e+00 - cdf_218338(sd_218315.distribution, sd_218315.test_score));
		break BeforeRet;
		}
		
		var p1_218461 = (1.0000000000000000e+00 - cdf_218338(sd_218315.distribution, sd_218315.test_score));
		var p2_218482 = cdf_218338(sd_218315.distribution, sd_218315.test_score);
			if (!(p1_218461 < p2_218482)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_218461);			}		if (Tmp2) {
		Tmp1 = p1_218461;
		}
		else {
		Tmp1 = p2_218482;
		}
		
		result_218316 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_218316;

}

function p_value_218252(d_218257) {
	var result_218258 = 0.0;

		result_218258 = p_value_218310(d_218257.hypothesis_test);

	return result_218258;

}

function estimate_as_string_229558(estimator_229563, title_229565, name_229567) {
	var result_229568 = null;

		if (title_229565) {
		var fmt_res_229572 = mnewString(0);
		if (fmt_res_229572 != null) { fmt_res_229572 = (fmt_res_229572).concat(makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A")); } else { fmt_res_229572 = makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A"); };
		if (result_229568 != null) { result_229568 = (result_229568).concat((nsuRepeatStr(makeNimstrLit(" "), ((name_229567 != null ? name_229567.length : 0) + 1))).concat(fmt_res_229572)); } else { result_229568 = (nsuRepeatStr(makeNimstrLit(" "), ((name_229567 != null ? name_229567.length : 0) + 1))).concat(fmt_res_229572).slice(); };
		}
		
		var fmt_res_229576 = [mnewString(0)];
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit(" ")); } else { fmt_res_229576[0] = makeNimstrLit(" "); };
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(name_229567); } else { fmt_res_229576[0] = name_229567.slice(); };
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit("|")); } else { fmt_res_229576[0] = makeNimstrLit("|"); };
		format_194002(estimate_213248(estimator_229563), makeNimstrLit(">9.5f"), fmt_res_229576, 0);
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit("| ")); } else { fmt_res_229576[0] = makeNimstrLit("| "); };
		format_194002(standard_deviation_214058(estimator_229563), makeNimstrLit(">9.5f"), fmt_res_229576, 0);
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit("| ")); } else { fmt_res_229576[0] = makeNimstrLit("| "); };
		format_194002(confidence_interval_215048(estimator_229563, 5.0000000000000003e-02)[0], makeNimstrLit(">9.5f"), fmt_res_229576, 0);
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit(" ")); } else { fmt_res_229576[0] = makeNimstrLit(" "); };
		format_194002(confidence_interval_215048(estimator_229563, 5.0000000000000003e-02)[1], makeNimstrLit(">9.5f"), fmt_res_229576, 0);
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit("| ")); } else { fmt_res_229576[0] = makeNimstrLit("| "); };
		format_194002(test_score_216841(estimator_229563), makeNimstrLit(">9.5f"), fmt_res_229576, 0);
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit("| ")); } else { fmt_res_229576[0] = makeNimstrLit("| "); };
		format_194002(p_value_218252(estimator_229563), makeNimstrLit(">9.5e"), fmt_res_229576, 0);
		if (fmt_res_229576[0] != null) { fmt_res_229576[0] = (fmt_res_229576[0]).concat(makeNimstrLit("|")); } else { fmt_res_229576[0] = makeNimstrLit("|"); };
		if (result_229568 != null) { result_229568 = (result_229568).concat(fmt_res_229576[0]); } else { result_229568 = fmt_res_229576[0].slice(); };

	return result_229568;

}

function mk_digit_146621(v_146623, typ_146624) {
			var Tmp1;

	var result_146625 = null;

		if ((v_146623 < 10)) {
		result_146625 = nimCopy(null, nimCharToStr((48 + v_146623)), NTI138);
		}
		else {
			if ((typ_146624 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_146625 = nimCopy(null, nimCharToStr(((Tmp1 + v_146623) - 10)), NTI138);
		}
		

	return result_146625;

}

function format_int_235229(n_235233, radix_235235, spec_235237) {
		var Tmp7;

	var result_235238 = null;

		var v_235401 = n_235233;
		var negative_235402 = (v_235401 < 0);
		if (negative_235402) {
		v_235401 = (v_235401 * -1);
		}
		
		var xx_235404 = [];
		if (spec_235237.alternateForm) {
		switch (spec_235237.typ) {
		case 88:
			xx_235404 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			xx_235404 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			xx_235404 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			xx_235404 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_235401 == 0)) {
		result_235238 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			result_235238 = nimCopy(null, [], NTI138);
			L1: do {
					L2: while (true) {
					if (!(0 < v_235401)) break L2;
						var d_235407 = Math.trunc(v_235401 % radix_235235);
						v_235401 = Math.trunc(v_235401 / radix_235235);
						if (result_235238 != null) { result_235238 = (result_235238).concat(mk_digit_146621(d_235407, spec_235237.typ)); } else { result_235238 = mk_digit_146621(d_235407, spec_235237.typ).slice(); };
					}
			} while(false);
			L3: do {
				var idx_235418 = 0;
				var colontmp__235464 = 0;
				colontmp__235464 = Math.trunc((result_235238 != null ? result_235238.length : 0) / 2);
				var i_235467 = 0;
				L4: do {
						L5: while (true) {
						if (!(i_235467 < colontmp__235464)) break L5;
							idx_235418 = i_235467;
							var Tmp6 = result_235238[idx_235418]; result_235238[idx_235418] = result_235238[(((result_235238 != null ? result_235238.length : 0) - idx_235418) - 1)]; result_235238[(((result_235238 != null ? result_235238.length : 0) - idx_235418) - 1)] = Tmp6;							i_235467 += 1;
						}
				} while(false);
			} while(false);
		}
		
		if (spec_235237.padWithZero) {
		if (negative_235402) Tmp7 = true; else {			Tmp7 = !((spec_235237.sign == 45));		}		var sign_235437 = Tmp7;
		var to_fill_235444 = (((spec_235237.minimumWidth - (result_235238 != null ? result_235238.length : 0)) - (xx_235404 != null ? xx_235404.length : 0)) - (sign_235437 ? 1:0));
		if ((0 < to_fill_235444)) {
		result_235238 = nimCopy(null, (nsuRepeatChar(48, to_fill_235444)).concat(result_235238), NTI138);
		}
		
		}
		
		if (negative_235402) {
		result_235238 = nimCopy(null, (makeNimstrLit("-")).concat(xx_235404,result_235238), NTI138);
		}
		else {
		if (!((spec_235237.sign == 45))) {
		result_235238 = nimCopy(null, [spec_235237.sign].concat(xx_235404,result_235238), NTI138);
		}
		else {
			result_235238 = nimCopy(null, (xx_235404).concat(result_235238), NTI138);
		}
		}
		if ((spec_235237.align == 60)) {
		L8: do {
			var i_235455 = 0;
			var colontmp__235470 = 0;
			var colontmp__235471 = 0;
			colontmp__235470 = (result_235238 != null ? result_235238.length : 0);
			colontmp__235471 = spec_235237.minimumWidth;
			var i_235474 = colontmp__235470;
			L9: do {
					L10: while (true) {
					if (!(i_235474 < colontmp__235471)) break L10;
						i_235455 = i_235474;
						if (result_235238 != null) { addChar(result_235238, spec_235237.fill); } else { result_235238 = [spec_235237.fill]; };
						i_235474 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			var to_fill_235456 = (spec_235237.minimumWidth - (result_235238 != null ? result_235238.length : 0));
			if ((spec_235237.align == 94)) {
			var half_235457 = Math.trunc(to_fill_235456 / 2);
			result_235238 = nimCopy(null, (nsuRepeatChar(spec_235237.fill, half_235457)).concat(result_235238,nsuRepeatChar(spec_235237.fill, (to_fill_235456 - half_235457))), NTI138);
			}
			else {
				if ((0 < to_fill_235456)) {
				result_235238 = nimCopy(null, (nsuRepeatChar(spec_235237.fill, to_fill_235456)).concat(result_235238), NTI138);
				}
				
			}
			
		}
		

	return result_235238;

}

function format_235202(value_235206, specifier_235208, res_235210, res_235210_Idx) {
		var spec_235211 = parse_standard_format_specifier_146928(specifier_235208, 0, false);
		var radix_235213 = 10;
		switch (spec_235211.typ) {
		case 120:
		case 88:
			radix_235213 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			radix_235213 = 2;
			break;
		case 111:
			radix_235213 = 8;
			break;
		default: 
			var e_235219 = null;
			e_235219 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_235219.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ")).concat([spec_235211.typ]), NTI138);
			e_235219.parent = null;
			raiseException(e_235219, "ValueError");
			break;
		}
		if (res_235210[res_235210_Idx] != null) { res_235210[res_235210_Idx] = (res_235210[res_235210_Idx]).concat(format_int_235229(value_235206, radix_235213, spec_235211)); } else { res_235210[res_235210_Idx] = format_int_235229(value_235206, radix_235213, spec_235211).slice(); };

	
}

function nsuFindChar(s_141416, sub_141417, start_141418, last_141419) {
		var Tmp1;

	var result_141421 = 0;

	BeforeRet: do {
		if ((last_141419 == 0)) {
		Tmp1 = (s_141416 != null ? (s_141416.length-1) : -1);
		}
		else {
		Tmp1 = last_141419;
		}
		
		var last_141423 = Tmp1;
		L2: do {
			var i_141809 = 0;
			var colontmp__142013 = 0;
			colontmp__142013 = start_141418;
			var res_142016 = colontmp__142013;
			L3: do {
					L4: while (true) {
					if (!(res_142016 <= last_141423)) break L4;
						i_141809 = res_142016;
						if ((sub_141417 == s_141416[i_141809])) {
						result_141421 = i_141809;
						break BeforeRet;
						}
						
						res_142016 += 1;
					}
			} while(false);
		} while(false);
		result_141421 = -1;
		break BeforeRet;
	} while (false);

	return result_141421;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

		var first_23428 = nimMax(first_23425, 0);
		var l_23430 = nimMax(((nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)) - first_23428) + 1), 0);
		result_23427 = nimCopy(null, mnewString(l_23430), NTI138);
		L1: do {
			var i_23442 = 0;
			var colontmp__23444 = 0;
			colontmp__23444 = (l_23430 - 1);
			var res_23447 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						i_23442 = res_23447;
						result_23427[i_23442] = s_23424[(i_23442 + first_23428)];
						res_23447 += 1;
					}
			} while(false);
		} while(false);

	return result_23427;

}

function substr_23464(s_23466, first_23467) {
	var result_23469 = null;

		result_23469 = nimCopy(null, substr_23422(s_23466, first_23467, (s_23466 != null ? (s_23466.length-1) : -1)), NTI138);

	return result_23469;

}

function nsuInitSkipTable(a_141262, sub_141263) {
		var m_141264 = (sub_141263 != null ? sub_141263.length : 0);
		var i_141266 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_141266 <= 248)) break L2;
					a_141262[(i_141266 + 0)] = m_141264;
					a_141262[(i_141266 + 1)] = m_141264;
					a_141262[(i_141266 + 2)] = m_141264;
					a_141262[(i_141266 + 3)] = m_141264;
					a_141262[(i_141266 + 4)] = m_141264;
					a_141262[(i_141266 + 5)] = m_141264;
					a_141262[(i_141266 + 6)] = m_141264;
					a_141262[(i_141266 + 7)] = m_141264;
					i_141266 += 8;
				}
		} while(false);
		L3: do {
			var i_141288 = 0;
			var colontmp__141291 = 0;
			colontmp__141291 = (m_141264 - 1);
			var i_141294 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_141294 < colontmp__141291)) break L5;
						i_141288 = i_141294;
						a_141262[sub_141263[i_141288]] = ((m_141264 - 1) - i_141288);
						i_141294 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_141311, s_141312, sub_141313, start_141314, last_141315) {
		var Tmp1;

	var result_141317 = 0;

	BeforeRet: do {
		if ((last_141315 == 0)) {
		Tmp1 = (s_141312 != null ? (s_141312.length-1) : -1);
		}
		else {
		Tmp1 = last_141315;
		}
		
		var last_141319 = Tmp1;
		var s_len_141320 = ((last_141319 - start_141314) + 1);
		var sub_last_141321 = ((sub_141313 != null ? sub_141313.length : 0) - 1);
		if ((sub_last_141321 == -1)) {
		result_141317 = start_141314;
		break BeforeRet;
		}
		
		var skip_141323 = start_141314;
		L2: do {
				L3: while (true) {
				if (!(sub_last_141321 <= (last_141319 - skip_141323))) break L3;
					var i_141324 = sub_last_141321;
					L4: do {
							L5: while (true) {
							if (!(s_141312[(skip_141323 + i_141324)] == sub_141313[i_141324])) break L5;
								if ((i_141324 == 0)) {
								result_141317 = skip_141323;
								break BeforeRet;
								}
								
								i_141324 -= 1;
							}
					} while(false);
					skip_141323 += a_141311[s_141312[(skip_141323 + sub_last_141321)]];
				}
		} while(false);
		result_141317 = -1;
		break BeforeRet;
	} while (false);

	return result_141317;

}

function nsuReplaceStr(s_142719, sub_142720, by_142721) {
	var result_142722 = null;

		result_142722 = nimCopy(null, [], NTI138);
		var sub_len_142723 = (sub_142720 != null ? sub_142720.length : 0);
		if ((sub_len_142723 == 0)) {
		result_142722 = nimCopy(null, s_142719, NTI138);
		}
		else {
		if ((sub_len_142723 == 1)) {
		var c_142724 = sub_142720[0];
		var last_142726 = (s_142719 != null ? (s_142719.length-1) : -1);
		var i_142728 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var j_142729 = nsuFindChar(s_142719, c_142724, i_142728, last_142726);
					if ((j_142729 < 0)) {
					break L1;
					}
					
					if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23422(s_142719, i_142728, (j_142729 - 1))); } else { result_142722 = substr_23422(s_142719, i_142728, (j_142729 - 1)).slice(); };
					if (result_142722 != null) { result_142722 = (result_142722).concat(by_142721); } else { result_142722 = by_142721.slice(); };
					i_142728 = (j_142729 + sub_len_142723);
				}
		} while(false);
		if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23464(s_142719, i_142728)); } else { result_142722 = substr_23464(s_142719, i_142728).slice(); };
		}
		else {
			var a_142730 = [new Int32Array(256)];
			nsuInitSkipTable(a_142730[0], sub_142720);
			var last_142733 = (s_142719 != null ? (s_142719.length-1) : -1);
			var i_142735 = 0;
			L3: do {
					L4: while (true) {
					if (!true) break L4;
						var j_142736 = nsuFindStrA(a_142730[0], s_142719, sub_142720, i_142735, last_142733);
						if ((j_142736 < 0)) {
						break L3;
						}
						
						if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23422(s_142719, i_142735, (j_142736 - 1))); } else { result_142722 = substr_23422(s_142719, i_142735, (j_142736 - 1)).slice(); };
						if (result_142722 != null) { result_142722 = (result_142722).concat(by_142721); } else { result_142722 = by_142721.slice(); };
						i_142735 = (j_142736 + sub_len_142723);
					}
			} while(false);
			if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23464(s_142719, i_142735)); } else { result_142722 = substr_23464(s_142719, i_142735).slice(); };
		}
		}

	return result_142722;

}

function HEX24_235802(d_235806) {
	var result_235807 = null;

		var fmt_res_235811 = mnewString(0);
		if (fmt_res_235811 != null) { fmt_res_235811 = (fmt_res_235811).concat(makeNimstrLit("[Hypothesis test]\x0A* Null distribution: ")); } else { fmt_res_235811 = makeNimstrLit("[Hypothesis test]\x0A* Null distribution: "); };
		if (fmt_res_235811 != null) { fmt_res_235811 = (fmt_res_235811).concat(HEX24_198078(d_235806.distribution)); } else { fmt_res_235811 = HEX24_198078(d_235806.distribution).slice(); };
		if (fmt_res_235811 != null) { fmt_res_235811 = (fmt_res_235811).concat(makeNimstrLit(" \x0A")); } else { fmt_res_235811 = makeNimstrLit(" \x0A"); };
		if (result_235807 != null) { result_235807 = (result_235807).concat(fmt_res_235811); } else { result_235807 = fmt_res_235811.slice(); };
		var fmt_res_236003 = mnewString(0);
		if (fmt_res_236003 != null) { fmt_res_236003 = (fmt_res_236003).concat(makeNimstrLit("      Null C.I. 95%| Test value|    p-value| \x0A")); } else { fmt_res_236003 = makeNimstrLit("      Null C.I. 95%| Test value|    p-value| \x0A"); };
		if (result_235807 != null) { result_235807 = (result_235807).concat(fmt_res_236003); } else { result_235807 = fmt_res_236003.slice(); };
		var fmt_res_236007 = [mnewString(0)];
		format_194002(null_confidence_interval_236213(d_235806, 5.0000000000000003e-02)[0], makeNimstrLit(">9.5f"), fmt_res_236007, 0);
		if (fmt_res_236007[0] != null) { fmt_res_236007[0] = (fmt_res_236007[0]).concat(makeNimstrLit(" ")); } else { fmt_res_236007[0] = makeNimstrLit(" "); };
		format_194002(null_confidence_interval_236213(d_235806, 5.0000000000000003e-02)[1], makeNimstrLit(">9.5f"), fmt_res_236007, 0);
		if (fmt_res_236007[0] != null) { fmt_res_236007[0] = (fmt_res_236007[0]).concat(makeNimstrLit("|  ")); } else { fmt_res_236007[0] = makeNimstrLit("|  "); };
		format_194002(d_235806.test_score, makeNimstrLit(">9.5f"), fmt_res_236007, 0);
		if (fmt_res_236007[0] != null) { fmt_res_236007[0] = (fmt_res_236007[0]).concat(makeNimstrLit("| ")); } else { fmt_res_236007[0] = makeNimstrLit("| "); };
		format_194002(p_value_238652(d_235806), makeNimstrLit(">9.5e"), fmt_res_236007, 0);
		if (fmt_res_236007[0] != null) { fmt_res_236007[0] = (fmt_res_236007[0]).concat(makeNimstrLit("|")); } else { fmt_res_236007[0] = makeNimstrLit("|"); };
		if (result_235807 != null) { result_235807 = (result_235807).concat(fmt_res_236007[0]); } else { result_235807 = fmt_res_236007[0].slice(); };

	return result_235807;

}

function HEX24_229214(model_229216) {
						var Tmp4;

	var result_229217 = null;

		result_229217 = nimCopy(null, makeNimstrLit("[Robust Interrupted Time Series Model]\x0A"), NTI138);
		if (result_229217 != null) { result_229217 = (result_229217).concat(makeNimstrLit("* Coefficients:\x0A")); } else { result_229217 = makeNimstrLit("* Coefficients:\x0A"); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_205789(model_229216.model.before_model.coefficients[0], true, makeNimstrLit("       slope (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_205789(model_229216.model.before_model.coefficients[0], true, makeNimstrLit("       slope (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_205789(model_229216.model.before_model.coefficients[1], false, makeNimstrLit("   intercept (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_205789(model_229216.model.before_model.coefficients[1], false, makeNimstrLit("   intercept (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_205789(model_229216.model.before_residual_model.coefficients[0], false, makeNimstrLit("    autocorr (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_205789(model_229216.model.before_residual_model.coefficients[0], false, makeNimstrLit("    autocorr (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_205789(model_229216.model.after_model.coefficients[0], false, makeNimstrLit("      slope (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_205789(model_229216.model.after_model.coefficients[0], false, makeNimstrLit("      slope (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_205789(model_229216.model.after_model.coefficients[1], false, makeNimstrLit("  intercept (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_205789(model_229216.model.after_model.coefficients[1], false, makeNimstrLit("  intercept (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_205789(model_229216.model.after_residual_model.coefficients[0], false, makeNimstrLit("   autocorr (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_205789(model_229216.model.after_residual_model.coefficients[0], false, makeNimstrLit("   autocorr (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat(makeNimstrLit("* Noise estimates:\x0A")); } else { result_229217 = makeNimstrLit("* Noise estimates:\x0A"); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_229558(model_229216.model.before_residual_model.noise_variance, false, makeNimstrLit("    variance (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_229558(model_229216.model.before_residual_model.noise_variance, false, makeNimstrLit("    variance (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat((estimate_as_string_229558(model_229216.model.after_residual_model.noise_variance, false, makeNimstrLit("   variance (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_229217 = (estimate_as_string_229558(model_229216.model.after_residual_model.noise_variance, false, makeNimstrLit("   variance (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat(makeNimstrLit("* Log-likelihood evaluations:\x0A")); } else { result_229217 = makeNimstrLit("* Log-likelihood evaluations:\x0A"); };
		if (result_229217 != null) { result_229217 = (result_229217).concat(makeNimstrLit(" Change-point| Log-likelihood\x0A")); } else { result_229217 = makeNimstrLit(" Change-point| Log-likelihood\x0A"); };
		L1: do {
			var k_234753 = 0;
			var colontmp__238730 = 0;
			colontmp__238730 = (model_229216.change_point_candidates != null ? (model_229216.change_point_candidates.length-1) : -1);
			var res_238733 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_238733 <= colontmp__238730)) break L3;
						k_234753 = res_238733;
						var fmt_res_234757 = [mnewString(0)];
						if (fmt_res_234757[0] != null) { fmt_res_234757[0] = (fmt_res_234757[0]).concat(makeNimstrLit("       ")); } else { fmt_res_234757[0] = makeNimstrLit("       "); };
						format_235202(model_229216.change_point_candidates[k_234753], makeNimstrLit(">5"), fmt_res_234757, 0);
						if (fmt_res_234757[0] != null) { fmt_res_234757[0] = (fmt_res_234757[0]).concat(makeNimstrLit(" | ")); } else { fmt_res_234757[0] = makeNimstrLit(" | "); };
						format_194002(model_229216.loglikelihood_candidates[k_234753], makeNimstrLit(".3f"), fmt_res_234757, 0);
						if (fmt_res_234757[0] != null) { fmt_res_234757[0] = (fmt_res_234757[0]).concat(makeNimstrLit(" ")); } else { fmt_res_234757[0] = makeNimstrLit(" "); };
						if ((model_229216.change_point_candidates[k_234753] == model_229216.change_point_index)) {
						Tmp4 = makeNimstrLit("***\x0A");
						}
						else {
						Tmp4 = makeNimstrLit("\x0A");
						}
						
						if (result_229217 != null) { result_229217 = (result_229217).concat((fmt_res_234757[0]).concat(Tmp4)); } else { result_229217 = (fmt_res_234757[0]).concat(Tmp4).slice(); };
						res_238733 += 1;
					}
			} while(false);
		} while(false);
		if (result_229217 != null) { result_229217 = (result_229217).concat(makeNimstrLit("* Wald test:\x0A")); } else { result_229217 = makeNimstrLit("* Wald test:\x0A"); };
		var fmt_res_235615 = mnewString(0);
		if (fmt_res_235615 != null) { fmt_res_235615 = (fmt_res_235615).concat(makeNimstrLit("  H0: There is not change point at ")); } else { fmt_res_235615 = makeNimstrLit("  H0: There is not change point at "); };
		if (fmt_res_235615 != null) { fmt_res_235615 = (fmt_res_235615).concat(cstrToNimstr((model_229216.change_point_x)+"")); } else { fmt_res_235615 = cstrToNimstr((model_229216.change_point_x)+"").slice(); };
		if (fmt_res_235615 != null) { fmt_res_235615 = (fmt_res_235615).concat(makeNimstrLit(":\x0A")); } else { fmt_res_235615 = makeNimstrLit(":\x0A"); };
		if (result_229217 != null) { result_229217 = (result_229217).concat(fmt_res_235615); } else { result_229217 = fmt_res_235615.slice(); };
		if (result_229217 != null) { result_229217 = (result_229217).concat(makeNimstrLit("  H1: At least one of the after C.P. parameters is not 0:\x0A  ")); } else { result_229217 = makeNimstrLit("  H1: At least one of the after C.P. parameters is not 0:\x0A  "); };
		if (result_229217 != null) { result_229217 = (result_229217).concat(nsuReplaceStr(HEX24_235802(model_229216.model.existence_change_point_hypothesis), makeNimstrLit("\x0A"), makeNimstrLit("\x0A  "))); } else { result_229217 = nsuReplaceStr(HEX24_235802(model_229216.model.existence_change_point_hypothesis), makeNimstrLit("\x0A"), makeNimstrLit("\x0A  ")).slice(); };

	return result_229217;

}

function new_ritsperiod_242173() {
	var result_242175 = null;

		result_242175 = {slope: null, intercept: null, autocorrelation: null, noise: null, residuals: null};
		result_242175.slope = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_242175.intercept = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_242175.autocorrelation = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_242175.noise = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_242175.residuals = {values: null, autocorrelation: null, autocorrelation_null_confidence_interval: null};

	return result_242175;

}

function new_seq_242420(len_242424) {
	var result_242426 = null;

		result_242426 = new Array(len_242424); for (var i=0;i<len_242424;++i) {result_242426[i]=0.0;}
	return result_242426;

}

function clean_nan_242286(v_242288, d_242289) {
							var Tmp5;

	var result_242290 = null;

		L1: do {
			var i_242410 = 0;
			var result_242451 = new_seq_242420((v_242288 != null ? v_242288.length : 0));
			L2: do {
				var it_242460 = 0.0;
				var i_242484 = 0;
				var l_242486 = (v_242288 != null ? v_242288.length : 0);
				L3: do {
						L4: while (true) {
						if (!(i_242484 < l_242486)) break L4;
							it_242460 = v_242288[i_242484];
							if ((classify_29030(it_242460) == 4)) {
							Tmp5 = d_242289;
							}
							else {
							Tmp5 = it_242460;
							}
							
							result_242451[i_242410] = Tmp5;
							i_242410 += 1;
							i_242484 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_242290 = nimCopy(null, result_242451, NTI242425);

	return result_242290;

}

function sum_153414(a_153416) {
	var result_153417 = [0.0];

		L1: do {
			var k_153441 = 0;
			var colontmp__153453 = 0;
			colontmp__153453 = (a_153416 != null ? (a_153416.length-1) : -1);
			var res_153456 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_153456 <= colontmp__153453)) break L3;
						k_153441 = res_153456;
						HEX2BHEX3D_44127(result_153417, 0, a_153416[k_153441]);
						res_153456 += 1;
					}
			} while(false);
		} while(false);

	return result_153417[0];

}

function multiply_149614(a_149616, b_149617) {
	var result_149618 = null;

		L1: do {
			var k_149824 = 0;
			var colontmp__149836 = 0;
			colontmp__149836 = (a_149616 != null ? (a_149616.length-1) : -1);
			var res_149839 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_149839 <= colontmp__149836)) break L3;
						k_149824 = res_149839;
						if (result_149618 != null) { result_149618.push((a_149616[k_149824] * b_149617[k_149824])); } else { result_149618 = [(a_149616[k_149824] * b_149617[k_149824])]; };
						res_149839 += 1;
					}
			} while(false);
		} while(false);

	return result_149618;

}

function HEX2A_149934(a_149936, b_149937) {
	var result_149938 = null;

		result_149938 = nimCopy(null, multiply_149614(a_149936, b_149937), NTI148064);

	return result_149938;

}

function scaled_shifted_203556(distribution_203560, location_203562, scale_203564) {
	var result_203566 = null;

		result_203566 = {distribution: null, location: 0.0, scale: 0.0};
		result_203566.distribution = distribution_203560;
		result_203566.location = location_203562;
		result_203566.scale = scale_203564;

	return result_203566;

}

function htest_score_203611(distribution_203615, score_203617, test_type_203619) {
	var result_203621 = null;

		result_203621 = {distribution: null, test_score: 0.0, test_type: 0};
		result_203621.distribution = distribution_203615;
		result_203621.test_score = score_203617;
		result_203621.test_type = test_type_203619;

	return result_203621;

}

function shifted_estimator_203544(distribution_203548, location_203550, scale_203552) {
	var result_203554 = null;

		var est_distribution_203588 = scaled_shifted_203556(distribution_203548, location_203550, scale_203552);
		var est_null_distribution_203600 = scaled_shifted_203556(distribution_203548, 0.0, scale_203552);
		result_203554 = {distribution: null, hypothesis_test: null};
		result_203554.distribution = est_distribution_203588;
		result_203554.hypothesis_test = htest_score_203611(est_null_distribution_203600, location_203550, 0);

	return result_203554;

}

function autocorrelation_function_203057(x_203059, max_lags_203060) {
	var result_203061 = null;

		result_203061 = {estimators: null, null_distribution: null, estimators_mean: null, lags: null};
		var x_mean_203071 = mean_155214(x_203059, 0);
		var n_203080 = (x_203059 != null ? (x_203059.length-1) : -1);
		L1: do {
			var k_203092 = 0;
			var colontmp__203678 = 0;
			colontmp__203678 = nimMin(max_lags_203060, n_203080);
			var res_203681 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_203681 <= colontmp__203678)) break L3;
						k_203092 = res_203681;
						var acf_203483 = (sum_153414(HEX2A_149934(HEX2D_149310(HEX5BHEX5D_203119(x_203059, HEX2EHEX2E_57828(0, (n_203080 - k_203092))), x_mean_203071), HEX2D_149310(HEX5BHEX5D_203119(x_203059, HEX2EHEX2E_57828(k_203092, n_203080)), x_mean_203071))) / sum_153414(HEX2EHEX5E_153952(HEX2D_149310(x_203059, mean_155214(x_203059, 0)), 2.0000000000000000e+00)));
						if (result_203061.lags != null) { result_203061.lags.push(k_203092); } else { result_203061.lags = [k_203092]; };
						var Tmp4 = nimCopy(null, acf_203483, NTI124);
						if (result_203061.estimators_mean != null) { result_203061.estimators_mean.push(Tmp4); } else { result_203061.estimators_mean = [Tmp4]; };
						if (result_203061.estimators != null) { result_203061.estimators.push(shifted_estimator_203544(normal_197031(0.0, 1.0000000000000000e+00), acf_203483, Math.sqrt((1.0000000000000000e+00 + ((1.0000000000000000e+00 + (2.0000000000000000e+00 * sum_153414(HEX2EHEX5E_153952(HEX5BHEX5D_203119(x_203059, HEX2EHEX2E_57828(0, k_203092)), 2.0000000000000000e+00)))) / n_203080))))); } else { result_203061.estimators = [shifted_estimator_203544(normal_197031(0.0, 1.0000000000000000e+00), acf_203483, Math.sqrt((1.0000000000000000e+00 + ((1.0000000000000000e+00 + (2.0000000000000000e+00 * sum_153414(HEX2EHEX5E_153952(HEX5BHEX5D_203119(x_203059, HEX2EHEX2E_57828(0, k_203092)), 2.0000000000000000e+00)))) / n_203080))))]; };
						res_203681 += 1;
					}
			} while(false);
		} while(false);
		result_203061.null_distribution = shifted_estimator_203544(normal_197031(0.0, 1.0000000000000000e+00), 0.0, (1.0000000000000000e+00 / Math.sqrt(n_203080)));

	return result_203061;

}

function flatten_242567(estimator_242572) {
	var result_242573 = null;

		result_242573 = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_242573.mean = estimate_206648(estimator_242572);
		result_242573.standard_deviation = standard_deviation_207458(estimator_242572);
		result_242573.confidence_interval = nimCopy(null, confidence_interval_208448(estimator_242572, 5.0000000000000003e-02), NTI202896);
		result_242573.p_value = p_value_211652(estimator_242572);
		result_242573.score = test_score_210241(estimator_242572);
		result_242573.t_value = test_score_210241(estimator_242572);

	return result_242573;

}

function flatten_243080(estimator_243085) {
	var result_243086 = null;

		result_243086 = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_243086.mean = estimate_213248(estimator_243085);
		result_243086.standard_deviation = standard_deviation_214058(estimator_243085);
		result_243086.confidence_interval = nimCopy(null, confidence_interval_215048(estimator_243085, 5.0000000000000003e-02), NTI202896);
		result_243086.p_value = p_value_218252(estimator_243085);
		result_243086.score = test_score_216841(estimator_243085);
		result_243086.t_value = test_score_216841(estimator_243085);

	return result_243086;

}

function erf_192722(x_192724) {
		var Tmp3;

	var result_192725 = 0.0;

	BeforeRet: do {
		var x2_192729 = x_192724;
		var j_192759 = 27;
		var isneg_192760 = false;
		var d_192761 = 0.0;
		var dd_192762 = 0.0;
		var t_192763 = 0.0;
		var ty_192764 = 0.0;
		var tmp_192765 = 0.0;
		var res_192766 = 0.0;
		if ((x_192724 < 0.0)) {
		x2_192729 = -(x_192724);
		isneg_192760 = true;
		}
		
		t_192763 = (2.0000000000000000e+00 / (2.0000000000000000e+00 + x2_192729));
		ty_192764 = ((4.0000000000000000e+00 * t_192763) - 2.0000000000000000e+00);
		L1: do {
				L2: while (true) {
				if (!(0 < j_192759)) break L2;
					tmp_192765 = d_192761;
					d_192761 = (((ty_192764 * d_192761) - dd_192762) + cof_192726[j_192759]);
					dd_192762 = tmp_192765;
					j_192759 -= 1;
				}
		} while(false);
		res_192766 = (t_192763 * Math.exp((((-(x_192724) * x_192724) + (5.0000000000000000e-01 * (-1.3026537197817094e+00 + (ty_192764 * d_192761)))) - dd_192762)));
		if (isneg_192760) {
		Tmp3 = (res_192766 - 1.0000000000000000e+00);
		}
		else {
		Tmp3 = (1.0000000000000000e+00 - res_192766);
		}
		
		result_192725 = Tmp3;
		break BeforeRet;
	} while (false);

	return result_192725;

}

function erfc_192792(x_192794) {
	var result_192795 = 0.0;

		result_192795 = (1.0000000000000000e+00 - erf_192722(x_192794));

	return result_192795;

}

function erfcinv_192809(p_192811) {
		var Tmp1;
		var Tmp5;

	var result_192812 = 0.0;

	BeforeRet: do {
		if ((2.0000000000000000e+00 <= p_192811)) {
		result_192812 = -1.0000000000000000e+02;
		break BeforeRet;
		}
		
		if ((p_192811 <= 0.0)) {
		result_192812 = 1.0000000000000000e+02;
		break BeforeRet;
		}
		
		if ((p_192811 < 1.0000000000000000e+00)) {
		Tmp1 = p_192811;
		}
		else {
		Tmp1 = (2.0000000000000000e+00 - p_192811);
		}
		
		var pp_192813 = Tmp1;
		var t_192814 = Math.sqrt((-2.0000000000000000e+00 * Math.log((pp_192813 / 2.0000000000000000e+00))));
		var x_192815 = [(-7.0711000000000002e-01 * (((2.3075299999999999e+00 + (t_192814 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_192814 * (9.9229000000000001e-01 + (t_192814 * 4.4810000000000003e-02))))) - t_192814))];
		var err_192816 = 0.0;
		L2: do {
			var j_192829 = 0;
			var res_192843 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_192843 <= 1)) break L4;
						j_192829 = res_192843;
						err_192816 = (erfc_192792(x_192815[0]) - pp_192813);
						HEX2BHEX3D_44127(x_192815, 0, (err_192816 / ((1.1283791670955126e+00 * Math.exp((-(x_192815[0]) * x_192815[0]))) - (x_192815[0] * err_192816))));
						res_192843 += 1;
					}
			} while(false);
		} while(false);
		if ((p_192811 < 1.0000000000000000e+00)) {
		Tmp5 = x_192815[0];
		}
		else {
		Tmp5 = -(x_192815[0]);
		}
		
		result_192812 = Tmp5;
		break BeforeRet;
	} while (false);

	return result_192812;

}

function inv_197861(d_197863, p_197864) {
	var result_197865 = 0.0;

	BeforeRet: do {
		result_197865 = (((-1.4142135623730951e+00 * d_197863.std) * erfcinv_192809((2.0000000000000000e+00 * p_197864))) + d_197863.mean);
		break BeforeRet;
	} while (false);

	return result_197865;

}

function inv_243497(d_243502, p_243504) {
	var result_243505 = 0.0;

		result_243505 = ((inv_197861(d_243502.distribution, p_243504) * d_243502.scale) + d_243502.location);

	return result_243505;

}

function confidence_interval_243475(sd_243480, alpha_243482) {
	var result_243483 = null;

		result_243483 = nimCopy(null, [inv_243497(sd_243480.distribution, (5.0000000000000000e-01 * alpha_243482)), inv_243497(sd_243480.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_243482)))], NTI202502);

	return result_243483;

}

function flatten_242500(model_242502) {
	var result_242503 = null;

		result_242503 = {change_point_candidates: null, loglikelihood_candidates: null, change_point_index: 0, change_point_x: 0.0, initial: null, increment_change: null, existence_change_point_hypothesis: null};
		result_242503.initial = new_ritsperiod_242173();
		result_242503.increment_change = new_ritsperiod_242173();
		result_242503.change_point_candidates = nimCopy(null, model_242502.change_point_candidates, NTI229178);
		result_242503.loglikelihood_candidates = nimCopy(null, clean_nan_242286(model_242502.loglikelihood_candidates, -Infinity), NTI148064);
		result_242503.change_point_index = model_242502.change_point_index;
		result_242503.change_point_x = model_242502.change_point_x;
		var acf1_242513 = autocorrelation_function_203057(clean_nan_242286(model_242502.model.before_residual_model.residuals, -Infinity), 100);
		var acf2_242515 = autocorrelation_function_203057(clean_nan_242286(model_242502.model.after_residual_model.residuals, -Infinity), 100);
		result_242503.initial.slope = flatten_242567(model_242502.model.before_model.coefficients[0]);
		result_242503.initial.intercept = flatten_242567(model_242502.model.before_model.coefficients[1]);
		result_242503.initial.autocorrelation = flatten_242567(model_242502.model.before_residual_model.coefficients[0]);
		result_242503.initial.noise = flatten_243080(model_242502.model.before_residual_model.noise_variance);
		result_242503.initial.residuals.values = nimCopy(null, clean_nan_242286(model_242502.model.before_residual_model.residuals, -Infinity), NTI148064);
		result_242503.initial.residuals.autocorrelation = nimCopy(null, clean_nan_242286(acf1_242513.estimators_mean, 0.0), NTI148064);
		result_242503.initial.residuals.autocorrelation_null_confidence_interval = nimCopy(null, confidence_interval_243475(acf1_242513.null_distribution, 5.0000000000000003e-02), NTI202896);
		result_242503.increment_change.slope = flatten_242567(model_242502.model.after_model.coefficients[0]);
		result_242503.increment_change.intercept = flatten_242567(model_242502.model.after_model.coefficients[1]);
		result_242503.increment_change.autocorrelation = flatten_242567(model_242502.model.after_residual_model.coefficients[0]);
		result_242503.increment_change.noise = flatten_243080(model_242502.model.after_residual_model.noise_variance);
		result_242503.increment_change.residuals.values = nimCopy(null, clean_nan_242286(model_242502.model.after_residual_model.residuals, -Infinity), NTI148064);
		result_242503.increment_change.residuals.autocorrelation = nimCopy(null, clean_nan_242286(acf2_242515.estimators_mean, 0.0), NTI148064);
		result_242503.increment_change.residuals.autocorrelation_null_confidence_interval = nimCopy(null, confidence_interval_243475(acf2_242515.null_distribution, 5.0000000000000003e-02), NTI202896);
		result_242503.existence_change_point_hypothesis = flatten_243897(model_242502.model.existence_change_point_hypothesis);

	return result_242503;

}

function robust_interrupted_time_series(x_244126, y_244127, change_point_candidates_start_244128, change_point_candidates_end_244129) {
	var result_244130 = null;

		var model_244131 = rits_model_240692(x_244126, y_244127, change_point_candidates_start_244128, change_point_candidates_end_244129);
		rawEcho(HEX24_229214(model_244131));
		result_244130 = flatten_242500(model_244131);

	return result_244130;

}

function subsample_156014(v_156016, sampling_156017) {
	var result_156018 = null;

		L1: do {
			var k_156042 = 0;
			var colontmp__156055 = 0;
			colontmp__156055 = (v_156016 != null ? (v_156016.length-1) : -1);
			var res_156058 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_156058 <= colontmp__156055)) break L3;
						k_156042 = res_156058;
						L4: do {
							if (!((Math.trunc(k_156042 % sampling_156017) == 0))) {
							break L4;
							}
							
							if (result_156018 != null) { result_156018.push(interpolated_if_not_valid_155829(v_156016, k_156042)); } else { result_156018 = [interpolated_if_not_valid_155829(v_156016, k_156042)]; };
						} while(false);
						res_156058 += 1;
					}
			} while(false);
		} while(false);

	return result_156018;

}

function robust_interrupted_time_series_approximated(sampling_244149, x_244150, y_244151, change_point_candidates_start_244152, change_point_candidates_end_244153) {
	var result_244154 = null;

		var model_244155 = rits_model_240692(subsample_156014(x_244150, sampling_244149), y_244151, Math.trunc((change_point_candidates_start_244152 / sampling_244149)), Math.trunc((change_point_candidates_end_244153 / sampling_244149)));
		rawEcho(HEX24_229214(model_244155));
		result_244154 = flatten_242500(model_244155);

	return result_244154;

}
exports.robust_interrupted_time_series = robust_interrupted_time_series
exports.robust_interrupted_time_series_approximated = robust_interrupted_time_series_approximated
exports.existence_change_point_hypothesis = existence_change_point_hypothesis
