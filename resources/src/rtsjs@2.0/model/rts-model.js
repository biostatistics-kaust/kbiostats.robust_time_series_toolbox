/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI144824 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI144826 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI144878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI144816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI144818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI145020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI132800 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI132798 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI132797 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI132806 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI17403 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI132792 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI132788 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI132780 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI132773 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI132768 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI132688 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI126 = {size: 0,kind: 37,base: null,node: null,finalizer: null};
var NTI128021 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI128022 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI128017 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3896 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3804 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI132601 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI3804.base = NTI3896;
var NNI132601 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3804, name: "Field1", sons: null}]};
NTI132601.node = NNI132601;
NTI128021.base = NTI126;
NTI128022.base = NTI128021;
var NNI128017 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "length", len: 0, typ: NTI104, name: "length", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI128022, name: "data", sons: null}]};
NTI128017.node = NNI128017;
NTI132688.base = NTI128;
NTI132773.base = NTI124;
NTI132780.base = NTI124;
var NNI132768 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI124, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI124, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI132773, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI124, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI124, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI124, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI132780, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI124, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "R2", len: 0, typ: NTI124, name: "R2", sons: null}, 
{kind: 1, offset: "residual_sum_squares", len: 0, typ: NTI124, name: "residual_sum_squares", sons: null}, 
{kind: 1, offset: "residual_variance", len: 0, typ: NTI124, name: "residual_variance", sons: null}, 
{kind: 1, offset: "n", len: 0, typ: NTI104, name: "n", sons: null}]};
NTI132768.node = NNI132768;
var NNI132788 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mean_structure", len: 0, typ: NTI132768, name: "mean_structure", sons: null}, 
{kind: 1, offset: "autoregressive_structure", len: 0, typ: NTI132768, name: "autoregressive_structure", sons: null}]};
NTI132788.node = NNI132788;
var NNI132792 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "loglikelihood", len: 0, typ: NTI124, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "before_change", len: 0, typ: NTI132788, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI132788, name: "after_change", sons: null}]};
NTI132792.node = NNI132792;
NTI132798.base = NTI104;
NTI132800.base = NTI124;
var NNI132797 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "change_points", len: 0, typ: NTI132798, name: "change_points", sons: null}, 
{kind: 1, offset: "loglikelihood", len: 0, typ: NTI132800, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "best_loglikelihood", len: 0, typ: NTI124, name: "best_loglikelihood", sons: null}, 
{kind: 1, offset: "best_likelihood", len: 0, typ: NTI124, name: "best_likelihood", sons: null}, 
{kind: 1, offset: "best_time", len: 0, typ: NTI104, name: "best_time", sons: null}]};
NTI132797.node = NNI132797;
var NNI132806 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "before_change", len: 0, typ: NTI132788, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI132788, name: "after_change", sons: null}, 
{kind: 1, offset: "likelihood", len: 0, typ: NTI132797, name: "likelihood", sons: null}]};
NTI132806.node = NNI132806;
NTI145020.base = NTI112;
NTI144816.base = NTI144878;
var NNI144818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI144816, name: "nanosecond", sons: null}]};
NTI144818.node = NNI144818;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3852.base = NTI3828;
var NNI144826 = {kind: 2, offset: 0, typ: null, name: null, len: 10, sons: {"0": {kind: 1, offset: 0, typ: NTI144826, name: "Nanoseconds", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI144826, name: "Microseconds", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI144826, name: "Milliseconds", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI144826, name: "Seconds", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI144826, name: "Minutes", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI144826, name: "Hours", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI144826, name: "Days", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI144826, name: "Weeks", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI144826, name: "Months", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI144826, name: "Years", len: 0, sons: null}}};
NTI144826.node = NNI144826;
var NNI144824 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI144816, name: "nanosecond", sons: null}]};
NTI144824.node = NNI144824;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}
		var table_ppf_132687 = nimCopy(null, [1.0000000000000001e+050, 1.2710000000000001e+001, 4.3029999999999999e+000, 3.1819999999999999e+000, 2.7759999999999998e+000, 2.5710000000000002e+000, 2.4470000000000001e+000, 2.3650000000000002e+000, 2.3060000000000000e+000, 2.2620000000000000e+000, 2.2280000000000002e+000, 2.2010000000000001e+000, 2.1789999999999998e+000, 2.1600000000000001e+000, 2.1450000000000000e+000, 2.1309999999999998e+000, 2.1200000000000001e+000, 2.1099999999999999e+000, 2.1010000000000000e+000, 2.0930000000000000e+000, 2.0859999999999999e+000, 2.0800000000000001e+000, 2.0739999999999998e+000, 2.0690000000000000e+000, 2.0640000000000001e+000, 2.0600000000000001e+000, 2.0560000000000000e+000, 2.0520000000000000e+000, 2.0480000000000000e+000, 2.0449999999999999e+000, 2.0419999999999998e+000, 2.0209999999999999e+000, 2.0089999999999999e+000, 2.0000000000000000e+000, 1.9900000000000000e+000, 1.9840000000000000e+000, 1.9800000000000000e+000, 1.9600000000000000e+000], NTI132688);
		var unit_weights_145017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI145020);

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		throw e_15818;

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
var ConstSet12 = setConstr([65, 90]);

function reprEnum(e_18481, typ_18482) {
	var result_18483 = null;

		if (!(is_undefined_18485(typ_18482.node.sons[e_18481]))) {
		result_18483 = nimCopy(null, makeNimstrLit(typ_18482.node.sons[e_18481].name), NTI138);
		}
		else {
			result_18483 = nimCopy(null, (cstrToNimstr((e_18481)+"")).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		

	return result_18483;

}
var ConstSet13 = setConstr([65, 90]);
var nimvm_7173 = false;
process.exitCode = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];

function len_128184(v_128186) {
	var result_128187 = 0;

		result_128187 = v_128186.length;

	return result_128187;

}

function sum_132165(x_132170) {
	var result_132171 = 0.0;

		L1: do {
			var i_132210 = 0.0;
			var i_132214 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_132214 < (x_132170 != null ? x_132170.length : 0))) break L3;
						i_132210 = x_132170[i_132214];
						result_132171 = (result_132171 + i_132210);
						i_132214 += 1;
					}
			} while(false);
		} while(false);

	return result_132171;

}

function sum_132159(v_132161) {
	var result_132162 = 0.0;

		result_132162 = sum_132165(v_132161.data);

	return result_132162;

}

function low_128218(v_128220) {
	var result_128221 = 0;

		result_128221 = 0;

	return result_128221;

}

function high_128201(v_128203) {
	var result_128204 = 0;

		result_128204 = (v_128203.length - 1);

	return result_128204;

}

function HEX5BHEX5DHEX3D_129214(v_129217, i_129218, val_129219) {
		if ((v_129217.length <= i_129218)) {
		v_129217.length = (i_129218 + 1);
		}
		
		v_129217.data[i_129218] = val_129219;

	
}

function HEX5BHEX5D_128940(v_128942, i_128943) {
	var result_128944 = 0.0;

		result_128944 = v_128942.data[i_128943];

	return result_128944;

}

function HEX2EHEX2A_131356(v_131358, w_131359) {
	var result_131360 = [{length: 0, data: null}];

		result_131360[0].data = new Float32Array(50000);
		L1: do {
			var i_131377 = 0;
			var colontmp__131380 = 0;
			var colontmp__131381 = 0;
			colontmp__131380 = low_128218(v_131358);
			colontmp__131381 = high_128201(v_131358);
			var res_131384 = colontmp__131380;
			L2: do {
					L3: while (true) {
					if (!(res_131384 <= colontmp__131381)) break L3;
						i_131377 = res_131384;
						HEX5BHEX5DHEX3D_129214(result_131360[0], i_131377, (HEX5BHEX5D_128940(v_131358, i_131377) * HEX5BHEX5D_128940(w_131359, i_131377)));
						res_131384 += 1;
					}
			} while(false);
		} while(false);

	return result_131360[0];

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function HEX2AHEX3D_124689(x_124694, x_124694_Idx, y_124696) {
		x_124694[x_124694_Idx] = (x_124694[x_124694_Idx] * y_124696);

	
}

function HEX5E_132281(x_132285, y_132287) {
	var result_132288 = [0.0];

		var colontmp__137923 = {Field0: 0.0, Field1: 0};
		var x_132602 = [0.0];
		var y_132603 = 0;
		nimCopy(colontmp__137923, {Field0: x_132285, Field1: y_132287}, NTI132601);
		x_132602[0] = colontmp__137923["Field0"];
		y_132603 = colontmp__137923["Field1"];
		result_132288[0] = 1.0000000000000000e+000;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_132603 & 1) == 0))) {
					HEX2AHEX3D_124689(result_132288, 0, x_132602[0]);
					}
					
					y_132603 = ((y_132603 >>> 0) >>> 1);
					if ((y_132603 == 0)) {
					break L1;
					}
					
					HEX2AHEX3D_124689(x_132602, 0, x_132602[0]);
				}
		} while(false);

	return result_132288[0];

}

function HEX5E_131819(v_131821, w_131822) {
	var result_131823 = 0.0;

		result_131823 = Math.pow(v_131821, w_131822);

	return result_131823;

}

function HEX2EHEX5E_131882(v_131884, k_131885) {
	var result_131886 = [{length: 0, data: null}];

		result_131886[0].data = new Float32Array(50000);
		L1: do {
			var i_131903 = 0;
			var colontmp__131906 = 0;
			var colontmp__131907 = 0;
			colontmp__131906 = low_128218(v_131884);
			colontmp__131907 = high_128201(v_131884);
			var res_131910 = colontmp__131906;
			L2: do {
					L3: while (true) {
					if (!(res_131910 <= colontmp__131907)) break L3;
						i_131903 = res_131910;
						HEX5BHEX5DHEX3D_129214(result_131886[0], i_131903, HEX5E_131819(HEX5BHEX5D_128940(v_131884, i_131903), k_131885));
						res_131910 += 1;
					}
			} while(false);
		} while(false);

	return result_131886[0];

}

function HEX2D_131183(v_131185, w_131186) {
	var result_131187 = [{length: 0, data: null}];

		result_131187[0].data = new Float32Array(50000);
		L1: do {
			var i_131204 = 0;
			var colontmp__131207 = 0;
			var colontmp__131208 = 0;
			colontmp__131207 = low_128218(v_131185);
			colontmp__131208 = high_128201(v_131185);
			var res_131211 = colontmp__131207;
			L2: do {
					L3: while (true) {
					if (!(res_131211 <= colontmp__131208)) break L3;
						i_131204 = res_131211;
						HEX5BHEX5DHEX3D_129214(result_131187[0], i_131204, (HEX5BHEX5D_128940(v_131185, i_131204) - HEX5BHEX5D_128940(w_131186, i_131204)));
						res_131211 += 1;
					}
			} while(false);
		} while(false);

	return result_131187[0];

}

function HEX2B_131082(v_131084, k_131085) {
	var result_131086 = [{length: 0, data: null}];

		result_131086[0].data = new Float32Array(50000);
		L1: do {
			var i_131103 = 0;
			var colontmp__131106 = 0;
			var colontmp__131107 = 0;
			colontmp__131106 = low_128218(v_131084);
			colontmp__131107 = high_128201(v_131084);
			var res_131110 = colontmp__131106;
			L2: do {
					L3: while (true) {
					if (!(res_131110 <= colontmp__131107)) break L3;
						i_131103 = res_131110;
						HEX5BHEX5DHEX3D_129214(result_131086[0], i_131103, (HEX5BHEX5D_128940(v_131084, i_131103) + k_131085));
						res_131110 += 1;
					}
			} while(false);
		} while(false);

	return result_131086[0];

}

function HEX2B_131127(k_131129, v_131130) {
	var result_131131 = {length: 0, data: null};

		nimCopy(result_131131, HEX2B_131082(v_131130, k_131129), NTI128017);

	return result_131131;

}

function HEX2EHEX2A_131401(v_131403, k_131404) {
	var result_131405 = [{length: 0, data: null}];

		result_131405[0].data = new Float32Array(50000);
		L1: do {
			var i_131422 = 0;
			var colontmp__131425 = 0;
			var colontmp__131426 = 0;
			colontmp__131425 = low_128218(v_131403);
			colontmp__131426 = high_128201(v_131403);
			var res_131429 = colontmp__131425;
			L2: do {
					L3: while (true) {
					if (!(res_131429 <= colontmp__131426)) break L3;
						i_131422 = res_131429;
						HEX5BHEX5DHEX3D_129214(result_131405[0], i_131422, (HEX5BHEX5D_128940(v_131403, i_131422) * k_131404));
						res_131429 += 1;
					}
			} while(false);
		} while(false);

	return result_131405[0];

}

function HEX2EHEX2A_131446(k_131448, v_131449) {
	var result_131450 = {length: 0, data: null};

		nimCopy(result_131450, HEX2EHEX2A_131401(v_131449, k_131448), NTI128017);

	return result_131450;

}

function HEX2A_131520(k_131522, v_131523) {
	var result_131524 = {length: 0, data: null};

		nimCopy(result_131524, HEX2EHEX2A_131446(k_131522, v_131523), NTI128017);

	return result_131524;

}

function student_t_ppf_95p_132683(df_132685) {
	var result_132686 = 0.0;

	BeforeRet: do {
		if ((38 < df_132685)) {
		result_132686 = 1.9600000000000000e+000;
		break BeforeRet;
		}
		else {
		if ((df_132685 <= 1)) {
		result_132686 = 1.2710000000000001e+001;
		break BeforeRet;
		}
		}
		result_132686 = table_ppf_132687[df_132685];
		break BeforeRet;
	} while (false);

	return result_132686;

}

function student_t_ppf_95p_132741(df_132743) {
	var result_132744 = 0.0;

		result_132744 = student_t_ppf_95p_132683(((df_132743)|0));

	return result_132744;

}

function simple_linear_regression(x_137827, y_137828) {
	var result_137829 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0};

		var n_137830 = len_128184(x_137827);
		var sx_137831 = sum_132159(x_137827);
		var sxx_137832 = sum_132159(HEX2EHEX2A_131356(x_137827, x_137827));
		var sy_137833 = sum_132159(y_137828);
		var sxy_137834 = sum_132159(HEX2EHEX2A_131356(x_137827, y_137828));
		var syy_137835 = sum_132159(HEX2EHEX2A_131356(y_137828, y_137828));
		result_137829.n = ((n_137830)|0);
		result_137829.slope = (((n_137830 * sxy_137834) - (sx_137831 * sy_137833)) / ((n_137830 * sxx_137832) - HEX5E_132281(sx_137831, 2)));
		result_137829.intercept = ((sy_137833 / n_137830) - ((result_137829.slope * sx_137831) / n_137830));
		result_137829.R2 = ((HEX5E_132281(((n_137830 * sxy_137834) - (sx_137831 * sy_137833)), 2) / ((n_137830 * sxx_137832) - HEX5E_132281(sx_137831, 2))) / ((n_137830 * syy_137835) - HEX5E_132281(sy_137833, 2)));
		result_137829.residual_sum_squares = sum_132159(HEX2EHEX5E_131882(HEX2D_131183(y_137828, HEX2B_131127(result_137829.intercept, HEX2A_131520(result_137829.slope, x_137827))), 2.0000000000000000e+000));
		result_137829.residual_variance = ((((n_137830 * syy_137835) - HEX5E_132281(sy_137833, 2)) - (HEX5E_132281(result_137829.slope, 2) * ((n_137830 * sxx_137832) - HEX5E_132281(sx_137831, 2)))) / ((n_137830 * n_137830) - (2.0000000000000000e+000 * n_137830)));
		result_137829.slope_variance = ((n_137830 * result_137829.residual_variance) / ((n_137830 * sxx_137832) - HEX5E_132281(sx_137831, 2)));
		result_137829.intercept_variance = ((result_137829.slope_variance * sxx_137832) / n_137830);
		result_137829.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_137829.slope_variance)) * student_t_ppf_95p_132741((n_137830 - 2.0000000000000000e+000)));
		result_137829.slope_confidence_interval[0] = (result_137829.slope - (5.0000000000000000e-001 * result_137829.slope_width_confidence_interval));
		result_137829.slope_confidence_interval[1] = (result_137829.slope + (5.0000000000000000e-001 * result_137829.slope_width_confidence_interval));
		result_137829.intercept_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_137829.intercept_variance)) * student_t_ppf_95p_132741((n_137830 - 2.0000000000000000e+000)));
		result_137829.intercept_confidence_interval[0] = (result_137829.intercept - (5.0000000000000000e-001 * result_137829.intercept_width_confidence_interval));
		result_137829.intercept_confidence_interval[1] = (result_137829.intercept + (5.0000000000000000e-001 * result_137829.intercept_width_confidence_interval));

	return result_137829;

}

function simple_linear_regression_wo_intercept(x_137926, y_137927) {
	var result_137928 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0};

		var n_137929 = len_128184(x_137926);
		var sx_137930 = sum_132159(x_137926);
		var sxx_137931 = sum_132159(HEX2EHEX2A_131356(x_137926, x_137926));
		var sy_137932 = sum_132159(y_137927);
		var sxy_137933 = sum_132159(HEX2EHEX2A_131356(x_137926, y_137927));
		var sxxyy_137934 = sum_132159(HEX2EHEX2A_131356(HEX2EHEX2A_131356(x_137926, y_137927), HEX2EHEX2A_131356(x_137926, y_137927)));
		var syy_137935 = sum_132159(HEX2EHEX2A_131356(y_137927, y_137927));
		result_137928.n = ((n_137929)|0);
		result_137928.slope = ((((n_137929 * sxy_137933) - (sx_137930 * sy_137932)) + (sx_137930 * sy_137932)) / (((n_137929 * sxx_137931) - HEX5E_132281(sx_137930, 2)) + (sx_137930 * sx_137930)));
		result_137928.intercept = 0.0;
		result_137928.R2 = (HEX5E_132281(sxy_137933, 2) / (sxx_137931 * syy_137935));
		result_137928.residual_sum_squares = sum_132159(HEX2EHEX5E_131882(HEX2D_131183(y_137927, HEX2EHEX2A_131446(result_137928.slope, x_137926)), 2.0000000000000000e+000));
		result_137928.residual_variance = (result_137928.residual_sum_squares / (n_137929 - 1.0000000000000000e+000));
		result_137928.slope_variance = (result_137928.residual_variance / sxx_137931);
		result_137928.intercept_variance = 0.0;
		result_137928.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_137928.slope_variance)) * student_t_ppf_95p_132741((n_137929 - 1.0000000000000000e+000)));
		result_137928.slope_confidence_interval[0] = (result_137928.slope - (5.0000000000000000e-001 * result_137928.slope_width_confidence_interval));
		result_137928.slope_confidence_interval[1] = (result_137928.slope + (5.0000000000000000e-001 * result_137928.slope_width_confidence_interval));
		result_137928.intercept_width_confidence_interval = 0.0;
		result_137928.intercept_confidence_interval[0] = 0.0;
		result_137928.intercept_confidence_interval[1] = 0.0;

	return result_137928;

}

function HEX5BHEX5D_129614(v_129616, idx_129624) {
	var result_129625 = {length: 0, data: null};

		result_129625.data = new Float32Array(50000);
		var k_129635 = 0;
		L1: do {
			var i_129674 = 0;
			L2: do {
				var x_130014 = 0;
				var colontmp__130016 = 0;
				var colontmp__130018 = 0;
				colontmp__130016 = idx_129624.a;
				colontmp__130018 = idx_129624.b;
				var res_130020 = colontmp__130016;
				L3: do {
						L4: while (true) {
						if (!(res_130020 <= colontmp__130018)) break L4;
							x_130014 = res_130020;
							i_129674 = x_130014;
							result_129625.data[k_129635] = v_129616.data[i_129674];
							k_129635 += 1;
							res_130020 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_129625.length = k_129635;

	return result_129625;

}

function HEX2EHEX2E_53828(a_53833, b_53835) {
	var result_53843 = {a: 0, b: 0};

		result_53843.a = a_53833;
		result_53843.b = b_53835;

	return result_53843;

}

function arma(x_137978, y_137979) {
	var result_137980 = {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}};

		nimCopy(result_137980.mean_structure, simple_linear_regression(x_137978, y_137979), NTI132768);
		var residuals_137981 = HEX2D_131183(y_137979, HEX2B_131127(result_137980.mean_structure.intercept, HEX2A_131520(result_137980.mean_structure.slope, x_137978)));
		nimCopy(result_137980.autoregressive_structure, simple_linear_regression_wo_intercept(HEX5BHEX5D_129614(residuals_137981, HEX2EHEX2E_53828(0, (high_128201(residuals_137981) - 1))), HEX5BHEX5D_129614(residuals_137981, HEX2EHEX2E_53828(1, high_128201(residuals_137981)))), NTI132768);

	return result_137980;

}

function HEX2BHEX3D_31100(x_31105, x_31105_Idx, y_31107) {
		x_31105[x_31105_Idx] = (x_31105[x_31105_Idx] + y_31107);

	
}

function HEX2DHEX3D_138036(x_138041, x_138041_Idx, y_138043) {
		x_138041[x_138041_Idx] = (x_138041[x_138041_Idx] - y_138043);

	
}

function HEX2EHEX5E_131972(v_131974, k_131975) {
	var result_131976 = {length: 0, data: null};

		nimCopy(result_131976, HEX2EHEX5E_131882(v_131974, k_131975), NTI128017);

	return result_131976;

}

function normal_loglikelihood_138019(x_138021, y_138022, slope_138023, intercept_138024, sigma2_138025) {
	var result_138026 = [0.0];

		var n_138027 = len_128184(x_138021);
		result_138026[0] = ((-5.0000000000000000e-001 * n_138027) * Math.log((6.2831853071795862e+000 * sigma2_138025)));
		HEX2DHEX3D_138036(result_138026, 0, (sum_132159(HEX2EHEX5E_131972(HEX2D_131183(y_138022, HEX2B_131127(intercept_138024, HEX2A_131520(slope_138023, x_138021))), 2)) / (2.0000000000000000e+000 * sigma2_138025)));

	return result_138026[0];

}

function analysis_at_point_t_138073(x_138075, y_138076, change_point_138077) {
	var result_138078 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}};

		var n_138079 = len_128184(x_138075);
		var x_before_138092 = HEX5BHEX5D_129614(x_138075, HEX2EHEX2E_53828(0, (change_point_138077 - 1)));
		var y_before_138105 = HEX5BHEX5D_129614(y_138076, HEX2EHEX2E_53828(0, (change_point_138077 - 1)));
		var x_after_138118 = HEX5BHEX5D_129614(x_138075, HEX2EHEX2E_53828(0, (change_point_138077 - 1)));
		var y_after_138131 = HEX5BHEX5D_129614(y_138076, HEX2EHEX2E_53828(0, (change_point_138077 - 1)));
		nimCopy(result_138078.before_change, arma(x_before_138092, y_before_138105), NTI132788);
		HEX2BHEX3D_31100(result_138078, "loglikelihood", normal_loglikelihood_138019(x_before_138092, y_before_138105, result_138078.before_change.mean_structure.slope, result_138078.before_change.mean_structure.intercept, result_138078.before_change.autoregressive_structure.residual_variance));
		nimCopy(result_138078.after_change, arma(x_after_138118, y_after_138131), NTI132788);
		HEX2BHEX3D_31100(result_138078, "loglikelihood", normal_loglikelihood_138019(x_after_138118, y_after_138131, result_138078.after_change.mean_structure.slope, result_138078.after_change.mean_structure.intercept, result_138078.after_change.autoregressive_structure.residual_variance));

	return result_138078;

}

function robust_interrupted_time_series_138165(x_138167, y_138168, change_point_138169, candidates_before_138170, candidates_after_138171) {
	var result_138172 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0}};

		var ll_result_138173 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}};
		result_138172.likelihood.best_loglikelihood = -1.0000000000000000e-100;
		L1: do {
			var t_138183 = 0;
			var colontmp__138205 = 0;
			var colontmp__138206 = 0;
			colontmp__138205 = (change_point_138169 - candidates_before_138170);
			colontmp__138206 = (change_point_138169 + candidates_after_138171);
			var res_138209 = colontmp__138205;
			L2: do {
					L3: while (true) {
					if (!(res_138209 <= colontmp__138206)) break L3;
						t_138183 = res_138209;
						nimCopy(ll_result_138173, analysis_at_point_t_138073(x_138167, y_138168, t_138183), NTI132792);
						var Tmp4 = nimCopy(null, t_138183, NTI17403);
						if (result_138172.likelihood.change_points != null) { result_138172.likelihood.change_points.push(Tmp4); } else { result_138172.likelihood.change_points = [Tmp4]; };
						var Tmp5 = nimCopy(null, ll_result_138173.loglikelihood, NTI124);
						if (result_138172.likelihood.loglikelihood != null) { result_138172.likelihood.loglikelihood.push(Tmp5); } else { result_138172.likelihood.loglikelihood = [Tmp5]; };
						if ((result_138172.likelihood.best_loglikelihood < ll_result_138173.loglikelihood)) {
						result_138172.likelihood.best_loglikelihood = ll_result_138173.loglikelihood;
						result_138172.likelihood.best_likelihood = Math.exp(ll_result_138173.loglikelihood);
						result_138172.likelihood.best_time = t_138183;
						nimCopy(result_138172.before_change, ll_result_138173.before_change, NTI132788);
						nimCopy(result_138172.after_change, ll_result_138173.after_change, NTI132788);
						}
						
						res_138209 += 1;
					}
			} while(false);
		} while(false);

	return result_138172;

}

function vector_128111(v_128114) {
	var result_128115 = {length: 0, data: null};

		result_128115.data = new Float32Array(50000);
		result_128115.length = (v_128114 != null ? v_128114.length : 0);
		var i_128130 = 0;
		L1: do {
			var k_128153 = 0;
			var colontmp__128164 = 0;
			colontmp__128164 = (v_128114 != null ? (v_128114.length-1) : -1);
			var res_128167 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_128167 <= colontmp__128164)) break L3;
						k_128153 = res_128167;
						result_128115.data[i_128130] = v_128114[k_128153];
						i_128130 += 1;
						res_128167 += 1;
					}
			} while(false);
		} while(false);
		result_128115.length = i_128130;
		nimCopy(result_128115, result_128115, NTI128017);

	return result_128115;

}

function robust_interrupted_time_series(x_138229, y_138231, change_point_138232, candidates_before_138233, candidates_after_138234) {
	var result_138235 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0}};

		nimCopy(result_138235, robust_interrupted_time_series_138165(vector_128111(x_138229), vector_128111(y_138231), change_point_138232, candidates_before_138233, candidates_after_138234), NTI132806);

	return result_138235;

}
var state_139805 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_147832 = [null];
var local_instance_147833 = [null];

function HEX2A_144401(a_144403, b_144404) {
	var result_144405 = 0;

		result_144405 = (a_144403 * b_144404);

	return result_144405;

}

function convert_145453(unit_from_145457, unit_to_145459, quantity_145461) {
		var Tmp1;

	var result_145462 = 0;

		if ((unit_from_145457 < unit_to_145459)) {
		Tmp1 = Math.trunc(quantity_145461 / Math.trunc(unit_weights_145017[unit_to_145459] / unit_weights_145017[unit_from_145457]));
		}
		else {
		Tmp1 = HEX2A_144401(Math.trunc(unit_weights_145017[unit_from_145457] / unit_weights_145017[unit_to_145459]), quantity_145461);
		}
		
		result_145462 = Tmp1;

	return result_145462;

}

function init_time_145090(unix_145092, nanosecond_145093) {
	var result_147018 = {seconds: 0, nanosecond: 0};

		result_147018.seconds = unix_145092;
		result_147018.nanosecond = nanosecond_145093;

	return result_147018;

}

function get_time_147961() {
	var result_147963 = {seconds: 0, nanosecond: 0};

		var millis_148001 = new Date().getTime();
		var seconds_148012 = convert_145453(2, 3, millis_148001);
		var nanos_148034 = convert_145453(2, 0, Math.trunc(millis_148001 % convert_145453(3, 2, 1)));
		nimCopy(result_147963, init_time_145090(seconds_148012, nanos_148034), NTI144818);

	return result_147963;

}
var start_157831 = [get_time_147961()];

function parse_saturated_natural_43485(s_43487, b_43489, b_43489_Idx, start_43490) {
			var Tmp1;
					var Tmp4;

	var result_43492 = 0;

		var i_43493 = start_43490;
		if (((i_43493 < (s_43487 != null ? s_43487.length : 0)) && (s_43487[i_43493] == 43))) {
		i_43493 += 1;
		}
		
			if (!(i_43493 < (s_43487 != null ? s_43487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_43487[i_43493]] != undefined);			}		if (Tmp1) {
		b_43489[b_43489_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_43493 < (s_43487 != null ? s_43487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_43487[i_43493]] != undefined);					}				if (!Tmp4) break L3;
					var c_43535 = (s_43487[i_43493] - 48);
					if ((b_43489[b_43489_Idx] <= Math.trunc((2147483647 - c_43535) / 10))) {
					b_43489[b_43489_Idx] = ((b_43489[b_43489_Idx] * 10) + c_43535);
					}
					else {
						b_43489[b_43489_Idx] = 2147483647;
					}
					
					i_43493 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_43493 < (s_43487 != null ? s_43487.length : 0)) && (s_43487[i_43493] == 95))) break L6;
								i_43493 += 1;
							}
					} while(false);
				}
		} while(false);
		result_43492 = (i_43493 - start_43490);
		}
		

	return result_43492;

}

function HEX5BHEX5D_85905(s_85910, x_85913) {
	var result_85914 = null;

		var a_86001 = x_85913.a;
		var l_86201 = ((((s_85910 != null ? s_85910.length : 0) - x_85913.b) - a_86001) + 1);
		result_85914 = nimCopy(null, mnewString(l_86201), NTI138);
		L1: do {
			var i_86211 = 0;
			var i_86223 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_86223 < l_86201)) break L3;
						i_86211 = i_86223;
						result_85914[i_86211] = s_85910[(i_86211 + a_86001)];
						i_86223 += 1;
					}
			} while(false);
		} while(false);

	return result_85914;

}

function HEX2EHEX2E_85853(a_85858, b_85860) {
	var result_85868 = {a: 0, b: 0};

		result_85868.a = a_85858;
		result_85868.b = b_85860;

	return result_85868;

}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function parse_standard_format_specifier_126928(s_126930, start_126931, ignore_unknown_suffix_126933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_126934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_126934.fill = 32;
		result_126934.align = 0;
		result_126934.sign = 45;
		var i_126937 = start_126931;
		if ((((i_126937 + 1) < (s_126930 != null ? s_126930.length : 0)) && (ConstSet2[s_126930[(i_126937 + 1)]] != undefined))) {
		result_126934.fill = s_126930[i_126937];
		result_126934.align = s_126930[(i_126937 + 1)];
		i_126937 += 2;
		}
		else {
		if (((i_126937 < (s_126930 != null ? s_126930.length : 0)) && (ConstSet3[s_126930[i_126937]] != undefined))) {
		result_126934.align = s_126930[i_126937];
		i_126937 += 1;
		}
		}
		if (((i_126937 < (s_126930 != null ? s_126930.length : 0)) && (ConstSet4[s_126930[i_126937]] != undefined))) {
		result_126934.sign = s_126930[i_126937];
		i_126937 += 1;
		}
		
		if (((i_126937 < (s_126930 != null ? s_126930.length : 0)) && (s_126930[i_126937] == 35))) {
		result_126934.alternateForm = true;
		i_126937 += 1;
		}
		
			if (!(((i_126937 + 1) < (s_126930 != null ? s_126930.length : 0)) && (s_126930[i_126937] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_126930[(i_126937 + 1)]] != undefined);			}		if (Tmp1) {
		result_126934.padWithZero = true;
		i_126937 += 1;
		}
		
		var parsed_length_127022 = parse_saturated_natural_43485(s_126930, result_126934, "minimumWidth", i_126937);
		i_126937 += parsed_length_127022;
		if (((i_126937 < (s_126930 != null ? s_126930.length : 0)) && (s_126930[i_126937] == 46))) {
		i_126937 += 1;
		var parsed_length_b_127042 = parse_saturated_natural_43485(s_126930, result_126934, "precision", i_126937);
		i_126937 += parsed_length_b_127042;
		}
		else {
			result_126934.precision = -1;
		}
		
			if (!(i_126937 < (s_126930 != null ? s_126930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_126930[i_126937]] != undefined);			}		if (Tmp2) {
		result_126934.typ = s_126930[i_126937];
		i_126937 += 1;
		}
		
		result_126934.endPosition = i_126937;
			if (!!((i_126937 == (s_126930 != null ? s_126930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_126933);			}		if (Tmp3) {
		var e_127120 = null;
		e_127120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_127120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_85905(s_126930, HEX2EHEX2E_85853(i_126937, 1))), NTI138);
		e_127120.parent = null;
		raiseException(e_127120, "ValueError");
		}
		

	return result_126934;

}

function nsuformatBiggestFloat(f_124023, format_124024, precision_124030, decimal_sep_124031) {
	var result_124032 = null;

		var precision_124201 = precision_124030;
		if ((precision_124201 == -1)) {
		precision_124201 = 6;
		}
		
		var res_124203 = null;
		switch (format_124024) {
		case 0:
			res_124203 = f_124023.toString();
			break;
		case 1:
			res_124203 = f_124023.toFixed(precision_124201);
			break;
		case 2:
			res_124203 = f_124023.toExponential(precision_124201);
			break;
		}
		result_124032 = nimCopy(null, cstrToNimstr(res_124203), NTI138);
		if (((1.0000000000000000e+000 / f_124023) == -Infinity)) {
		result_124032 = nimCopy(null, (makeNimstrLit("-")).concat(cstrToNimstr(res_124203)), NTI138);
		}
		
		L1: do {
			var i_124215 = 0;
			var colontmp__124227 = 0;
			colontmp__124227 = (result_124032 != null ? result_124032.length : 0);
			var i_124230 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_124230 < colontmp__124227)) break L3;
						i_124215 = i_124230;
						if ((ConstSet9[result_124032[i_124215]] != undefined)) {
						result_124032[i_124215] = decimal_sep_124031;
						}
						
						i_124230 += 1;
					}
			} while(false);
		} while(false);

	return result_124032;

}

function insert_21601(x_21604, x_21604_Idx, item_21605, i_21606) {
		var xl_21607 = (x_21604[x_21604_Idx] != null ? x_21604[x_21604_Idx].length : 0);
		x_21604[x_21604_Idx].length = (xl_21607 + (item_21605 != null ? item_21605.length : 0));
		var j_21608 = (xl_21607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_21606 <= j_21608)) break L2;
					x_21604[x_21604_Idx][(j_21608 + (item_21605 != null ? item_21605.length : 0))] = x_21604[x_21604_Idx][j_21608];
					j_21608 -= 1;
				}
		} while(false);
		j_21608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_21608 < (item_21605 != null ? item_21605.length : 0))) break L4;
					x_21604[x_21604_Idx][(j_21608 + i_21606)] = item_21605[j_21608];
					j_21608 += 1;
				}
		} while(false);

	
}

function nsuRepeatChar(c_119984, count_119985) {
	var result_119986 = null;

		result_119986 = nimCopy(null, mnewString(count_119985), NTI138);
		L1: do {
			var i_119998 = 0;
			var colontmp__120000 = 0;
			colontmp__120000 = (count_119985 - 1);
			var res_120003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_120003 <= colontmp__120000)) break L3;
						i_119998 = res_120003;
						result_119986[i_119998] = c_119984;
						res_120003 += 1;
					}
			} while(false);
		} while(false);

	return result_119986;

}

function validate_utf8_46955(s_46957) {
	var result_46958 = 0;

	BeforeRet: do {
		var i_46960 = 0;
		var l_46961 = (s_46957 != null ? s_46957.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_46960 < l_46961)) break L2;
					if ((s_46957[i_46960] <= 127)) {
					i_46960 += 1;
					}
					else {
					if ((((s_46957[i_46960] >>> 0) >>> 5) == 6)) {
					if ((s_46957[i_46960] < 194)) {
					result_46958 = i_46960;
					break BeforeRet;
					}
					
					if ((((i_46960 + 1) < l_46961) && (((s_46957[(i_46960 + 1)] >>> 0) >>> 6) == 2))) {
					i_46960 += 2;
					}
					else {
						result_46958 = i_46960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_46957[i_46960] >>> 0) >>> 4) == 14)) {
					if (((((i_46960 + 2) < l_46961) && (((s_46957[(i_46960 + 1)] >>> 0) >>> 6) == 2)) && (((s_46957[(i_46960 + 2)] >>> 0) >>> 6) == 2))) {
					i_46960 += 3;
					}
					else {
						result_46958 = i_46960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_46957[i_46960] >>> 0) >>> 3) == 30)) {
					if ((((((i_46960 + 3) < l_46961) && (((s_46957[(i_46960 + 1)] >>> 0) >>> 6) == 2)) && (((s_46957[(i_46960 + 2)] >>> 0) >>> 6) == 2)) && (((s_46957[(i_46960 + 3)] >>> 0) >>> 6) == 2))) {
					i_46960 += 4;
					}
					else {
						result_46958 = i_46960;
						break BeforeRet;
					}
					
					}
					else {
						result_46958 = i_46960;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_46958 = -1;
		break BeforeRet;
	} while (false);

	return result_46958;

}

function nucruneLen(s_46507) {
	var result_46508 = 0;

		var i_46510 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_46510 < (s_46507 != null ? s_46507.length : 0))) break L2;
					if ((s_46507[i_46510] <= 127)) {
					i_46510 += 1;
					}
					else {
					if ((((s_46507[i_46510] >>> 0) >>> 5) == 6)) {
					i_46510 += 2;
					}
					else {
					if ((((s_46507[i_46510] >>> 0) >>> 4) == 14)) {
					i_46510 += 3;
					}
					else {
					if ((((s_46507[i_46510] >>> 0) >>> 3) == 30)) {
					i_46510 += 4;
					}
					else {
					if ((((s_46507[i_46510] >>> 0) >>> 2) == 62)) {
					i_46510 += 5;
					}
					else {
					if ((((s_46507[i_46510] >>> 0) >>> 1) == 126)) {
					i_46510 += 6;
					}
					else {
					i_46510 += 1;
					}
					}}}}}
					result_46508 += 1;
				}
		} while(false);

	return result_46508;

}

function align_string_126827(s_126829, minimum_width_126830, align_126831, fill_126832) {
			var Tmp1;

	var result_126833 = null;

		if ((minimum_width_126830 == 0)) {
		result_126833 = nimCopy(null, s_126829, NTI138);
		}
		else {
			if ((validate_utf8_46955(s_126829) == -1)) {
			Tmp1 = nucruneLen(s_126829);
			}
			else {
			Tmp1 = (s_126829 != null ? s_126829.length : 0);
			}
			
			var s_rune_len_126835 = Tmp1;
			var to_fill_126836 = (minimum_width_126830 - s_rune_len_126835);
			if ((to_fill_126836 <= 0)) {
			result_126833 = nimCopy(null, s_126829, NTI138);
			}
			else {
			if (((align_126831 == 60) || (align_126831 == 0))) {
			result_126833 = nimCopy(null, (s_126829).concat(nsuRepeatChar(fill_126832, to_fill_126836)), NTI138);
			}
			else {
			if ((align_126831 == 94)) {
			var half_126837 = Math.trunc(to_fill_126836 / 2);
			result_126833 = nimCopy(null, (nsuRepeatChar(fill_126832, half_126837)).concat(s_126829,nsuRepeatChar(fill_126832, (to_fill_126836 - half_126837))), NTI138);
			}
			else {
				result_126833 = nimCopy(null, (nsuRepeatChar(fill_126832, to_fill_126836)).concat(s_126829), NTI138);
			}
			}}
		}
		

	return result_126833;

}

function nsuToUpperAsciiChar(c_117319) {
	var result_117320 = 0;

		if ((ConstSet11[c_117319] != undefined)) {
		result_117320 = (c_117319 - 32);
		}
		else {
			result_117320 = c_117319;
		}
		

	return result_117320;

}

function nsuToUpperAsciiStr(s_117367) {
	var result_117368 = null;

		result_117368 = nimCopy(null, mnewString((s_117367 != null ? s_117367.length : 0)), NTI138);
		L1: do {
			var i_117383 = 0;
			var colontmp__117391 = 0;
			colontmp__117391 = ((s_117367 != null ? s_117367.length : 0) - 1);
			var res_117394 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_117394 <= colontmp__117391)) break L3;
						i_117383 = res_117394;
						result_117368[i_117383] = nsuToUpperAsciiChar(s_117367[i_117383]);
						res_117394 += 1;
					}
			} while(false);
		} while(false);

	return result_117368;

}

function format_128802(value_128806, specifier_128808, res_128810, res_128810_Idx) {
		var Tmp1;

		var spec_128811 = parse_standard_format_specifier_126928(specifier_128808, 0, false);
		var fmode_128812 = 0;
		switch (spec_128811.typ) {
		case 101:
		case 69:
			fmode_128812 = 2;
			break;
		case 102:
		case 70:
			fmode_128812 = 1;
			break;
		case 103:
		case 71:
			fmode_128812 = 0;
			break;
		case 0:
			break;
		default: 
			var e_128818 = null;
			e_128818 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_128818.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_128811.typ]), NTI138);
			e_128818.parent = null;
			raiseException(e_128818, "ValueError");
			break;
		}
		var f_128827 = [nsuformatBiggestFloat(value_128806, fmode_128812, spec_128811.precision, 46)];
		var sign_128828 = false;
		if ((0.0 <= value_128806)) {
		if (!((spec_128811.sign == 45))) {
		sign_128828 = true;
		if ((value_128806 == 0.0)) {
		if (((1.0000000000000000e+000 / value_128806) == Infinity)) {
		insert_21601(f_128827, 0, nimCharToStr(spec_128811.sign), 0);
		}
		
		}
		else {
		insert_21601(f_128827, 0, nimCharToStr(spec_128811.sign), 0);
		}
		
		}
		
		}
		else {
			sign_128828 = true;
		}
		
		if (spec_128811.padWithZero) {
		var sign_str_128832 = [];
		if (sign_128828) {
		sign_str_128832 = nimCopy(null, nimCharToStr(f_128827[0][0]), NTI138);
		f_128827[0] = nimCopy(null, HEX5BHEX5D_85905(f_128827[0], HEX2EHEX2E_85853(1, 1)), NTI138);
		}
		
		var to_fill_128887 = ((spec_128811.minimumWidth - (f_128827[0] != null ? f_128827[0].length : 0)) - (sign_128828 ? 1:0));
		if ((0 < to_fill_128887)) {
		f_128827[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_128887)).concat(f_128827[0]), NTI138);
		}
		
		if (sign_128828) {
		f_128827[0] = nimCopy(null, (sign_str_128832).concat(f_128827[0]), NTI138);
		}
		
		}
		
		if ((spec_128811.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_128811.align;
		}
		
		var align_128890 = Tmp1;
		var result_128891 = align_string_126827(f_128827[0], spec_128811.minimumWidth, align_128890, spec_128811.fill);
		if ((ConstSet10[spec_128811.typ] != undefined)) {
		if (res_128810[res_128810_Idx] != null) { res_128810[res_128810_Idx] = (res_128810[res_128810_Idx]).concat(nsuToUpperAsciiStr(result_128891)); } else { res_128810[res_128810_Idx] = nsuToUpperAsciiStr(result_128891).slice(); };
		}
		else {
		if (res_128810[res_128810_Idx] != null) { res_128810[res_128810_Idx] = (res_128810[res_128810_Idx]).concat(result_128891); } else { res_128810[res_128810_Idx] = result_128891.slice(); };
		}
		

	
}

function HEX24_128235(v_128237) {
	var result_128238 = null;

		result_128238 = nimCopy(null, makeNimstrLit("["), NTI138);
		L1: do {
			var k_128247 = 0;
			var colontmp__128919 = 0;
			var colontmp__128920 = 0;
			colontmp__128919 = low_128218(v_128237);
			colontmp__128920 = high_128201(v_128237);
			var res_128923 = colontmp__128919;
			L2: do {
					L3: while (true) {
					if (!(res_128923 <= colontmp__128920)) break L3;
						k_128247 = res_128923;
						var fmt_res_128250 = [mnewString(0)];
						format_128802(v_128237.data[k_128247], makeNimstrLit(".04f"), fmt_res_128250, 0);
						if (result_128238 != null) { result_128238 = (result_128238).concat(fmt_res_128250[0]); } else { result_128238 = fmt_res_128250[0].slice(); };
						if (!((k_128247 == high_128201(v_128237)))) {
						if (result_128238 != null) { result_128238 = (result_128238).concat(makeNimstrLit(", ")); } else { result_128238 = makeNimstrLit(", "); };
						}
						
						res_128923 += 1;
					}
			} while(false);
		} while(false);
		if (result_128238 != null) { result_128238 = (result_128238).concat(makeNimstrLit("]")); } else { result_128238 = makeNimstrLit("]"); };

	return result_128238;

}

function format_133402(value_133406, specifier_133408, res_133410, res_133410_Idx) {
		var Tmp1;

		var spec_133411 = parse_standard_format_specifier_126928(specifier_133408, 0, false);
		var fmode_133412 = 0;
		switch (spec_133411.typ) {
		case 101:
		case 69:
			fmode_133412 = 2;
			break;
		case 102:
		case 70:
			fmode_133412 = 1;
			break;
		case 103:
		case 71:
			fmode_133412 = 0;
			break;
		case 0:
			break;
		default: 
			var e_133418 = null;
			e_133418 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_133418.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_133411.typ]), NTI138);
			e_133418.parent = null;
			raiseException(e_133418, "ValueError");
			break;
		}
		var f_133427 = [nsuformatBiggestFloat(value_133406, fmode_133412, spec_133411.precision, 46)];
		var sign_133428 = false;
		if ((0.0 <= value_133406)) {
		if (!((spec_133411.sign == 45))) {
		sign_133428 = true;
		if ((value_133406 == 0.0)) {
		if (((1.0000000000000000e+000 / value_133406) == Infinity)) {
		insert_21601(f_133427, 0, nimCharToStr(spec_133411.sign), 0);
		}
		
		}
		else {
		insert_21601(f_133427, 0, nimCharToStr(spec_133411.sign), 0);
		}
		
		}
		
		}
		else {
			sign_133428 = true;
		}
		
		if (spec_133411.padWithZero) {
		var sign_str_133432 = [];
		if (sign_133428) {
		sign_str_133432 = nimCopy(null, nimCharToStr(f_133427[0][0]), NTI138);
		f_133427[0] = nimCopy(null, HEX5BHEX5D_85905(f_133427[0], HEX2EHEX2E_85853(1, 1)), NTI138);
		}
		
		var to_fill_133487 = ((spec_133411.minimumWidth - (f_133427[0] != null ? f_133427[0].length : 0)) - (sign_133428 ? 1:0));
		if ((0 < to_fill_133487)) {
		f_133427[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_133487)).concat(f_133427[0]), NTI138);
		}
		
		if (sign_133428) {
		f_133427[0] = nimCopy(null, (sign_str_133432).concat(f_133427[0]), NTI138);
		}
		
		}
		
		if ((spec_133411.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_133411.align;
		}
		
		var align_133490 = Tmp1;
		var result_133491 = align_string_126827(f_133427[0], spec_133411.minimumWidth, align_133490, spec_133411.fill);
		if ((ConstSet12[spec_133411.typ] != undefined)) {
		if (res_133410[res_133410_Idx] != null) { res_133410[res_133410_Idx] = (res_133410[res_133410_Idx]).concat(nsuToUpperAsciiStr(result_133491)); } else { res_133410[res_133410_Idx] = nsuToUpperAsciiStr(result_133491).slice(); };
		}
		else {
		if (res_133410[res_133410_Idx] != null) { res_133410[res_133410_Idx] = (res_133410[res_133410_Idx]).concat(result_133491); } else { res_133410[res_133410_Idx] = result_133491.slice(); };
		}
		

	
}

function HEX24_132823(params_132825) {
	var result_132826 = null;

		var fmt_res_132830 = [mnewString(0)];
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit("    slope: ")); } else { fmt_res_132830[0] = makeNimstrLit("    slope: "); };
		format_133402(params_132825.slope, makeNimstrLit(".3f"), fmt_res_132830, 0);
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_132830[0] = makeNimstrLit(" (var: "); };
		format_133402(params_132825.slope_variance, makeNimstrLit(".3f"), fmt_res_132830, 0);
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_132830[0] = makeNimstrLit(", CI width: "); };
		format_133402(params_132825.slope_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_132830, 0);
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit(")\x0A    intercept: ")); } else { fmt_res_132830[0] = makeNimstrLit(")\x0A    intercept: "); };
		format_133402(params_132825.intercept, makeNimstrLit(".3f"), fmt_res_132830, 0);
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_132830[0] = makeNimstrLit(" (var: "); };
		format_133402(params_132825.intercept_variance, makeNimstrLit(".3f"), fmt_res_132830, 0);
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_132830[0] = makeNimstrLit(", CI width: "); };
		format_133402(params_132825.intercept_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_132830, 0);
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit(")\x0A    R2: ")); } else { fmt_res_132830[0] = makeNimstrLit(")\x0A    R2: "); };
		format_133402(params_132825.R2, makeNimstrLit(".3f"), fmt_res_132830, 0);
		if (fmt_res_132830[0] != null) { fmt_res_132830[0] = (fmt_res_132830[0]).concat(makeNimstrLit("\x0A    SSE: ")); } else { fmt_res_132830[0] = makeNimstrLit("\x0A    SSE: "); };
		format_133402(params_132825.residual_sum_squares, makeNimstrLit(".3f"), fmt_res_132830, 0);
		result_132826 = nimCopy(null, fmt_res_132830[0], NTI138);

	return result_132826;

}

function test_linear_regression_160001() {
		var x0_160005 = vector_128111([1.4700000000000000e+000, 1.5000000000000000e+000, 1.5200000000000000e+000, 1.5500000000000000e+000, 1.5700000000000001e+000, 1.6000000000000001e+000, 1.6299999999999999e+000, 1.6499999999999999e+000, 1.6799999999999999e+000, 1.7000000000000000e+000, 1.7300000000000000e+000, 1.7500000000000000e+000, 1.7800000000000000e+000, 1.8000000000000000e+000, 1.8300000000000001e+000]);
		var y0_160008 = vector_128111([5.2210000000000001e+001, 5.3119999999999997e+001, 5.4479999999999997e+001, 5.5840000000000003e+001, 5.7200000000000003e+001, 5.8570000000000000e+001, 5.9930000000000000e+001, 6.1289999999999999e+001, 6.3109999999999999e+001, 6.4469999999999999e+001, 6.6280000000000001e+001, 6.8099999999999994e+001, 6.9920000000000002e+001, 7.2189999999999998e+001, 7.4459999999999994e+001]);
		var slr0_160009 = simple_linear_regression(x0_160005, y0_160008);
		var fmt_res_160012 = mnewString(0);
		if (fmt_res_160012 != null) { fmt_res_160012 = (fmt_res_160012).concat(makeNimstrLit("X: ")); } else { fmt_res_160012 = makeNimstrLit("X: "); };
		if (fmt_res_160012 != null) { fmt_res_160012 = (fmt_res_160012).concat(HEX24_128235(x0_160005)); } else { fmt_res_160012 = HEX24_128235(x0_160005).slice(); };
		rawEcho(fmt_res_160012);
		var fmt_res_160206 = mnewString(0);
		if (fmt_res_160206 != null) { fmt_res_160206 = (fmt_res_160206).concat(makeNimstrLit("Y: ")); } else { fmt_res_160206 = makeNimstrLit("Y: "); };
		if (fmt_res_160206 != null) { fmt_res_160206 = (fmt_res_160206).concat(HEX24_128235(y0_160008)); } else { fmt_res_160206 = HEX24_128235(y0_160008).slice(); };
		rawEcho(fmt_res_160206);
		rawEcho(HEX24_132823(slr0_160009));

	
}

function test_linear_regression_wo_intercept_161814() {
		var x0_161818 = vector_128111([1.4700000000000000e+000, 1.5000000000000000e+000, 1.5200000000000000e+000, 1.5500000000000000e+000, 1.5700000000000001e+000, 1.6000000000000001e+000, 1.6299999999999999e+000, 1.6499999999999999e+000, 1.6799999999999999e+000, 1.7000000000000000e+000, 1.7300000000000000e+000, 1.7500000000000000e+000, 1.7800000000000000e+000, 1.8000000000000000e+000, 1.8300000000000001e+000]);
		var y0_161821 = vector_128111([5.2210000000000001e+001, 5.3119999999999997e+001, 5.4479999999999997e+001, 5.5840000000000003e+001, 5.7200000000000003e+001, 5.8570000000000000e+001, 5.9930000000000000e+001, 6.1289999999999999e+001, 6.3109999999999999e+001, 6.4469999999999999e+001, 6.6280000000000001e+001, 6.8099999999999994e+001, 6.9920000000000002e+001, 7.2189999999999998e+001, 7.4459999999999994e+001]);
		var slr0_161822 = simple_linear_regression_wo_intercept(x0_161818, y0_161821);
		var fmt_res_161825 = mnewString(0);
		if (fmt_res_161825 != null) { fmt_res_161825 = (fmt_res_161825).concat(makeNimstrLit("X: ")); } else { fmt_res_161825 = makeNimstrLit("X: "); };
		if (fmt_res_161825 != null) { fmt_res_161825 = (fmt_res_161825).concat(HEX24_128235(x0_161818)); } else { fmt_res_161825 = HEX24_128235(x0_161818).slice(); };
		rawEcho(fmt_res_161825);
		var fmt_res_162006 = mnewString(0);
		if (fmt_res_162006 != null) { fmt_res_162006 = (fmt_res_162006).concat(makeNimstrLit("Y: ")); } else { fmt_res_162006 = makeNimstrLit("Y: "); };
		if (fmt_res_162006 != null) { fmt_res_162006 = (fmt_res_162006).concat(HEX24_128235(y0_161821)); } else { fmt_res_162006 = HEX24_128235(y0_161821).slice(); };
		rawEcho(fmt_res_162006);
		rawEcho(HEX24_132823(slr0_161822));
		rawEcho(cstrToNimstr((Math.abs((slr0_161822.slope_width_confidence_interval - 1.8710000000000000e+000)))+""));

	
}

function rotl_140015(x_140017, k_140018) {
	var result_140019 = 0;

		result_140019 = ((x_140017 << k_140018) | ((x_140017 >>> 0) >>> ((64 - k_140018) >>> 0)));

	return result_140019;

}

function next_140067(r_140070) {
	var result_140071 = 0;

		var s0_140072 = r_140070.a0;
		var s1_140073 = r_140070.a1;
		result_140071 = ((s0_140072 + s1_140073) >>> 0);
		s1_140073 = (s1_140073 ^ s0_140072);
		r_140070.a0 = ((rotl_140015(s0_140072, 55) ^ s1_140073) ^ (s1_140073 << 14));
		r_140070.a1 = rotl_140015(s1_140073, 36);

	return result_140071;

}

function rand_140448(r_140451, max_140452) {
	var result_140453 = 0;

	BeforeRet: do {
		if ((max_140452 == 0)) {
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var x_140454 = next_140067(r_140451);
					if ((x_140454 <= ((4294967295 - (4294967295 % max_140452)) >>> 0))) {
					result_140453 = (((x_140454 % ((max_140452 + 1) )))|0);
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);

	return result_140453;

}

function rand_140512(max_140514) {
	var result_140515 = 0;

		result_140515 = rand_140448(state_139805[0], max_140514);

	return result_140515;

}

function add_quoted_165802(s_165806, s_165806_Idx, x_165808) {
		if (s_165806[s_165806_Idx] != null) { s_165806[s_165806_Idx] = (s_165806[s_165806_Idx]).concat(HEX24_132823(x_165808)); } else { s_165806[s_165806_Idx] = HEX24_132823(x_165808).slice(); };

	
}

function HEX24_165602(x_165606) {
	var result_165607 = [null];

		result_165607[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_165608 = true;
		if (!(first_element_165608)) {
		if (result_165607[0] != null) { result_165607[0] = (result_165607[0]).concat(makeNimstrLit(", ")); } else { result_165607[0] = makeNimstrLit(", "); };
		}
		
		if (result_165607[0] != null) { result_165607[0] = (result_165607[0]).concat(makeNimstrLit("mean_structure")); } else { result_165607[0] = makeNimstrLit("mean_structure"); };
		if (result_165607[0] != null) { result_165607[0] = (result_165607[0]).concat(makeNimstrLit(": ")); } else { result_165607[0] = makeNimstrLit(": "); };
		add_quoted_165802(result_165607, 0, x_165606.mean_structure);
		first_element_165608 = false;
		if (!(first_element_165608)) {
		if (result_165607[0] != null) { result_165607[0] = (result_165607[0]).concat(makeNimstrLit(", ")); } else { result_165607[0] = makeNimstrLit(", "); };
		}
		
		if (result_165607[0] != null) { result_165607[0] = (result_165607[0]).concat(makeNimstrLit("autoregressive_structure")); } else { result_165607[0] = makeNimstrLit("autoregressive_structure"); };
		if (result_165607[0] != null) { result_165607[0] = (result_165607[0]).concat(makeNimstrLit(": ")); } else { result_165607[0] = makeNimstrLit(": "); };
		add_quoted_165802(result_165607, 0, x_165606.autoregressive_structure);
		first_element_165608 = false;
		if (result_165607[0] != null) { result_165607[0] = (result_165607[0]).concat(makeNimstrLit(")")); } else { result_165607[0] = makeNimstrLit(")"); };

	return result_165607[0];

}

function add_quoted_165402(s_165406, s_165406_Idx, x_165408) {
		if (s_165406[s_165406_Idx] != null) { s_165406[s_165406_Idx] = (s_165406[s_165406_Idx]).concat(HEX24_165602(x_165408)); } else { s_165406[s_165406_Idx] = HEX24_165602(x_165408).slice(); };

	
}

function add_quoted_174802(s_174806, s_174806_Idx, x_174808) {
		if (s_174806[s_174806_Idx] != null) { s_174806[s_174806_Idx] = (s_174806[s_174806_Idx]).concat(cstrToNimstr((x_174808)+"")); } else { s_174806[s_174806_Idx] = cstrToNimstr((x_174808)+"").slice(); };

	
}

function collection_to_string_174411(x_174415, prefix_174417, separator_174419, suffix_174421) {
	var result_174422 = [null];

		result_174422[0] = nimCopy(null, prefix_174417, NTI138);
		var first_element_174423 = true;
		L1: do {
			var value_174615 = 0;
			var i_175018 = 0;
			var l_175020 = (x_174415 != null ? x_174415.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_175018 < l_175020)) break L3;
						value_174615 = x_174415[i_175018];
						if (first_element_174423) {
						first_element_174423 = false;
						}
						else {
						if (result_174422[0] != null) { result_174422[0] = (result_174422[0]).concat(separator_174419); } else { result_174422[0] = separator_174419.slice(); };
						}
						
						add_quoted_174802(result_174422, 0, value_174615);
						i_175018 += 1;
					}
			} while(false);
		} while(false);
		if (result_174422[0] != null) { result_174422[0] = (result_174422[0]).concat(suffix_174421); } else { result_174422[0] = suffix_174421.slice(); };

	return result_174422[0];

}

function HEX24_174403(x_174408) {
	var result_174409 = null;

		result_174409 = nimCopy(null, collection_to_string_174411(x_174408, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_174409;

}

function add_quoted_174202(s_174206, s_174206_Idx, x_174208) {
		if (s_174206[s_174206_Idx] != null) { s_174206[s_174206_Idx] = (s_174206[s_174206_Idx]).concat(HEX24_174403(x_174208)); } else { s_174206[s_174206_Idx] = HEX24_174403(x_174208).slice(); };

	
}

function add_quoted_176602(s_176606, s_176606_Idx, x_176608) {
		if (s_176606[s_176606_Idx] != null) { s_176606[s_176606_Idx] = (s_176606[s_176606_Idx]).concat(cstrToNimstr((x_176608)+"")); } else { s_176606[s_176606_Idx] = cstrToNimstr((x_176608)+"").slice(); };

	
}

function collection_to_string_176211(x_176215, prefix_176217, separator_176219, suffix_176221) {
	var result_176222 = [null];

		result_176222[0] = nimCopy(null, prefix_176217, NTI138);
		var first_element_176223 = true;
		L1: do {
			var value_176415 = 0.0;
			var i_176818 = 0;
			var l_176820 = (x_176215 != null ? x_176215.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_176818 < l_176820)) break L3;
						value_176415 = x_176215[i_176818];
						if (first_element_176223) {
						first_element_176223 = false;
						}
						else {
						if (result_176222[0] != null) { result_176222[0] = (result_176222[0]).concat(separator_176219); } else { result_176222[0] = separator_176219.slice(); };
						}
						
						add_quoted_176602(result_176222, 0, value_176415);
						i_176818 += 1;
					}
			} while(false);
		} while(false);
		if (result_176222[0] != null) { result_176222[0] = (result_176222[0]).concat(suffix_176221); } else { result_176222[0] = suffix_176221.slice(); };

	return result_176222[0];

}

function HEX24_176203(x_176208) {
	var result_176209 = null;

		result_176209 = nimCopy(null, collection_to_string_176211(x_176208, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_176209;

}

function add_quoted_176002(s_176006, s_176006_Idx, x_176008) {
		if (s_176006[s_176006_Idx] != null) { s_176006[s_176006_Idx] = (s_176006[s_176006_Idx]).concat(HEX24_176203(x_176008)); } else { s_176006[s_176006_Idx] = HEX24_176203(x_176008).slice(); };

	
}

function HEX24_173402(x_173406) {
	var result_173407 = [null];

		result_173407[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_173408 = true;
		if (!(first_element_173408)) {
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(", ")); } else { result_173407[0] = makeNimstrLit(", "); };
		}
		
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit("change_points")); } else { result_173407[0] = makeNimstrLit("change_points"); };
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(": ")); } else { result_173407[0] = makeNimstrLit(": "); };
		add_quoted_174202(result_173407, 0, x_173406.change_points);
		first_element_173408 = false;
		if (!(first_element_173408)) {
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(", ")); } else { result_173407[0] = makeNimstrLit(", "); };
		}
		
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit("loglikelihood")); } else { result_173407[0] = makeNimstrLit("loglikelihood"); };
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(": ")); } else { result_173407[0] = makeNimstrLit(": "); };
		add_quoted_176002(result_173407, 0, x_173406.loglikelihood);
		first_element_173408 = false;
		if (!(first_element_173408)) {
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(", ")); } else { result_173407[0] = makeNimstrLit(", "); };
		}
		
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit("best_loglikelihood")); } else { result_173407[0] = makeNimstrLit("best_loglikelihood"); };
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(": ")); } else { result_173407[0] = makeNimstrLit(": "); };
		add_quoted_176602(result_173407, 0, x_173406.best_loglikelihood);
		first_element_173408 = false;
		if (!(first_element_173408)) {
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(", ")); } else { result_173407[0] = makeNimstrLit(", "); };
		}
		
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit("best_likelihood")); } else { result_173407[0] = makeNimstrLit("best_likelihood"); };
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(": ")); } else { result_173407[0] = makeNimstrLit(": "); };
		add_quoted_176602(result_173407, 0, x_173406.best_likelihood);
		first_element_173408 = false;
		if (!(first_element_173408)) {
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(", ")); } else { result_173407[0] = makeNimstrLit(", "); };
		}
		
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit("best_time")); } else { result_173407[0] = makeNimstrLit("best_time"); };
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(": ")); } else { result_173407[0] = makeNimstrLit(": "); };
		add_quoted_174802(result_173407, 0, x_173406.best_time);
		first_element_173408 = false;
		if (result_173407[0] != null) { result_173407[0] = (result_173407[0]).concat(makeNimstrLit(")")); } else { result_173407[0] = makeNimstrLit(")"); };

	return result_173407[0];

}

function add_quoted_173202(s_173206, s_173206_Idx, x_173208) {
		if (s_173206[s_173206_Idx] != null) { s_173206[s_173206_Idx] = (s_173206[s_173206_Idx]).concat(HEX24_173402(x_173208)); } else { s_173206[s_173206_Idx] = HEX24_173402(x_173208).slice(); };

	
}

function HEX24_164221(x_164225) {
	var result_164226 = [null];

		result_164226[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_164227 = true;
		if (!(first_element_164227)) {
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit(", ")); } else { result_164226[0] = makeNimstrLit(", "); };
		}
		
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit("before_change")); } else { result_164226[0] = makeNimstrLit("before_change"); };
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit(": ")); } else { result_164226[0] = makeNimstrLit(": "); };
		add_quoted_165402(result_164226, 0, x_164225.before_change);
		first_element_164227 = false;
		if (!(first_element_164227)) {
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit(", ")); } else { result_164226[0] = makeNimstrLit(", "); };
		}
		
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit("after_change")); } else { result_164226[0] = makeNimstrLit("after_change"); };
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit(": ")); } else { result_164226[0] = makeNimstrLit(": "); };
		add_quoted_165402(result_164226, 0, x_164225.after_change);
		first_element_164227 = false;
		if (!(first_element_164227)) {
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit(", ")); } else { result_164226[0] = makeNimstrLit(", "); };
		}
		
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit("likelihood")); } else { result_164226[0] = makeNimstrLit("likelihood"); };
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit(": ")); } else { result_164226[0] = makeNimstrLit(": "); };
		add_quoted_173202(result_164226, 0, x_164225.likelihood);
		first_element_164227 = false;
		if (result_164226[0] != null) { result_164226[0] = (result_164226[0]).concat(makeNimstrLit(")")); } else { result_164226[0] = makeNimstrLit(")"); };

	return result_164226[0];

}

function test_model_163654(change_point_163658, candidates_163660, verbose_163662) {
		var x_163666 = new Float64Array(100);
		var y_163670 = new Float64Array(100);
		var x0_163671 = {length: 0, data: null};
		var y0_163672 = {length: 0, data: null};
		L1: do {
			var t_163687 = 0;
			var res_178422 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_178422 <= 99)) break L3;
						t_163687 = res_178422;
						x_163666[t_163687] = t_163687;
						y_163670[t_163687] = ((t_163687 * 1.0000000000000000e+001) + (rand_140512(1000) / 1.0000000000000000e+003));
						res_178422 += 1;
					}
			} while(false);
		} while(false);
		nimCopy(x0_163671, vector_128111(x_163666), NTI128017);
		nimCopy(y0_163672, vector_128111(y_163670), NTI128017);
		if (verbose_163662) {
		var fmt_res_163695 = mnewString(0);
		if (fmt_res_163695 != null) { fmt_res_163695 = (fmt_res_163695).concat(makeNimstrLit("X: ")); } else { fmt_res_163695 = makeNimstrLit("X: "); };
		if (fmt_res_163695 != null) { fmt_res_163695 = (fmt_res_163695).concat(HEX24_128235(HEX5BHEX5D_129614(x0_163671, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_163695 = HEX24_128235(HEX5BHEX5D_129614(x0_163671, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_163695);
		var fmt_res_164019 = mnewString(0);
		if (fmt_res_164019 != null) { fmt_res_164019 = (fmt_res_164019).concat(makeNimstrLit("Y: ")); } else { fmt_res_164019 = makeNimstrLit("Y: "); };
		if (fmt_res_164019 != null) { fmt_res_164019 = (fmt_res_164019).concat(HEX24_128235(HEX5BHEX5D_129614(y0_163672, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_164019 = HEX24_128235(HEX5BHEX5D_129614(y0_163672, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_164019);
		}
		
		var candidates_after_164217 = candidates_163660;
		var candidates_before_164218 = candidates_163660;
		var model_164219 = robust_interrupted_time_series_138165(x0_163671, y0_163672, change_point_163658, candidates_before_164218, candidates_after_164217);
		if (verbose_163662) {
		rawEcho(HEX24_164221(model_164219));
		}
		

	
}

function test_model_100_163648(verbose_163650) {
		test_model_163654(50, 5, verbose_163650);

	
}

function new_seq_146621(len_146625) {
	var result_146627 = null;

		result_146627 = new Array(len_146625); for (var i=0;i<len_146625;++i) {result_146627[i]=null;}
	return result_146627;

}

function inc_144536(a_144539, a_144539_Idx, b_144540) {
		a_144539[a_144539_Idx] += b_144540;

	
}

function convert_145126(unit_from_145130, unit_to_145132, quantity_145134) {
		var Tmp1;

	var result_145135 = 0;

		if ((unit_from_145130 < unit_to_145132)) {
		Tmp1 = Math.trunc(quantity_145134 / Math.trunc(unit_weights_145017[unit_to_145132] / unit_weights_145017[unit_from_145130]));
		}
		else {
		Tmp1 = HEX2A_144401(Math.trunc(unit_weights_145017[unit_from_145130] / unit_weights_145017[unit_to_145132]), quantity_145134);
		}
		
		result_145135 = Tmp1;

	return result_145135;

}

function to_parts_146310(dur_146312) {
			var Tmp1;

	var result_146313 = [0, 0, 0, 0, 0, 0, 0, 0];

		var rem_s_146314 = [dur_146312.seconds];
		var rem_ns_146315 = dur_146312.nanosecond;
			if (!(rem_s_146314[0] < 0)) Tmp1 = false; else {				Tmp1 = !((rem_ns_146315 == 0));			}		if (Tmp1) {
		rem_ns_146315 -= convert_145453(3, 0, 1);
		inc_144536(rem_s_146314, 0, 1);
		}
		
		L2: do {
			var unit_146427 = 0;
			var res_146487 = 7;
			L3: do {
					L4: while (true) {
					if (!(3 <= res_146487)) break L4;
						unit_146427 = res_146487;
						var quantity_146438 = convert_145126(3, unit_146427, rem_s_146314[0]);
						rem_s_146314[0] = Math.trunc(rem_s_146314[0] % convert_145453(unit_146427, 3, 1));
						result_146313[unit_146427] = quantity_146438;
						res_146487 -= 1;
					}
			} while(false);
		} while(false);
		L5: do {
			var unit_146460 = 0;
			var res_146493 = 2;
			L6: do {
					L7: while (true) {
					if (!(0 <= res_146493)) break L7;
						unit_146460 = res_146493;
						var quantity_146471 = convert_145453(0, unit_146460, rem_ns_146315);
						rem_ns_146315 = Math.trunc(rem_ns_146315 % convert_145453(unit_146460, 0, 1));
						result_146313[unit_146460] = quantity_146471;
						res_146493 -= 1;
					}
			} while(false);
		} while(false);

	return result_146313;

}

function is_undefined_18485(x_18489) {
	var result_18490 = false;

		result_18490 = x_18489 === undefined;

	return result_18490;

}

function nsuToLowerAsciiChar(c_117213) {
	var result_117214 = 0;

		if ((ConstSet13[c_117213] != undefined)) {
		result_117214 = (c_117213 + 32);
		}
		else {
			result_117214 = c_117213;
		}
		

	return result_117214;

}

function nsuToLowerAsciiStr(s_117273) {
	var result_117274 = null;

		result_117274 = nimCopy(null, mnewString((s_117273 != null ? s_117273.length : 0)), NTI138);
		L1: do {
			var i_117289 = 0;
			var colontmp__117297 = 0;
			colontmp__117297 = ((s_117273 != null ? s_117273.length : 0) - 1);
			var res_117300 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_117300 <= colontmp__117297)) break L3;
						i_117289 = res_117300;
						result_117274[i_117289] = nsuToLowerAsciiChar(s_117273[i_117289]);
						res_117300 += 1;
					}
			} while(false);
		} while(false);

	return result_117274;

}

function stringify_unit_146674(value_146678, unit_146680) {
	var result_146681 = null;

		var str_unit_146688 = reprEnum(unit_146680, NTI144826);
		result_146681 = nimCopy(null, [], NTI138);
		if (result_146681 != null) { result_146681 = (result_146681).concat(cstrToNimstr((value_146678)+"")); } else { result_146681 = cstrToNimstr((value_146678)+"").slice(); };
		if (result_146681 != null) { result_146681 = (result_146681).concat(makeNimstrLit(" ")); } else { result_146681 = makeNimstrLit(" "); };
		if (!((Math.abs(value_146678) == 1))) {
		if (result_146681 != null) { result_146681 = (result_146681).concat(nsuToLowerAsciiStr(str_unit_146688)); } else { result_146681 = nsuToLowerAsciiStr(str_unit_146688).slice(); };
		}
		else {
		if (result_146681 != null) { result_146681 = (result_146681).concat(nsuToLowerAsciiStr(HEX5BHEX5D_85905(str_unit_146688, HEX2EHEX2E_85853(0, 2)))); } else { result_146681 = nsuToLowerAsciiStr(HEX5BHEX5D_85905(str_unit_146688, HEX2EHEX2E_85853(0, 2))).slice(); };
		}
		

	return result_146681;

}

function HEX2D_144491(a_144493, b_144494) {
	var result_144495 = 0;

		result_144495 = (a_144493 - b_144494);

	return result_144495;

}

function humanize_parts_146528(parts_146531) {
	var result_146532 = null;

		result_146532 = nimCopy(null, [], NTI138);
		if (((parts_146531 != null ? parts_146531.length : 0) == 0)) {
		if (result_146532 != null) { result_146532 = (result_146532).concat(makeNimstrLit("0 nanoseconds")); } else { result_146532 = makeNimstrLit("0 nanoseconds"); };
		}
		else {
		if (((parts_146531 != null ? parts_146531.length : 0) == 1)) {
		result_146532 = nimCopy(null, parts_146531[0], NTI138);
		}
		else {
		if (((parts_146531 != null ? parts_146531.length : 0) == 2)) {
		result_146532 = nimCopy(null, (parts_146531[0]).concat(makeNimstrLit(" and "),parts_146531[1]), NTI138);
		}
		else {
			L1: do {
				var i_146573 = 0;
				var colontmp__146583 = 0;
				colontmp__146583 = HEX2D_144491((parts_146531 != null ? (parts_146531.length-1) : -1), 1);
				var res_146586 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_146586 <= colontmp__146583)) break L3;
							i_146573 = res_146586;
							if (result_146532 != null) { result_146532 = (result_146532).concat((parts_146531[i_146573]).concat(makeNimstrLit(", "))); } else { result_146532 = (parts_146531[i_146573]).concat(makeNimstrLit(", ")).slice(); };
							res_146586 += 1;
						}
				} while(false);
			} while(false);
			if (result_146532 != null) { result_146532 = (result_146532).concat((makeNimstrLit("and ")).concat(parts_146531[(parts_146531 != null ? (parts_146531.length-1) : -1)])); } else { result_146532 = (makeNimstrLit("and ")).concat(parts_146531[(parts_146531 != null ? (parts_146531.length-1) : -1)]).slice(); };
		}
		}}

	return result_146532;

}

function HEX24_146603(dur_146605) {
	var result_146606 = null;

		var parts_146659 = new_seq_146621(0);
		var num_parts_146660 = to_parts_146310(dur_146605);
		L1: do {
			var unit_146671 = 0;
			var res_146761 = 7;
			L2: do {
					L3: while (true) {
					if (!(0 <= res_146761)) break L3;
						unit_146671 = res_146761;
						var quantity_146672 = num_parts_146660[unit_146671];
						if (!((quantity_146672 == 0))) {
						if (parts_146659 != null) { parts_146659.push(stringify_unit_146674(quantity_146672, unit_146671)); } else { parts_146659 = [stringify_unit_146674(quantity_146672, unit_146671)]; };
						}
						
						res_146761 -= 1;
					}
			} while(false);
		} while(false);
		result_146606 = nimCopy(null, humanize_parts_146528(parts_146659), NTI138);

	return result_146606;

}

function HEX2B_144437(a_144439, b_144440) {
	var result_144441 = 0;

		result_144441 = (a_144439 + b_144440);

	return result_144441;

}

function normalize_146211(seconds_146215, nanoseconds_146217) {
	var result_146218 = {seconds: 0, nanosecond: 0};

		result_146218.seconds = HEX2B_144437(seconds_146215, convert_145126(0, 3, nanoseconds_146217));
		var nanosecond_146240 = Math.trunc(nanoseconds_146217 % convert_145453(3, 0, 1));
		if ((nanosecond_146240 < 0)) {
		nanosecond_146240 += convert_145453(3, 0, 1);
		result_146218.seconds -= 1;
		}
		
		result_146218.nanosecond = nanosecond_146240;

	return result_146218;

}

function HEX2D_144473(a_144475, b_144476) {
	var result_144477 = 0;

		result_144477 = (a_144475 - b_144476);

	return result_144477;

}

function ntDiffTime(a_147034, b_147035) {
	var result_147036 = {seconds: 0, nanosecond: 0};

		nimCopy(result_147036, normalize_146211(HEX2D_144473(a_147034.seconds, b_147035.seconds), HEX2D_144491(a_147034.nanosecond, b_147035.nanosecond)), NTI144824);

	return result_147036;

}

function test_model_179072(change_point_179076, candidates_179078, verbose_179080) {
		var x_179084 = new Float64Array(200);
		var y_179088 = new Float64Array(200);
		var x0_179089 = {length: 0, data: null};
		var y0_179090 = {length: 0, data: null};
		L1: do {
			var t_179105 = 0;
			var res_179634 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_179634 <= 199)) break L3;
						t_179105 = res_179634;
						x_179084[t_179105] = t_179105;
						y_179088[t_179105] = ((t_179105 * 1.0000000000000000e+001) + (rand_140512(1000) / 1.0000000000000000e+003));
						res_179634 += 1;
					}
			} while(false);
		} while(false);
		nimCopy(x0_179089, vector_128111(x_179084), NTI128017);
		nimCopy(y0_179090, vector_128111(y_179088), NTI128017);
		if (verbose_179080) {
		var fmt_res_179113 = mnewString(0);
		if (fmt_res_179113 != null) { fmt_res_179113 = (fmt_res_179113).concat(makeNimstrLit("X: ")); } else { fmt_res_179113 = makeNimstrLit("X: "); };
		if (fmt_res_179113 != null) { fmt_res_179113 = (fmt_res_179113).concat(HEX24_128235(HEX5BHEX5D_129614(x0_179089, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_179113 = HEX24_128235(HEX5BHEX5D_129614(x0_179089, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_179113);
		var fmt_res_179419 = mnewString(0);
		if (fmt_res_179419 != null) { fmt_res_179419 = (fmt_res_179419).concat(makeNimstrLit("Y: ")); } else { fmt_res_179419 = makeNimstrLit("Y: "); };
		if (fmt_res_179419 != null) { fmt_res_179419 = (fmt_res_179419).concat(HEX24_128235(HEX5BHEX5D_129614(y0_179090, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_179419 = HEX24_128235(HEX5BHEX5D_129614(y0_179090, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_179419);
		}
		
		var candidates_after_179617 = candidates_179078;
		var candidates_before_179618 = candidates_179078;
		var model_179619 = robust_interrupted_time_series_138165(x0_179089, y0_179090, change_point_179076, candidates_before_179618, candidates_after_179617);
		if (verbose_179080) {
		rawEcho(HEX24_164221(model_179619));
		}
		

	
}

function test_model_200_179066(verbose_179068) {
		test_model_179072(100, 99, verbose_179068);

	
}

function test_model_178459(change_point_178463, candidates_178465, verbose_178467) {
		var x_178471 = new Float64Array(500);
		var y_178475 = new Float64Array(500);
		var x0_178476 = {length: 0, data: null};
		var y0_178477 = {length: 0, data: null};
		L1: do {
			var t_178492 = 0;
			var res_179034 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_179034 <= 499)) break L3;
						t_178492 = res_179034;
						x_178471[t_178492] = t_178492;
						y_178475[t_178492] = ((t_178492 * 1.0000000000000000e+001) + (rand_140512(1000) / 1.0000000000000000e+003));
						res_179034 += 1;
					}
			} while(false);
		} while(false);
		nimCopy(x0_178476, vector_128111(x_178471), NTI128017);
		nimCopy(y0_178477, vector_128111(y_178475), NTI128017);
		if (verbose_178467) {
		var fmt_res_178500 = mnewString(0);
		if (fmt_res_178500 != null) { fmt_res_178500 = (fmt_res_178500).concat(makeNimstrLit("X: ")); } else { fmt_res_178500 = makeNimstrLit("X: "); };
		if (fmt_res_178500 != null) { fmt_res_178500 = (fmt_res_178500).concat(HEX24_128235(HEX5BHEX5D_129614(x0_178476, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_178500 = HEX24_128235(HEX5BHEX5D_129614(x0_178476, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_178500);
		var fmt_res_178819 = mnewString(0);
		if (fmt_res_178819 != null) { fmt_res_178819 = (fmt_res_178819).concat(makeNimstrLit("Y: ")); } else { fmt_res_178819 = makeNimstrLit("Y: "); };
		if (fmt_res_178819 != null) { fmt_res_178819 = (fmt_res_178819).concat(HEX24_128235(HEX5BHEX5D_129614(y0_178477, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_178819 = HEX24_128235(HEX5BHEX5D_129614(y0_178477, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_178819);
		}
		
		var candidates_after_179017 = candidates_178465;
		var candidates_before_179018 = candidates_178465;
		var model_179019 = robust_interrupted_time_series_138165(x0_178476, y0_178477, change_point_178463, candidates_before_179018, candidates_after_179017);
		if (verbose_178467) {
		rawEcho(HEX24_164221(model_179019));
		}
		

	
}

function test_model_500_178453(verbose_178455) {
		test_model_178459(250, 5, verbose_178455);

	
}

function test_model_500_100_179667(verbose_179669) {
		test_model_178459(250, 100, verbose_179669);

	
}

function test_model_179703(change_point_179707, candidates_179709, verbose_179711) {
		var x_179715 = new Float64Array(5000);
		var y_179719 = new Float64Array(5000);
		var x0_179720 = {length: 0, data: null};
		var y0_179721 = {length: 0, data: null};
		L1: do {
			var t_179736 = 0;
			var res_180234 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_180234 <= 4999)) break L3;
						t_179736 = res_180234;
						x_179715[t_179736] = t_179736;
						y_179719[t_179736] = ((t_179736 * 1.0000000000000000e+001) + (rand_140512(1000) / 1.0000000000000000e+003));
						res_180234 += 1;
					}
			} while(false);
		} while(false);
		nimCopy(x0_179720, vector_128111(x_179715), NTI128017);
		nimCopy(y0_179721, vector_128111(y_179719), NTI128017);
		if (verbose_179711) {
		var fmt_res_179744 = mnewString(0);
		if (fmt_res_179744 != null) { fmt_res_179744 = (fmt_res_179744).concat(makeNimstrLit("X: ")); } else { fmt_res_179744 = makeNimstrLit("X: "); };
		if (fmt_res_179744 != null) { fmt_res_179744 = (fmt_res_179744).concat(HEX24_128235(HEX5BHEX5D_129614(x0_179720, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_179744 = HEX24_128235(HEX5BHEX5D_129614(x0_179720, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_179744);
		var fmt_res_180019 = mnewString(0);
		if (fmt_res_180019 != null) { fmt_res_180019 = (fmt_res_180019).concat(makeNimstrLit("Y: ")); } else { fmt_res_180019 = makeNimstrLit("Y: "); };
		if (fmt_res_180019 != null) { fmt_res_180019 = (fmt_res_180019).concat(HEX24_128235(HEX5BHEX5D_129614(y0_179721, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_180019 = HEX24_128235(HEX5BHEX5D_129614(y0_179721, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_180019);
		}
		
		var candidates_after_180217 = candidates_179709;
		var candidates_before_180218 = candidates_179709;
		var model_180219 = robust_interrupted_time_series_138165(x0_179720, y0_179721, change_point_179707, candidates_before_180218, candidates_after_180217);
		if (verbose_179711) {
		rawEcho(HEX24_164221(model_180219));
		}
		

	
}

function test_model_5000_179697(verbose_179699) {
		test_model_179703(250, 5, verbose_179699);

	
}

function test_model_180272(change_point_180276, candidates_180278, verbose_180280) {
		var x_180284 = new Float64Array(50000);
		var y_180288 = new Float64Array(50000);
		var x0_180289 = {length: 0, data: null};
		var y0_180290 = {length: 0, data: null};
		L1: do {
			var t_180305 = 0;
			var res_180834 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_180834 <= 49999)) break L3;
						t_180305 = res_180834;
						x_180284[t_180305] = t_180305;
						y_180288[t_180305] = ((t_180305 * 1.0000000000000000e+001) + (rand_140512(1000) / 1.0000000000000000e+003));
						res_180834 += 1;
					}
			} while(false);
		} while(false);
		nimCopy(x0_180289, vector_128111(x_180284), NTI128017);
		nimCopy(y0_180290, vector_128111(y_180288), NTI128017);
		if (verbose_180280) {
		var fmt_res_180313 = mnewString(0);
		if (fmt_res_180313 != null) { fmt_res_180313 = (fmt_res_180313).concat(makeNimstrLit("X: ")); } else { fmt_res_180313 = makeNimstrLit("X: "); };
		if (fmt_res_180313 != null) { fmt_res_180313 = (fmt_res_180313).concat(HEX24_128235(HEX5BHEX5D_129614(x0_180289, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_180313 = HEX24_128235(HEX5BHEX5D_129614(x0_180289, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_180313);
		var fmt_res_180619 = mnewString(0);
		if (fmt_res_180619 != null) { fmt_res_180619 = (fmt_res_180619).concat(makeNimstrLit("Y: ")); } else { fmt_res_180619 = makeNimstrLit("Y: "); };
		if (fmt_res_180619 != null) { fmt_res_180619 = (fmt_res_180619).concat(HEX24_128235(HEX5BHEX5D_129614(y0_180290, HEX2EHEX2E_53828(0, 10)))); } else { fmt_res_180619 = HEX24_128235(HEX5BHEX5D_129614(y0_180290, HEX2EHEX2E_53828(0, 10))).slice(); };
		rawEcho(fmt_res_180619);
		}
		
		var candidates_after_180817 = candidates_180278;
		var candidates_before_180818 = candidates_180278;
		var model_180819 = robust_interrupted_time_series_138165(x0_180289, y0_180290, change_point_180276, candidates_before_180818, candidates_after_180817);
		if (verbose_180280) {
		rawEcho(HEX24_164221(model_180819));
		}
		

	
}

function test_model_50000_5_180266(verbose_180268) {
		test_model_180272(1000, 5, verbose_180268);

	
}

function test_model_50000_50_180866(verbose_180868) {
		test_model_180272(1000, 50, verbose_180868);

	
}

function test_model_50000_500_180895(verbose_180897) {
		test_model_180272(1000, 500, verbose_180897);

	
}
test_linear_regression_160001();
test_linear_regression_wo_intercept_161814();
test_model_100_163648(true);
rawEcho(makeNimstrLit("# 100 points (x10)"));
var time_180928 = [get_time_147961()];
L2: do {
	var k_180941 = [0];
	var res_181204 = 1;
	L3: do {
			L4: while (true) {
			if (!(res_181204 <= 10)) break L4;
				k_180941[0] = res_181204;
				test_model_100_163648(false);
				res_181204 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
rawEcho(makeNimstrLit("# 200 points (200 cands.) (x10)"));
nimCopy(time_180928[0], get_time_147961(), NTI144818);
L5: do {
	var k_180960 = [0];
	var res_181211 = 1;
	L6: do {
			L7: while (true) {
			if (!(res_181211 <= 10)) break L7;
				k_180960[0] = res_181211;
				test_model_200_179066(false);
				res_181211 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
rawEcho(makeNimstrLit("# 500 points (x10)"));
nimCopy(time_180928[0], get_time_147961(), NTI144818);
L8: do {
	var k_180979 = [0];
	var res_181218 = 1;
	L9: do {
			L10: while (true) {
			if (!(res_181218 <= 10)) break L10;
				k_180979[0] = res_181218;
				test_model_500_178453(false);
				res_181218 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
rawEcho(makeNimstrLit("# 500 points (100 cands.) (x10)"));
nimCopy(time_180928[0], get_time_147961(), NTI144818);
L11: do {
	var k_180998 = [0];
	var res_181225 = 1;
	L12: do {
			L13: while (true) {
			if (!(res_181225 <= 10)) break L13;
				k_180998[0] = res_181225;
				test_model_500_100_179667(false);
				res_181225 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
rawEcho(makeNimstrLit("# 5000 points (x10)"));
nimCopy(time_180928[0], get_time_147961(), NTI144818);
L14: do {
	var k_181017 = [0];
	var res_181232 = 1;
	L15: do {
			L16: while (true) {
			if (!(res_181232 <= 10)) break L16;
				k_181017[0] = res_181232;
				test_model_5000_179697(false);
				res_181232 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
rawEcho(makeNimstrLit("# 50000 (5 cands.) points (x10)"));
nimCopy(time_180928[0], get_time_147961(), NTI144818);
L17: do {
	var k_181036 = [0];
	var res_181239 = 1;
	L18: do {
			L19: while (true) {
			if (!(res_181239 <= 10)) break L19;
				k_181036[0] = res_181239;
				test_model_50000_5_180266(false);
				res_181239 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
rawEcho(makeNimstrLit("# 50000 (50 cands.) points (x10)"));
nimCopy(time_180928[0], get_time_147961(), NTI144818);
L20: do {
	var k_181055 = [0];
	var res_181246 = 1;
	L21: do {
			L22: while (true) {
			if (!(res_181246 <= 10)) break L22;
				k_181055[0] = res_181246;
				test_model_50000_50_180866(false);
				res_181246 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
rawEcho(makeNimstrLit("# 50000 (500 cands.) points (x10)"));
nimCopy(time_180928[0], get_time_147961(), NTI144818);
L23: do {
	var k_181074 = [0];
	var res_181253 = 1;
	L24: do {
			L25: while (true) {
			if (!(res_181253 <= 10)) break L25;
				k_181074[0] = res_181253;
				test_model_50000_500_180895(false);
				res_181253 += 1;
			}
	} while(false);
} while(false);
rawEcho(makeNimstrLit("## Time taken: "), HEX24_146603(ntDiffTime(get_time_147961(), time_180928[0])));
