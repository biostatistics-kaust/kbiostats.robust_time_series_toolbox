/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI166263 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI166274 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI131624 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI166062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI150878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI150816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI150818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI151020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI139645 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI139643 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI139642 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI139652 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI17403 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI139637 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI139633 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI139626 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI139622 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI139615 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI139610 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI136541 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI136614 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI136613 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI132543 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI3896 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3804 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI136401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI126 = {size: 0,kind: 37,base: null,node: null,finalizer: null};
var NTI131022 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI131023 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI131018 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI131022.base = NTI126;
NTI131023.base = NTI131022;
var NNI131018 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "length", len: 0, typ: NTI104, name: "length", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI131023, name: "data", sons: null}]};
NTI131018.node = NNI131018;
NTI3804.base = NTI3896;
var NNI136401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3804, name: "Field1", sons: null}]};
NTI136401.node = NNI136401;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3852.base = NTI3828;
NTI132543.base = NTI124;
NTI136614.base = NTI124;
var NNI136613 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "autocorrelation", len: 0, typ: NTI136614, name: "autocorrelation", sons: null}, 
{kind: 1, offset: "confidence_interval", len: 0, typ: NTI124, name: "confidence_interval", sons: null}]};
NTI136613.node = NNI136613;
NTI136541.base = NTI128;
NTI139615.base = NTI124;
NTI139622.base = NTI124;
NTI139626.base = NTI124;
var NNI139610 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI124, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI124, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI139615, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI124, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI124, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI124, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI139622, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI124, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "R2", len: 0, typ: NTI124, name: "R2", sons: null}, 
{kind: 1, offset: "residual", len: 0, typ: NTI139626, name: "residual", sons: null}, 
{kind: 1, offset: "residual_sum_squares", len: 0, typ: NTI124, name: "residual_sum_squares", sons: null}, 
{kind: 1, offset: "residual_variance", len: 0, typ: NTI124, name: "residual_variance", sons: null}, 
{kind: 1, offset: "autocorrelation_function", len: 0, typ: NTI136613, name: "autocorrelation_function", sons: null}, 
{kind: 1, offset: "n", len: 0, typ: NTI104, name: "n", sons: null}]};
NTI139610.node = NNI139610;
var NNI139633 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mean_structure", len: 0, typ: NTI139610, name: "mean_structure", sons: null}, 
{kind: 1, offset: "autoregressive_structure", len: 0, typ: NTI139610, name: "autoregressive_structure", sons: null}]};
NTI139633.node = NNI139633;
var NNI139637 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "loglikelihood", len: 0, typ: NTI124, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "before_change", len: 0, typ: NTI139633, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI139633, name: "after_change", sons: null}]};
NTI139637.node = NNI139637;
NTI139643.base = NTI104;
NTI139645.base = NTI124;
var NNI139642 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "change_points", len: 0, typ: NTI139643, name: "change_points", sons: null}, 
{kind: 1, offset: "loglikelihood", len: 0, typ: NTI139645, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "best_loglikelihood", len: 0, typ: NTI124, name: "best_loglikelihood", sons: null}, 
{kind: 1, offset: "best_likelihood", len: 0, typ: NTI124, name: "best_likelihood", sons: null}, 
{kind: 1, offset: "best_time", len: 0, typ: NTI124, name: "best_time", sons: null}, 
{kind: 1, offset: "best_index", len: 0, typ: NTI104, name: "best_index", sons: null}]};
NTI139642.node = NNI139642;
var NNI139652 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "before_change", len: 0, typ: NTI139633, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI139633, name: "after_change", sons: null}, 
{kind: 1, offset: "likelihood", len: 0, typ: NTI139642, name: "likelihood", sons: null}]};
NTI139652.node = NNI139652;
NTI151020.base = NTI112;
NTI150816.base = NTI150878;
var NNI150818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI150816, name: "nanosecond", sons: null}]};
NTI150818.node = NNI150818;
NTI166062.base = NTI128;
NTI131624.base = NTI124;
NTI166274.base = NTI166263;

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		throw e_15818;

	
}
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
		var table_ppf_136540 = nimCopy(null, [1.0000000000000001e+050, 1.2710000000000001e+001, 4.3029999999999999e+000, 3.1819999999999999e+000, 2.7759999999999998e+000, 2.5710000000000002e+000, 2.4470000000000001e+000, 2.3650000000000002e+000, 2.3060000000000000e+000, 2.2620000000000000e+000, 2.2280000000000002e+000, 2.2010000000000001e+000, 2.1789999999999998e+000, 2.1600000000000001e+000, 2.1450000000000000e+000, 2.1309999999999998e+000, 2.1200000000000001e+000, 2.1099999999999999e+000, 2.1010000000000000e+000, 2.0930000000000000e+000, 2.0859999999999999e+000, 2.0800000000000001e+000, 2.0739999999999998e+000, 2.0690000000000000e+000, 2.0640000000000001e+000, 2.0600000000000001e+000, 2.0560000000000000e+000, 2.0520000000000000e+000, 2.0480000000000000e+000, 2.0449999999999999e+000, 2.0419999999999998e+000, 2.0209999999999999e+000, 2.0089999999999999e+000, 2.0000000000000000e+000, 1.9900000000000000e+000, 1.9840000000000000e+000, 1.9800000000000000e+000, 1.9600000000000000e+000], NTI136541);
		var unit_weights_151017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI151020);
var ConstSet12 = setConstr([65, 90]);
var nimvm_7173 = false;
process.exitCode = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];

function classify_29032(x_29034) {
	var result_29035 = 0;

	BeforeRet: do {
		if ((x_29034 == 0.0)) {
		if (((1.0000000000000000e+000 / x_29034) == Infinity)) {
		result_29035 = 2;
		break BeforeRet;
		}
		else {
			result_29035 = 3;
			break BeforeRet;
		}
		
		}
		
		if (((x_29034 * 5.0000000000000000e-001) == x_29034)) {
		if ((0.0 < x_29034)) {
		result_29035 = 5;
		break BeforeRet;
		}
		else {
			result_29035 = 6;
			break BeforeRet;
		}
		
		}
		
		if (!((x_29034 == x_29034))) {
		result_29035 = 4;
		break BeforeRet;
		}
		
		result_29035 = 0;
		break BeforeRet;
	} while (false);

	return result_29035;

}

function check_value_131145(data_131150, data_131150_Idx, length_131152, idx_131154, w_131156, w_idx_131158) {
			var Tmp1;

		var v_131159 = w_131156[w_idx_131158];
			if ((((classify_29032(v_131159) == 4) || (classify_29032(v_131159) == 5)) || (classify_29032(v_131159) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_131159 * 1.0000000000000000e+001) / 1.0000000000000000e+001) == v_131159));			}		if (Tmp1) {
		if ((idx_131154 == 0)) {
		data_131150[data_131150_Idx][idx_131154] = w_131156[(w_idx_131158 + 1)];
		}
		else {
		if ((idx_131154 == (length_131152 - 1))) {
		data_131150[data_131150_Idx][idx_131154] = w_131156[(w_idx_131158 - 1)];
		}
		else {
			data_131150[data_131150_Idx][idx_131154] = (5.0000000000000000e-001 * (w_131156[(w_idx_131158 - 1)] + w_131156[(w_idx_131158 + 1)]));
		}
		}
		}
		else {
			data_131150[data_131150_Idx][idx_131154] = v_131159;
		}
		

	
}

function fix_vector(v_131096) {
	var result_131098 = [null];

		var length_131106 = (v_131096 != null ? v_131096.length : 0);
		rawEcho(cstrToNimstr((length_131106)+""));
		result_131098[0] = new Array(length_131106); for (var i=0;i<length_131106;++i) {result_131098[0][i]=0.0;}		var i_131119 = 0;
		L1: do {
			var k_131143 = 0;
			var colontmp__131220 = 0;
			colontmp__131220 = (v_131096 != null ? (v_131096.length-1) : -1);
			var res_131223 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_131223 <= colontmp__131220)) break L3;
						k_131143 = res_131223;
						check_value_131145(result_131098, 0, length_131106, i_131119, v_131096, k_131143);
						i_131119 += 1;
						res_131223 += 1;
					}
			} while(false);
		} while(false);

	return result_131098[0];

}

function check_value_131284(data_131289, data_131289_Idx, length_131291, idx_131293, w_131295, w_idx_131297) {
			var Tmp1;

		var v_131298 = w_131295[w_idx_131297];
			if ((((classify_29032(v_131298) == 4) || (classify_29032(v_131298) == 5)) || (classify_29032(v_131298) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_131298 * 1.0000000000000000e+001) / 1.0000000000000000e+001) == v_131298));			}		if (Tmp1) {
		if ((idx_131293 == 0)) {
		data_131289[data_131289_Idx][idx_131293] = w_131295[(w_idx_131297 + 1)];
		}
		else {
		if ((idx_131293 == (length_131291 - 1))) {
		data_131289[data_131289_Idx][idx_131293] = w_131295[(w_idx_131297 - 1)];
		}
		else {
			data_131289[data_131289_Idx][idx_131293] = (5.0000000000000000e-001 * (w_131295[(w_idx_131297 - 1)] + w_131295[(w_idx_131297 + 1)]));
		}
		}
		}
		else {
			data_131289[data_131289_Idx][idx_131293] = v_131298;
		}
		

	
}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function vector_131240(v_131243) {
	var result_131244 = {length: 0, data: null};

		result_131244.data = new Float32Array(1012);
		result_131244.length = (v_131243 != null ? v_131243.length : 0);
		var i_131259 = 0;
		L1: do {
			var k_131282 = 0;
			var colontmp__131351 = 0;
			colontmp__131351 = (v_131243 != null ? (v_131243.length-1) : -1);
			var res_131354 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_131354 <= colontmp__131351)) break L3;
						k_131282 = res_131354;
						check_value_131284(result_131244, "data", result_131244.length, i_131259, v_131243, k_131282);
						i_131259 += 1;
						res_131354 += 1;
					}
			} while(false);
		} while(false);
		result_131244.length = i_131259;
		nimCopy(result_131244, result_131244, NTI131018);

	return result_131244;

}

function new_seq_131619(len_131623) {
	var result_131625 = null;

		result_131625 = new Array(len_131623); for (var i=0;i<len_131623;++i) {result_131625[i]=0.0;}
	return result_131625;

}

function vector_131371(v_131374) {
	var result_131375 = {length: 0, data: null};

		L1: do {
			var i_131610 = 0;
			var result_131650 = new_seq_131619((v_131374 != null ? v_131374.length : 0));
			L2: do {
				var it_131658 = 0;
				var i_131675 = 0;
				L3: do {
						L4: while (true) {
						if (!(i_131675 < (v_131374 != null ? v_131374.length : 0))) break L4;
							it_131658 = v_131374[i_131675];
							result_131650[i_131610] = it_131658;
							i_131610 += 1;
							i_131675 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		nimCopy(result_131375, vector_131240(result_131650), NTI131018);

	return result_131375;

}

function high_131797(v_131799) {
	var result_131800 = 0;

		result_131800 = (v_131799.length - 1);

	return result_131800;

}

function sum_135965(x_135970) {
	var result_135971 = 0.0;

		L1: do {
			var i_136010 = 0.0;
			var i_136014 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_136014 < (x_135970 != null ? x_135970.length : 0))) break L3;
						i_136010 = x_135970[i_136014];
						result_135971 = (result_135971 + i_136010);
						i_136014 += 1;
					}
			} while(false);
		} while(false);

	return result_135971;

}

function sum_135959(v_135961) {
	var result_135962 = 0.0;

		result_135962 = sum_135965(v_135961.data);

	return result_135962;

}

function len_131780(v_131782) {
	var result_131783 = 0;

		result_131783 = v_131782.length;

	return result_131783;

}

function mean_136041(v_136043) {
	var result_136044 = 0.0;

		result_136044 = (sum_135959(v_136043) / len_131780(v_136043));

	return result_136044;

}

function low_131814(v_131816) {
	var result_131817 = 0;

		result_131817 = 0;

	return result_131817;

}

function HEX5BHEX5DHEX3D_133014(v_133017, i_133018, val_133019) {
		if ((v_133017.length <= i_133018)) {
		v_133017.length = (i_133018 + 1);
		}
		
		v_133017.data[i_133018] = val_133019;

	
}

function HEX5BHEX5D_132597(v_132599, i_132600) {
	var result_132601 = 0.0;

		result_132601 = v_132599.data[i_132600];

	return result_132601;

}

function HEX2EHEX2A_135156(v_135158, w_135159) {
	var result_135160 = [{length: 0, data: null}];

		result_135160[0].data = new Float32Array(1012);
		L1: do {
			var i_135177 = 0;
			var colontmp__135180 = 0;
			var colontmp__135181 = 0;
			colontmp__135180 = low_131814(v_135158);
			colontmp__135181 = high_131797(v_135158);
			var res_135184 = colontmp__135180;
			L2: do {
					L3: while (true) {
					if (!(res_135184 <= colontmp__135181)) break L3;
						i_135177 = res_135184;
						HEX5BHEX5DHEX3D_133014(result_135160[0], i_135177, (HEX5BHEX5D_132597(v_135158, i_135177) * HEX5BHEX5D_132597(w_135159, i_135177)));
						res_135184 += 1;
					}
			} while(false);
		} while(false);

	return result_135160[0];

}

function HEX2AHEX3D_127689(x_127694, x_127694_Idx, y_127696) {
		x_127694[x_127694_Idx] = (x_127694[x_127694_Idx] * y_127696);

	
}

function HEX5E_136081(x_136085, y_136087) {
	var result_136088 = [0.0];

		var colontmp__139669 = {Field0: 0.0, Field1: 0};
		var x_136402 = [0.0];
		var y_136403 = 0;
		nimCopy(colontmp__139669, {Field0: x_136085, Field1: y_136087}, NTI136401);
		x_136402[0] = colontmp__139669["Field0"];
		y_136403 = colontmp__139669["Field1"];
		result_136088[0] = 1.0000000000000000e+000;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_136403 & 1) == 0))) {
					HEX2AHEX3D_127689(result_136088, 0, x_136402[0]);
					}
					
					y_136403 = ((y_136403 >>> 0) >>> 1);
					if ((y_136403 == 0)) {
					break L1;
					}
					
					HEX2AHEX3D_127689(x_136402, 0, x_136402[0]);
				}
		} while(false);

	return result_136088[0];

}

function variance_136076(v_136078) {
	var result_136079 = 0.0;

		result_136079 = ((sum_135959(HEX2EHEX2A_135156(v_136078, v_136078)) / len_131780(v_136078)) - HEX5E_136081(mean_136041(v_136078), 2));

	return result_136079;

}

function HEX5BHEX5D_133414(v_133416, idx_133424) {
	var result_133425 = {length: 0, data: null};

		result_133425.data = new Float32Array(1012);
		var k_133435 = 0;
		L1: do {
			var i_133474 = 0;
			L2: do {
				var x_133814 = 0;
				var colontmp__133816 = 0;
				var colontmp__133818 = 0;
				colontmp__133816 = idx_133424.a;
				colontmp__133818 = idx_133424.b;
				var res_133820 = colontmp__133816;
				L3: do {
						L4: while (true) {
						if (!(res_133820 <= colontmp__133818)) break L4;
							x_133814 = res_133820;
							i_133474 = x_133814;
							result_133425.data[k_133435] = v_133416.data[i_133474];
							k_133435 += 1;
							res_133820 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_133425.length = k_133435;

	return result_133425;

}

function HEX2EHEX2E_56828(a_56833, b_56835) {
	var result_56843 = {a: 0, b: 0};

		result_56843.a = a_56833;
		result_56843.b = b_56835;

	return result_56843;

}

function HEX2D_135028(v_135030, k_135031) {
	var result_135032 = [{length: 0, data: null}];

		result_135032[0].data = new Float32Array(1012);
		L1: do {
			var i_135049 = 0;
			var colontmp__135052 = 0;
			var colontmp__135053 = 0;
			colontmp__135052 = low_131814(v_135030);
			colontmp__135053 = high_131797(v_135030);
			var res_135056 = colontmp__135052;
			L2: do {
					L3: while (true) {
					if (!(res_135056 <= colontmp__135053)) break L3;
						i_135049 = res_135056;
						HEX5BHEX5DHEX3D_133014(result_135032[0], i_135049, (HEX5BHEX5D_132597(v_135030, i_135049) - k_135031));
						res_135056 += 1;
					}
			} while(false);
		} while(false);

	return result_135032[0];

}

function acf_136647(x_136649, max_lag_136650) {
	var result_136651 = [{length: 0, data: null}];

		result_136651[0].data = new Float32Array(1012);
		var n_136660 = high_131797(x_136649);
		var u_136661 = mean_136041(x_136649);
		var s2_136662 = variance_136076(x_136649);
		HEX5BHEX5DHEX3D_133014(result_136651[0], 0, 1.0000000000000000e+000);
		L1: do {
			var h_136675 = 0;
			var colontmp__136704 = 0;
			colontmp__136704 = nimMin(max_lag_136650, n_136660);
			var res_136707 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_136707 <= colontmp__136704)) break L3;
						h_136675 = res_136707;
						var a_136688 = HEX5BHEX5D_133414(x_136649, HEX2EHEX2E_56828(0, (n_136660 - h_136675)));
						var b_136699 = HEX5BHEX5D_133414(x_136649, HEX2EHEX2E_56828(h_136675, n_136660));
						HEX5BHEX5DHEX3D_133014(result_136651[0], h_136675, ((mean_136041(HEX2EHEX2A_135156(HEX2D_135028(a_136688, u_136661), HEX2D_135028(b_136699, u_136661))) + 1.0000000000000000e-010) / ((n_136660 * s2_136662) + 1.0000000000000000e-010)));
						res_136707 += 1;
					}
			} while(false);
		} while(false);

	return result_136651[0];

}

function parse_saturated_natural_46485(s_46487, b_46489, b_46489_Idx, start_46490) {
			var Tmp1;
					var Tmp4;

	var result_46492 = 0;

		var i_46493 = start_46490;
		if (((i_46493 < (s_46487 != null ? s_46487.length : 0)) && (s_46487[i_46493] == 43))) {
		i_46493 += 1;
		}
		
			if (!(i_46493 < (s_46487 != null ? s_46487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_46487[i_46493]] != undefined);			}		if (Tmp1) {
		b_46489[b_46489_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_46493 < (s_46487 != null ? s_46487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_46487[i_46493]] != undefined);					}				if (!Tmp4) break L3;
					var c_46535 = (s_46487[i_46493] - 48);
					if ((b_46489[b_46489_Idx] <= Math.trunc((2147483647 - c_46535) / 10))) {
					b_46489[b_46489_Idx] = ((b_46489[b_46489_Idx] * 10) + c_46535);
					}
					else {
						b_46489[b_46489_Idx] = 2147483647;
					}
					
					i_46493 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_46493 < (s_46487 != null ? s_46487.length : 0)) && (s_46487[i_46493] == 95))) break L6;
								i_46493 += 1;
							}
					} while(false);
				}
		} while(false);
		result_46492 = (i_46493 - start_46490);
		}
		

	return result_46492;

}

function HEX5BHEX5D_88905(s_88910, x_88913) {
	var result_88914 = null;

		var a_89001 = x_88913.a;
		var l_89201 = ((((s_88910 != null ? s_88910.length : 0) - x_88913.b) - a_89001) + 1);
		result_88914 = nimCopy(null, mnewString(l_89201), NTI138);
		L1: do {
			var i_89211 = 0;
			var i_89223 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_89223 < l_89201)) break L3;
						i_89211 = i_89223;
						result_88914[i_89211] = s_88910[(i_89211 + a_89001)];
						i_89223 += 1;
					}
			} while(false);
		} while(false);

	return result_88914;

}

function HEX2EHEX2E_88853(a_88858, b_88860) {
	var result_88868 = {a: 0, b: 0};

		result_88868.a = a_88858;
		result_88868.b = b_88860;

	return result_88868;

}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function parse_standard_format_specifier_129928(s_129930, start_129931, ignore_unknown_suffix_129933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_129934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_129934.fill = 32;
		result_129934.align = 0;
		result_129934.sign = 45;
		var i_129937 = start_129931;
		if ((((i_129937 + 1) < (s_129930 != null ? s_129930.length : 0)) && (ConstSet2[s_129930[(i_129937 + 1)]] != undefined))) {
		result_129934.fill = s_129930[i_129937];
		result_129934.align = s_129930[(i_129937 + 1)];
		i_129937 += 2;
		}
		else {
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (ConstSet3[s_129930[i_129937]] != undefined))) {
		result_129934.align = s_129930[i_129937];
		i_129937 += 1;
		}
		}
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (ConstSet4[s_129930[i_129937]] != undefined))) {
		result_129934.sign = s_129930[i_129937];
		i_129937 += 1;
		}
		
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (s_129930[i_129937] == 35))) {
		result_129934.alternateForm = true;
		i_129937 += 1;
		}
		
			if (!(((i_129937 + 1) < (s_129930 != null ? s_129930.length : 0)) && (s_129930[i_129937] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_129930[(i_129937 + 1)]] != undefined);			}		if (Tmp1) {
		result_129934.padWithZero = true;
		i_129937 += 1;
		}
		
		var parsed_length_130022 = parse_saturated_natural_46485(s_129930, result_129934, "minimumWidth", i_129937);
		i_129937 += parsed_length_130022;
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (s_129930[i_129937] == 46))) {
		i_129937 += 1;
		var parsed_length_b_130042 = parse_saturated_natural_46485(s_129930, result_129934, "precision", i_129937);
		i_129937 += parsed_length_b_130042;
		}
		else {
			result_129934.precision = -1;
		}
		
			if (!(i_129937 < (s_129930 != null ? s_129930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_129930[i_129937]] != undefined);			}		if (Tmp2) {
		result_129934.typ = s_129930[i_129937];
		i_129937 += 1;
		}
		
		result_129934.endPosition = i_129937;
			if (!!((i_129937 == (s_129930 != null ? s_129930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_129933);			}		if (Tmp3) {
		var e_130120 = null;
		e_130120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_130120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_88905(s_129930, HEX2EHEX2E_88853(i_129937, 1))), NTI138);
		e_130120.parent = null;
		raiseException(e_130120, "ValueError");
		}
		

	return result_129934;

}

function nsuformatBiggestFloat(f_127023, format_127024, precision_127030, decimal_sep_127031) {
	var result_127032 = null;

		var precision_127201 = precision_127030;
		if ((precision_127201 == -1)) {
		precision_127201 = 6;
		}
		
		var res_127203 = null;
		switch (format_127024) {
		case 0:
			res_127203 = f_127023.toString();
			break;
		case 1:
			res_127203 = f_127023.toFixed(precision_127201);
			break;
		case 2:
			res_127203 = f_127023.toExponential(precision_127201);
			break;
		}
		result_127032 = nimCopy(null, cstrToNimstr(res_127203), NTI138);
		if (((1.0000000000000000e+000 / f_127023) == -Infinity)) {
		result_127032 = nimCopy(null, (makeNimstrLit("-")).concat(cstrToNimstr(res_127203)), NTI138);
		}
		
		L1: do {
			var i_127215 = 0;
			var colontmp__127227 = 0;
			colontmp__127227 = (result_127032 != null ? result_127032.length : 0);
			var i_127230 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_127230 < colontmp__127227)) break L3;
						i_127215 = i_127230;
						if ((ConstSet9[result_127032[i_127215]] != undefined)) {
						result_127032[i_127215] = decimal_sep_127031;
						}
						
						i_127230 += 1;
					}
			} while(false);
		} while(false);

	return result_127032;

}

function insert_21601(x_21604, x_21604_Idx, item_21605, i_21606) {
		var xl_21607 = (x_21604[x_21604_Idx] != null ? x_21604[x_21604_Idx].length : 0);
		x_21604[x_21604_Idx].length = (xl_21607 + (item_21605 != null ? item_21605.length : 0));
		var j_21608 = (xl_21607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_21606 <= j_21608)) break L2;
					x_21604[x_21604_Idx][(j_21608 + (item_21605 != null ? item_21605.length : 0))] = x_21604[x_21604_Idx][j_21608];
					j_21608 -= 1;
				}
		} while(false);
		j_21608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_21608 < (item_21605 != null ? item_21605.length : 0))) break L4;
					x_21604[x_21604_Idx][(j_21608 + i_21606)] = item_21605[j_21608];
					j_21608 += 1;
				}
		} while(false);

	
}

function nsuRepeatChar(c_122984, count_122985) {
	var result_122986 = null;

		result_122986 = nimCopy(null, mnewString(count_122985), NTI138);
		L1: do {
			var i_122998 = 0;
			var colontmp__123000 = 0;
			colontmp__123000 = (count_122985 - 1);
			var res_123003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_123003 <= colontmp__123000)) break L3;
						i_122998 = res_123003;
						result_122986[i_122998] = c_122984;
						res_123003 += 1;
					}
			} while(false);
		} while(false);

	return result_122986;

}

function validate_utf8_49955(s_49957) {
	var result_49958 = 0;

	BeforeRet: do {
		var i_49960 = 0;
		var l_49961 = (s_49957 != null ? s_49957.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_49960 < l_49961)) break L2;
					if ((s_49957[i_49960] <= 127)) {
					i_49960 += 1;
					}
					else {
					if ((((s_49957[i_49960] >>> 0) >>> 5) == 6)) {
					if ((s_49957[i_49960] < 194)) {
					result_49958 = i_49960;
					break BeforeRet;
					}
					
					if ((((i_49960 + 1) < l_49961) && (((s_49957[(i_49960 + 1)] >>> 0) >>> 6) == 2))) {
					i_49960 += 2;
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_49957[i_49960] >>> 0) >>> 4) == 14)) {
					if (((((i_49960 + 2) < l_49961) && (((s_49957[(i_49960 + 1)] >>> 0) >>> 6) == 2)) && (((s_49957[(i_49960 + 2)] >>> 0) >>> 6) == 2))) {
					i_49960 += 3;
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_49957[i_49960] >>> 0) >>> 3) == 30)) {
					if ((((((i_49960 + 3) < l_49961) && (((s_49957[(i_49960 + 1)] >>> 0) >>> 6) == 2)) && (((s_49957[(i_49960 + 2)] >>> 0) >>> 6) == 2)) && (((s_49957[(i_49960 + 3)] >>> 0) >>> 6) == 2))) {
					i_49960 += 4;
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_49958 = -1;
		break BeforeRet;
	} while (false);

	return result_49958;

}

function nucruneLen(s_49507) {
	var result_49508 = 0;

		var i_49510 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_49510 < (s_49507 != null ? s_49507.length : 0))) break L2;
					if ((s_49507[i_49510] <= 127)) {
					i_49510 += 1;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 5) == 6)) {
					i_49510 += 2;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 4) == 14)) {
					i_49510 += 3;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 3) == 30)) {
					i_49510 += 4;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 2) == 62)) {
					i_49510 += 5;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 1) == 126)) {
					i_49510 += 6;
					}
					else {
					i_49510 += 1;
					}
					}}}}}
					result_49508 += 1;
				}
		} while(false);

	return result_49508;

}

function align_string_129827(s_129829, minimum_width_129830, align_129831, fill_129832) {
			var Tmp1;

	var result_129833 = null;

		if ((minimum_width_129830 == 0)) {
		result_129833 = nimCopy(null, s_129829, NTI138);
		}
		else {
			if ((validate_utf8_49955(s_129829) == -1)) {
			Tmp1 = nucruneLen(s_129829);
			}
			else {
			Tmp1 = (s_129829 != null ? s_129829.length : 0);
			}
			
			var s_rune_len_129835 = Tmp1;
			var to_fill_129836 = (minimum_width_129830 - s_rune_len_129835);
			if ((to_fill_129836 <= 0)) {
			result_129833 = nimCopy(null, s_129829, NTI138);
			}
			else {
			if (((align_129831 == 60) || (align_129831 == 0))) {
			result_129833 = nimCopy(null, (s_129829).concat(nsuRepeatChar(fill_129832, to_fill_129836)), NTI138);
			}
			else {
			if ((align_129831 == 94)) {
			var half_129837 = Math.trunc(to_fill_129836 / 2);
			result_129833 = nimCopy(null, (nsuRepeatChar(fill_129832, half_129837)).concat(s_129829,nsuRepeatChar(fill_129832, (to_fill_129836 - half_129837))), NTI138);
			}
			else {
				result_129833 = nimCopy(null, (nsuRepeatChar(fill_129832, to_fill_129836)).concat(s_129829), NTI138);
			}
			}}
		}
		

	return result_129833;

}

function nsuToUpperAsciiChar(c_120319) {
	var result_120320 = 0;

		if ((ConstSet11[c_120319] != undefined)) {
		result_120320 = (c_120319 - 32);
		}
		else {
			result_120320 = c_120319;
		}
		

	return result_120320;

}

function nsuToUpperAsciiStr(s_120367) {
	var result_120368 = null;

		result_120368 = nimCopy(null, mnewString((s_120367 != null ? s_120367.length : 0)), NTI138);
		L1: do {
			var i_120383 = 0;
			var colontmp__120391 = 0;
			colontmp__120391 = ((s_120367 != null ? s_120367.length : 0) - 1);
			var res_120394 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_120394 <= colontmp__120391)) break L3;
						i_120383 = res_120394;
						result_120368[i_120383] = nsuToUpperAsciiChar(s_120367[i_120383]);
						res_120394 += 1;
					}
			} while(false);
		} while(false);

	return result_120368;

}

function format_132402(value_132406, specifier_132408, res_132410, res_132410_Idx) {
		var Tmp1;

		var spec_132411 = parse_standard_format_specifier_129928(specifier_132408, 0, false);
		var fmode_132412 = 0;
		switch (spec_132411.typ) {
		case 101:
		case 69:
			fmode_132412 = 2;
			break;
		case 102:
		case 70:
			fmode_132412 = 1;
			break;
		case 103:
		case 71:
			fmode_132412 = 0;
			break;
		case 0:
			break;
		default: 
			var e_132418 = null;
			e_132418 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_132418.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_132411.typ]), NTI138);
			e_132418.parent = null;
			raiseException(e_132418, "ValueError");
			break;
		}
		var f_132427 = [nsuformatBiggestFloat(value_132406, fmode_132412, spec_132411.precision, 46)];
		var sign_132428 = false;
		if ((0.0 <= value_132406)) {
		if (!((spec_132411.sign == 45))) {
		sign_132428 = true;
		if ((value_132406 == 0.0)) {
		if (((1.0000000000000000e+000 / value_132406) == Infinity)) {
		insert_21601(f_132427, 0, nimCharToStr(spec_132411.sign), 0);
		}
		
		}
		else {
		insert_21601(f_132427, 0, nimCharToStr(spec_132411.sign), 0);
		}
		
		}
		
		}
		else {
			sign_132428 = true;
		}
		
		if (spec_132411.padWithZero) {
		var sign_str_132432 = [];
		if (sign_132428) {
		sign_str_132432 = nimCopy(null, nimCharToStr(f_132427[0][0]), NTI138);
		f_132427[0] = nimCopy(null, HEX5BHEX5D_88905(f_132427[0], HEX2EHEX2E_88853(1, 1)), NTI138);
		}
		
		var to_fill_132487 = ((spec_132411.minimumWidth - (f_132427[0] != null ? f_132427[0].length : 0)) - (sign_132428 ? 1:0));
		if ((0 < to_fill_132487)) {
		f_132427[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_132487)).concat(f_132427[0]), NTI138);
		}
		
		if (sign_132428) {
		f_132427[0] = nimCopy(null, (sign_str_132432).concat(f_132427[0]), NTI138);
		}
		
		}
		
		if ((spec_132411.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_132411.align;
		}
		
		var align_132490 = Tmp1;
		var result_132491 = align_string_129827(f_132427[0], spec_132411.minimumWidth, align_132490, spec_132411.fill);
		if ((ConstSet10[spec_132411.typ] != undefined)) {
		if (res_132410[res_132410_Idx] != null) { res_132410[res_132410_Idx] = (res_132410[res_132410_Idx]).concat(nsuToUpperAsciiStr(result_132491)); } else { res_132410[res_132410_Idx] = nsuToUpperAsciiStr(result_132491).slice(); };
		}
		else {
		if (res_132410[res_132410_Idx] != null) { res_132410[res_132410_Idx] = (res_132410[res_132410_Idx]).concat(result_132491); } else { res_132410[res_132410_Idx] = result_132491.slice(); };
		}
		

	
}

function HEX24_131831(v_131833) {
	var result_131834 = null;

		result_131834 = nimCopy(null, makeNimstrLit("["), NTI138);
		L1: do {
			var k_131843 = 0;
			var colontmp__132519 = 0;
			var colontmp__132520 = 0;
			colontmp__132519 = low_131814(v_131833);
			colontmp__132520 = high_131797(v_131833);
			var res_132523 = colontmp__132519;
			L2: do {
					L3: while (true) {
					if (!(res_132523 <= colontmp__132520)) break L3;
						k_131843 = res_132523;
						var fmt_res_131846 = [mnewString(0)];
						format_132402(v_131833.data[k_131843], makeNimstrLit(".04f"), fmt_res_131846, 0);
						if (result_131834 != null) { result_131834 = (result_131834).concat(fmt_res_131846[0]); } else { result_131834 = fmt_res_131846[0].slice(); };
						if (!((k_131843 == high_131797(v_131833)))) {
						if (result_131834 != null) { result_131834 = (result_131834).concat(makeNimstrLit(", ")); } else { result_131834 = makeNimstrLit(", "); };
						}
						
						res_132523 += 1;
					}
			} while(false);
		} while(false);
		if (result_131834 != null) { result_131834 = (result_131834).concat(makeNimstrLit("]")); } else { result_131834 = makeNimstrLit("]"); };

	return result_131834;

}

function add_quoted_138602(s_138606, s_138606_Idx, x_138608) {
		if (s_138606[s_138606_Idx] != null) { s_138606[s_138606_Idx] = (s_138606[s_138606_Idx]).concat(cstrToNimstr((x_138608)+"")); } else { s_138606[s_138606_Idx] = cstrToNimstr((x_138608)+"").slice(); };

	
}

function collection_to_string_138211(x_138215, prefix_138217, separator_138219, suffix_138221) {
	var result_138222 = [null];

		result_138222[0] = nimCopy(null, prefix_138217, NTI138);
		var first_element_138223 = true;
		L1: do {
			var value_138415 = 0.0;
			var i_138818 = 0;
			var l_138820 = (x_138215 != null ? x_138215.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_138818 < l_138820)) break L3;
						value_138415 = x_138215[i_138818];
						if (first_element_138223) {
						first_element_138223 = false;
						}
						else {
						if (result_138222[0] != null) { result_138222[0] = (result_138222[0]).concat(separator_138219); } else { result_138222[0] = separator_138219.slice(); };
						}
						
						add_quoted_138602(result_138222, 0, value_138415);
						i_138818 += 1;
					}
			} while(false);
		} while(false);
		if (result_138222[0] != null) { result_138222[0] = (result_138222[0]).concat(suffix_138221); } else { result_138222[0] = suffix_138221.slice(); };

	return result_138222[0];

}

function HEX24_138203(x_138208) {
	var result_138209 = null;

		result_138209 = nimCopy(null, collection_to_string_138211(x_138208, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_138209;

}

function add_quoted_138002(s_138006, s_138006_Idx, x_138008) {
		if (s_138006[s_138006_Idx] != null) { s_138006[s_138006_Idx] = (s_138006[s_138006_Idx]).concat(HEX24_138203(x_138008)); } else { s_138006[s_138006_Idx] = HEX24_138203(x_138008).slice(); };

	
}

function HEX24_137202(x_137206) {
	var result_137207 = [null];

		result_137207[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_137208 = true;
		if (!(first_element_137208)) {
		if (result_137207[0] != null) { result_137207[0] = (result_137207[0]).concat(makeNimstrLit(", ")); } else { result_137207[0] = makeNimstrLit(", "); };
		}
		
		if (result_137207[0] != null) { result_137207[0] = (result_137207[0]).concat(makeNimstrLit("autocorrelation")); } else { result_137207[0] = makeNimstrLit("autocorrelation"); };
		if (result_137207[0] != null) { result_137207[0] = (result_137207[0]).concat(makeNimstrLit(": ")); } else { result_137207[0] = makeNimstrLit(": "); };
		add_quoted_138002(result_137207, 0, x_137206.autocorrelation);
		first_element_137208 = false;
		if (!(first_element_137208)) {
		if (result_137207[0] != null) { result_137207[0] = (result_137207[0]).concat(makeNimstrLit(", ")); } else { result_137207[0] = makeNimstrLit(", "); };
		}
		
		if (result_137207[0] != null) { result_137207[0] = (result_137207[0]).concat(makeNimstrLit("confidence_interval")); } else { result_137207[0] = makeNimstrLit("confidence_interval"); };
		if (result_137207[0] != null) { result_137207[0] = (result_137207[0]).concat(makeNimstrLit(": ")); } else { result_137207[0] = makeNimstrLit(": "); };
		add_quoted_138602(result_137207, 0, x_137206.confidence_interval);
		first_element_137208 = false;
		if (result_137207[0] != null) { result_137207[0] = (result_137207[0]).concat(makeNimstrLit(")")); } else { result_137207[0] = makeNimstrLit(")"); };

	return result_137207[0];

}

function vector_to_seq_132540(v_132542) {
	var result_132544 = null;

		var length_132545 = len_131780(v_132542);
		result_132544 = new Array(length_132545); for (var i=0;i<length_132545;++i) {result_132544[i]=0.0;}		var i_132556 = 0;
		L1: do {
			var k_132565 = 0;
			var colontmp__132576 = 0;
			var colontmp__132577 = 0;
			colontmp__132576 = low_131814(v_132542);
			colontmp__132577 = high_131797(v_132542);
			var res_132580 = colontmp__132576;
			L2: do {
					L3: while (true) {
					if (!(res_132580 <= colontmp__132577)) break L3;
						k_132565 = res_132580;
						result_132544[i_132556] = v_132542.data[k_132565];
						i_132556 += 1;
						res_132580 += 1;
					}
			} while(false);
		} while(false);

	return result_132544;

}

function HEX2F_19442(x_19444, y_19445) {
	var result_19446 = 0.0;

		result_19446 = (x_19444 / y_19445);

	return result_19446;

}

function acf_confidence_interval_136630(x_136632) {
	var result_136633 = 0.0;

		result_136633 = (1.9600000000000000e+000 * Math.sqrt(HEX2F_19442(1, len_131780(x_136632))));

	return result_136633;

}

function acf_information_136724(x_136726, max_lag_136727) {
	var result_136728 = {autocorrelation: null, confidence_interval: 0.0};

		result_136728.autocorrelation = nimCopy(null, vector_to_seq_132540(acf_136647(x_136726, max_lag_136727)), NTI132543);
		result_136728.confidence_interval = acf_confidence_interval_136630(x_136726);

	return result_136728;

}
var x_136745 = vector_131371([3, 2, 1, 9, 4, 2, 5, 3, 3, 6, 8, 9, 10]);
var y_136746 = acf_136647(x_136745, 10);
rawEcho(makeNimstrLit("AutocorrelationFunction"));
var fmt_res_136752 = [mnewString(0)];
if (fmt_res_136752[0] != null) { fmt_res_136752[0] = (fmt_res_136752[0]).concat(makeNimstrLit("  X: ")); } else { fmt_res_136752[0] = makeNimstrLit("  X: "); };
if (fmt_res_136752[0] != null) { fmt_res_136752[0] = (fmt_res_136752[0]).concat(HEX24_131831(x_136745)); } else { fmt_res_136752[0] = HEX24_131831(x_136745).slice(); };
rawEcho(fmt_res_136752[0]);
var fmt_res_136806 = [mnewString(0)];
if (fmt_res_136806[0] != null) { fmt_res_136806[0] = (fmt_res_136806[0]).concat(makeNimstrLit("  ACF: ")); } else { fmt_res_136806[0] = makeNimstrLit("  ACF: "); };
if (fmt_res_136806[0] != null) { fmt_res_136806[0] = (fmt_res_136806[0]).concat(HEX24_131831(y_136746)); } else { fmt_res_136806[0] = HEX24_131831(y_136746).slice(); };
rawEcho(fmt_res_136806[0]);
var fmt_res_137006 = [mnewString(0)];
if (fmt_res_137006[0] != null) { fmt_res_137006[0] = (fmt_res_137006[0]).concat(makeNimstrLit("  ACF-info: ")); } else { fmt_res_137006[0] = makeNimstrLit("  ACF-info: "); };
if (fmt_res_137006[0] != null) { fmt_res_137006[0] = (fmt_res_137006[0]).concat(HEX24_137202(acf_information_136724(x_136745, 10))); } else { fmt_res_137006[0] = HEX24_137202(acf_information_136724(x_136745, 10)).slice(); };
rawEcho(fmt_res_137006[0]);
rawEcho([]);

function HEX2D_134983(v_134985, w_134986) {
	var result_134987 = [{length: 0, data: null}];

		result_134987[0].data = new Float32Array(1012);
		L1: do {
			var i_135004 = 0;
			var colontmp__135007 = 0;
			var colontmp__135008 = 0;
			colontmp__135007 = low_131814(v_134985);
			colontmp__135008 = high_131797(v_134985);
			var res_135011 = colontmp__135007;
			L2: do {
					L3: while (true) {
					if (!(res_135011 <= colontmp__135008)) break L3;
						i_135004 = res_135011;
						HEX5BHEX5DHEX3D_133014(result_134987[0], i_135004, (HEX5BHEX5D_132597(v_134985, i_135004) - HEX5BHEX5D_132597(w_134986, i_135004)));
						res_135011 += 1;
					}
			} while(false);
		} while(false);

	return result_134987[0];

}

function HEX2B_134882(v_134884, k_134885) {
	var result_134886 = [{length: 0, data: null}];

		result_134886[0].data = new Float32Array(1012);
		L1: do {
			var i_134903 = 0;
			var colontmp__134906 = 0;
			var colontmp__134907 = 0;
			colontmp__134906 = low_131814(v_134884);
			colontmp__134907 = high_131797(v_134884);
			var res_134910 = colontmp__134906;
			L2: do {
					L3: while (true) {
					if (!(res_134910 <= colontmp__134907)) break L3;
						i_134903 = res_134910;
						HEX5BHEX5DHEX3D_133014(result_134886[0], i_134903, (HEX5BHEX5D_132597(v_134884, i_134903) + k_134885));
						res_134910 += 1;
					}
			} while(false);
		} while(false);

	return result_134886[0];

}

function HEX2B_134927(k_134929, v_134930) {
	var result_134931 = {length: 0, data: null};

		nimCopy(result_134931, HEX2B_134882(v_134930, k_134929), NTI131018);

	return result_134931;

}

function HEX2EHEX2A_135201(v_135203, k_135204) {
	var result_135205 = [{length: 0, data: null}];

		result_135205[0].data = new Float32Array(1012);
		L1: do {
			var i_135222 = 0;
			var colontmp__135225 = 0;
			var colontmp__135226 = 0;
			colontmp__135225 = low_131814(v_135203);
			colontmp__135226 = high_131797(v_135203);
			var res_135229 = colontmp__135225;
			L2: do {
					L3: while (true) {
					if (!(res_135229 <= colontmp__135226)) break L3;
						i_135222 = res_135229;
						HEX5BHEX5DHEX3D_133014(result_135205[0], i_135222, (HEX5BHEX5D_132597(v_135203, i_135222) * k_135204));
						res_135229 += 1;
					}
			} while(false);
		} while(false);

	return result_135205[0];

}

function HEX2EHEX2A_135246(k_135248, v_135249) {
	var result_135250 = {length: 0, data: null};

		nimCopy(result_135250, HEX2EHEX2A_135201(v_135249, k_135248), NTI131018);

	return result_135250;

}

function HEX2A_135320(k_135322, v_135323) {
	var result_135324 = {length: 0, data: null};

		nimCopy(result_135324, HEX2EHEX2A_135246(k_135322, v_135323), NTI131018);

	return result_135324;

}

function HEX5E_135619(v_135621, w_135622) {
	var result_135623 = 0.0;

		result_135623 = Math.pow(v_135621, w_135622);

	return result_135623;

}

function HEX2EHEX5E_135682(v_135684, k_135685) {
	var result_135686 = [{length: 0, data: null}];

		result_135686[0].data = new Float32Array(1012);
		L1: do {
			var i_135703 = 0;
			var colontmp__135706 = 0;
			var colontmp__135707 = 0;
			colontmp__135706 = low_131814(v_135684);
			colontmp__135707 = high_131797(v_135684);
			var res_135710 = colontmp__135706;
			L2: do {
					L3: while (true) {
					if (!(res_135710 <= colontmp__135707)) break L3;
						i_135703 = res_135710;
						HEX5BHEX5DHEX3D_133014(result_135686[0], i_135703, HEX5E_135619(HEX5BHEX5D_132597(v_135684, i_135703), k_135685));
						res_135710 += 1;
					}
			} while(false);
		} while(false);

	return result_135686[0];

}

function student_t_ppf_95p_136536(df_136538) {
	var result_136539 = 0.0;

	BeforeRet: do {
		if ((38 < df_136538)) {
		result_136539 = 1.9600000000000000e+000;
		break BeforeRet;
		}
		else {
		if ((df_136538 <= 1)) {
		result_136539 = 1.2710000000000001e+001;
		break BeforeRet;
		}
		}
		result_136539 = table_ppf_136540[df_136538];
		break BeforeRet;
	} while (false);

	return result_136539;

}

function student_t_ppf_95p_136594(df_136596) {
	var result_136597 = 0.0;

		result_136597 = student_t_ppf_95p_136536(((df_136596)|0));

	return result_136597;

}

function simple_linear_regression(x_144627, y_144628) {
	var result_144629 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0};

		var n_144630 = len_131780(x_144627);
		var sx_144631 = sum_135959(x_144627);
		var sxx_144632 = sum_135959(HEX2EHEX2A_135156(x_144627, x_144627));
		var sy_144633 = sum_135959(y_144628);
		var sxy_144634 = sum_135959(HEX2EHEX2A_135156(x_144627, y_144628));
		var syy_144635 = sum_135959(HEX2EHEX2A_135156(y_144628, y_144628));
		result_144629.n = ((n_144630)|0);
		result_144629.slope = (((n_144630 * sxy_144634) - (sx_144631 * sy_144633)) / (((n_144630 * sxx_144632) - HEX5E_136081(sx_144631, 2)) + 1.0000000000000000e-010));
		result_144629.intercept = ((sy_144633 / n_144630) - ((result_144629.slope * sx_144631) / n_144630));
		result_144629.R2 = ((HEX5E_136081(((n_144630 * sxy_144634) - (sx_144631 * sy_144633)), 2) / ((n_144630 * sxx_144632) - HEX5E_136081(sx_144631, 2))) / (((n_144630 * syy_144635) - HEX5E_136081(sy_144633, 2)) + 1.0000000000000000e-010));
		var residual_144668 = HEX2D_134983(y_144628, HEX2B_134927(result_144629.intercept, HEX2A_135320(result_144629.slope, x_144627)));
		result_144629.residual = nimCopy(null, vector_to_seq_132540(residual_144668), NTI132543);
		result_144629.residual_sum_squares = sum_135959(HEX2EHEX5E_135682(residual_144668, 2.0000000000000000e+000));
		result_144629.residual_variance = ((((n_144630 * syy_144635) - HEX5E_136081(sy_144633, 2)) - (HEX5E_136081(result_144629.slope, 2) * ((n_144630 * sxx_144632) - HEX5E_136081(sx_144631, 2)))) / (((n_144630 * n_144630) - (2.0000000000000000e+000 * n_144630)) + 1.0000000000000000e-010));
		nimCopy(result_144629.autocorrelation_function, acf_information_136724(residual_144668, 100), NTI136613);
		result_144629.slope_variance = ((n_144630 * result_144629.residual_variance) / (((n_144630 * sxx_144632) - HEX5E_136081(sx_144631, 2)) + 1.0000000000000000e-010));
		result_144629.intercept_variance = ((result_144629.slope_variance * sxx_144632) / n_144630);
		result_144629.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_144629.slope_variance)) * student_t_ppf_95p_136594((n_144630 - 2.0000000000000000e+000)));
		result_144629.slope_confidence_interval[0] = (result_144629.slope - (5.0000000000000000e-001 * result_144629.slope_width_confidence_interval));
		result_144629.slope_confidence_interval[1] = (result_144629.slope + (5.0000000000000000e-001 * result_144629.slope_width_confidence_interval));
		result_144629.intercept_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_144629.intercept_variance)) * student_t_ppf_95p_136594((n_144630 - 2.0000000000000000e+000)));
		result_144629.intercept_confidence_interval[0] = (result_144629.intercept - (5.0000000000000000e-001 * result_144629.intercept_width_confidence_interval));
		result_144629.intercept_confidence_interval[1] = (result_144629.intercept + (5.0000000000000000e-001 * result_144629.intercept_width_confidence_interval));

	return result_144629;

}

function simple_linear_regression_wo_intercept(x_144727, y_144728) {
	var result_144729 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0};

		var n_144730 = len_131780(x_144727);
		var sx_144731 = sum_135959(x_144727);
		var sxx_144732 = sum_135959(HEX2EHEX2A_135156(x_144727, x_144727));
		var sy_144733 = sum_135959(y_144728);
		var sxy_144734 = sum_135959(HEX2EHEX2A_135156(x_144727, y_144728));
		var sxxyy_144735 = sum_135959(HEX2EHEX2A_135156(HEX2EHEX2A_135156(x_144727, y_144728), HEX2EHEX2A_135156(x_144727, y_144728)));
		var syy_144736 = sum_135959(HEX2EHEX2A_135156(y_144728, y_144728));
		result_144729.n = ((n_144730)|0);
		result_144729.slope = ((((n_144730 * sxy_144734) - (sx_144731 * sy_144733)) + (sx_144731 * sy_144733)) / ((((n_144730 * sxx_144732) - HEX5E_136081(sx_144731, 2)) + (sx_144731 * sx_144731)) + 1.0000000000000000e-010));
		result_144729.intercept = 0.0;
		result_144729.R2 = ((HEX5E_136081(sxy_144734, 2) + 1.0000000000000000e-010) / ((sxx_144732 * syy_144736) + 1.0000000000000000e-010));
		var residual_144753 = HEX2D_134983(y_144728, HEX2B_134927(result_144729.intercept, HEX2A_135320(result_144729.slope, x_144727)));
		result_144729.residual = nimCopy(null, vector_to_seq_132540(residual_144753), NTI132543);
		result_144729.residual_sum_squares = sum_135959(HEX2EHEX5E_135682(residual_144753, 2.0000000000000000e+000));
		result_144729.residual_variance = (result_144729.residual_sum_squares / ((n_144730 - 1.0000000000000000e+000) + 1.0000000000000000e-010));
		nimCopy(result_144729.autocorrelation_function, acf_information_136724(residual_144753, 100), NTI136613);
		result_144729.slope_variance = (result_144729.residual_variance / (sxx_144732 + 1.0000000000000000e-010));
		result_144729.intercept_variance = 0.0;
		result_144729.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_144729.slope_variance)) * student_t_ppf_95p_136594((n_144730 - 1.0000000000000000e+000)));
		result_144729.slope_confidence_interval[0] = (result_144729.slope - (5.0000000000000000e-001 * result_144729.slope_width_confidence_interval));
		result_144729.slope_confidence_interval[1] = (result_144729.slope + (5.0000000000000000e-001 * result_144729.slope_width_confidence_interval));
		result_144729.intercept_width_confidence_interval = 0.0;
		result_144729.intercept_confidence_interval[0] = 0.0;
		result_144729.intercept_confidence_interval[1] = 0.0;

	return result_144729;

}

function arma(x_144781, y_144782) {
	var result_144783 = {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}};

		nimCopy(result_144783.mean_structure, simple_linear_regression(x_144781, y_144782), NTI139610);
		var residuals_144784 = HEX2D_134983(y_144782, HEX2B_134927(result_144783.mean_structure.intercept, HEX2A_135320(result_144783.mean_structure.slope, x_144781)));
		nimCopy(result_144783.autoregressive_structure, simple_linear_regression_wo_intercept(HEX5BHEX5D_133414(residuals_144784, HEX2EHEX2E_56828(0, (high_131797(residuals_144784) - 1))), HEX5BHEX5D_133414(residuals_144784, HEX2EHEX2E_56828(1, high_131797(residuals_144784)))), NTI139610);

	return result_144783;

}

function HEX2BHEX3D_31100(x_31105, x_31105_Idx, y_31107) {
		x_31105[x_31105_Idx] = (x_31105[x_31105_Idx] + y_31107);

	
}

function HEX2DHEX3D_144840(x_144845, x_144845_Idx, y_144847) {
		x_144845[x_144845_Idx] = (x_144845[x_144845_Idx] - y_144847);

	
}

function HEX2EHEX5E_135772(v_135774, k_135775) {
	var result_135776 = {length: 0, data: null};

		nimCopy(result_135776, HEX2EHEX5E_135682(v_135774, k_135775), NTI131018);

	return result_135776;

}

function normal_loglikelihood_144822(x_144824, y_144825, slope_144826, intercept_144827, sigma2_144828) {
	var result_144829 = [0.0];

		var n_144830 = len_131780(x_144824);
		result_144829[0] = ((-5.0000000000000000e-001 * n_144830) * Math.log(((6.2831853071795862e+000 * sigma2_144828) + 1.0000000000000000e-010)));
		HEX2DHEX3D_144840(result_144829, 0, (sum_135959(HEX2EHEX5E_135772(HEX2D_134983(y_144825, HEX2B_134927(intercept_144827, HEX2A_135320(slope_144826, x_144824))), 2)) / ((2.0000000000000000e+000 * sigma2_144828) + 1.0000000000000000e-010)));

	return result_144829[0];

}

function analysis_at_point_t_144877(x_144879, y_144880, change_point_144881) {
	var result_144882 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}};

		var n_144883 = len_131780(x_144879);
		var x_before_144896 = HEX5BHEX5D_133414(x_144879, HEX2EHEX2E_56828(0, (change_point_144881 - 1)));
		var y_before_144909 = HEX5BHEX5D_133414(y_144880, HEX2EHEX2E_56828(0, (change_point_144881 - 1)));
		var x_after_144920 = HEX5BHEX5D_133414(x_144879, HEX2EHEX2E_56828(change_point_144881, high_131797(x_144879)));
		var y_after_144931 = HEX5BHEX5D_133414(y_144880, HEX2EHEX2E_56828(change_point_144881, high_131797(y_144880)));
		nimCopy(result_144882.before_change, arma(x_before_144896, y_before_144909), NTI139633);
		HEX2BHEX3D_31100(result_144882, "loglikelihood", normal_loglikelihood_144822(x_before_144896, y_before_144909, result_144882.before_change.mean_structure.slope, result_144882.before_change.mean_structure.intercept, result_144882.before_change.autoregressive_structure.residual_variance));
		nimCopy(result_144882.after_change, arma(x_after_144920, y_after_144931), NTI139633);
		HEX2BHEX3D_31100(result_144882, "loglikelihood", normal_loglikelihood_144822(x_after_144920, y_after_144931, result_144882.after_change.mean_structure.slope, result_144882.after_change.mean_structure.intercept, result_144882.after_change.autoregressive_structure.residual_variance));

	return result_144882;

}

function robust_interrupted_time_series_model_144965(x_144967, y_144968, change_point_144969, candidates_before_144970, candidates_after_144971) {
								var Tmp5;

	var result_144972 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}};

		var ll_result_144973 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}};
		result_144972.likelihood.best_loglikelihood = -1.0000000000000000e+100;
		L1: do {
			var t_144983 = 0;
			var colontmp__145006 = 0;
			var colontmp__145007 = 0;
			colontmp__145006 = (change_point_144969 - candidates_before_144970);
			colontmp__145007 = (change_point_144969 + candidates_after_144971);
			var res_145010 = colontmp__145006;
			L2: do {
					L3: while (true) {
					if (!(res_145010 <= colontmp__145007)) break L3;
						t_144983 = res_145010;
						L4: do {
								if ((t_144983 < 3)) Tmp5 = true; else {									Tmp5 = (high_131797(x_144967) < t_144983);								}							if (Tmp5) {
							break L4;
							}
							
							nimCopy(ll_result_144973, analysis_at_point_t_144877(x_144967, y_144968, t_144983), NTI139637);
							var Tmp6 = nimCopy(null, t_144983, NTI17403);
							if (result_144972.likelihood.change_points != null) { result_144972.likelihood.change_points.push(Tmp6); } else { result_144972.likelihood.change_points = [Tmp6]; };
							var Tmp7 = nimCopy(null, ll_result_144973.loglikelihood, NTI124);
							if (result_144972.likelihood.loglikelihood != null) { result_144972.likelihood.loglikelihood.push(Tmp7); } else { result_144972.likelihood.loglikelihood = [Tmp7]; };
							if ((result_144972.likelihood.best_loglikelihood < ll_result_144973.loglikelihood)) {
							result_144972.likelihood.best_loglikelihood = ll_result_144973.loglikelihood;
							result_144972.likelihood.best_likelihood = Math.exp(ll_result_144973.loglikelihood);
							result_144972.likelihood.best_index = t_144983;
							result_144972.likelihood.best_time = HEX5BHEX5D_132597(x_144967, t_144983);
							nimCopy(result_144972.before_change, ll_result_144973.before_change, NTI139633);
							nimCopy(result_144972.after_change, ll_result_144973.after_change, NTI139633);
							}
							
						} while(false);
						res_145010 += 1;
					}
			} while(false);
		} while(false);

	return result_144972;

}

function robust_interrupted_time_series(x_145030, y_145032, change_point_145033, candidates_before_145034, candidates_after_145035) {
	var result_145036 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}};

		nimCopy(result_145036, robust_interrupted_time_series_model_144965(vector_131240(x_145030), vector_131240(y_145032), change_point_145033, candidates_before_145034, candidates_after_145035), NTI139652);

	return result_145036;

}

function vector_reduced_131689(v_131692, sampling_131693) {
	var result_131694 = {length: 0, data: null};

		result_131694.data = new Float32Array(1012);
		result_131694.length = (v_131692 != null ? v_131692.length : 0);
		var i_131709 = 0;
		L1: do {
			var k_131732 = 0;
			var colontmp__131760 = 0;
			colontmp__131760 = (v_131692 != null ? (v_131692.length-1) : -1);
			var res_131763 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_131763 <= colontmp__131760)) break L3;
						k_131732 = res_131763;
						L4: do {
							if (!((Math.trunc(k_131732 % sampling_131693) == 0))) {
							break L4;
							}
							
							check_value_131284(result_131694, "data", result_131694.length, i_131709, v_131692, k_131732);
							i_131709 += 1;
						} while(false);
						res_131763 += 1;
					}
			} while(false);
		} while(false);
		result_131694.length = i_131709;
		nimCopy(result_131694, result_131694, NTI131018);

	return result_131694;

}

function robust_interrupted_time_series_approximated(sampling_145052, x_145054, y_145056, change_point_145057, candidates_before_145058, candidates_after_145059) {
	var result_145060 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}};

		nimCopy(result_145060, robust_interrupted_time_series_model_144965(vector_reduced_131689(x_145054, sampling_145052), vector_reduced_131689(y_145056, sampling_145052), (((change_point_145057 / sampling_145052))|0), (((candidates_before_145058 / sampling_145052))|0), (((candidates_after_145059 / sampling_145052))|0)), NTI139652);

	return result_145060;

}
var state_146605 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_153832 = [null];
var local_instance_153833 = [null];

function HEX2A_150401(a_150403, b_150404) {
	var result_150405 = 0;

		result_150405 = (a_150403 * b_150404);

	return result_150405;

}

function convert_151453(unit_from_151457, unit_to_151459, quantity_151461) {
		var Tmp1;

	var result_151462 = 0;

		if ((unit_from_151457 < unit_to_151459)) {
		Tmp1 = Math.trunc(quantity_151461 / Math.trunc(unit_weights_151017[unit_to_151459] / unit_weights_151017[unit_from_151457]));
		}
		else {
		Tmp1 = HEX2A_150401(Math.trunc(unit_weights_151017[unit_from_151457] / unit_weights_151017[unit_to_151459]), quantity_151461);
		}
		
		result_151462 = Tmp1;

	return result_151462;

}

function init_time_151090(unix_151092, nanosecond_151093) {
	var result_153018 = {seconds: 0, nanosecond: 0};

		result_153018.seconds = unix_151092;
		result_153018.nanosecond = nanosecond_151093;

	return result_153018;

}

function get_time_153961() {
	var result_153963 = {seconds: 0, nanosecond: 0};

		var millis_154001 = new Date().getTime();
		var seconds_154012 = convert_151453(2, 3, millis_154001);
		var nanos_154034 = convert_151453(2, 0, Math.trunc(millis_154001 % convert_151453(3, 2, 1)));
		nimCopy(result_153963, init_time_151090(seconds_154012, nanos_154034), NTI150818);

	return result_153963;

}
var start_163831 = [get_time_153961()];

function rotl_146815(x_146817, k_146818) {
	var result_146819 = 0;

		result_146819 = ((x_146817 << k_146818) | ((x_146817 >>> 0) >>> ((64 - k_146818) >>> 0)));

	return result_146819;

}

function next_146867(r_146870) {
	var result_146871 = 0;

		var s0_146872 = r_146870.a0;
		var s1_146873 = r_146870.a1;
		result_146871 = ((s0_146872 + s1_146873) >>> 0);
		s1_146873 = (s1_146873 ^ s0_146872);
		r_146870.a0 = ((rotl_146815(s0_146872, 55) ^ s1_146873) ^ (s1_146873 << 14));
		r_146870.a1 = rotl_146815(s1_146873, 36);

	return result_146871;

}

function rand_147248(r_147251, max_147252) {
	var result_147253 = 0;

	BeforeRet: do {
		if ((max_147252 == 0)) {
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var x_147254 = next_146867(r_147251);
					if ((x_147254 <= ((4294967295 - (4294967295 % max_147252)) >>> 0))) {
					result_147253 = (((x_147254 % ((max_147252 + 1) )))|0);
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);

	return result_147253;

}

function rand_147312(max_147314) {
	var result_147315 = 0;

		result_147315 = rand_147248(state_146605[0], max_147314);

	return result_147315;

}

function format_140202(value_140206, specifier_140208, res_140210, res_140210_Idx) {
		var Tmp1;

		var spec_140211 = parse_standard_format_specifier_129928(specifier_140208, 0, false);
		var fmode_140212 = 0;
		switch (spec_140211.typ) {
		case 101:
		case 69:
			fmode_140212 = 2;
			break;
		case 102:
		case 70:
			fmode_140212 = 1;
			break;
		case 103:
		case 71:
			fmode_140212 = 0;
			break;
		case 0:
			break;
		default: 
			var e_140218 = null;
			e_140218 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_140218.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_140211.typ]), NTI138);
			e_140218.parent = null;
			raiseException(e_140218, "ValueError");
			break;
		}
		var f_140227 = [nsuformatBiggestFloat(value_140206, fmode_140212, spec_140211.precision, 46)];
		var sign_140228 = false;
		if ((0.0 <= value_140206)) {
		if (!((spec_140211.sign == 45))) {
		sign_140228 = true;
		if ((value_140206 == 0.0)) {
		if (((1.0000000000000000e+000 / value_140206) == Infinity)) {
		insert_21601(f_140227, 0, nimCharToStr(spec_140211.sign), 0);
		}
		
		}
		else {
		insert_21601(f_140227, 0, nimCharToStr(spec_140211.sign), 0);
		}
		
		}
		
		}
		else {
			sign_140228 = true;
		}
		
		if (spec_140211.padWithZero) {
		var sign_str_140232 = [];
		if (sign_140228) {
		sign_str_140232 = nimCopy(null, nimCharToStr(f_140227[0][0]), NTI138);
		f_140227[0] = nimCopy(null, HEX5BHEX5D_88905(f_140227[0], HEX2EHEX2E_88853(1, 1)), NTI138);
		}
		
		var to_fill_140287 = ((spec_140211.minimumWidth - (f_140227[0] != null ? f_140227[0].length : 0)) - (sign_140228 ? 1:0));
		if ((0 < to_fill_140287)) {
		f_140227[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_140287)).concat(f_140227[0]), NTI138);
		}
		
		if (sign_140228) {
		f_140227[0] = nimCopy(null, (sign_str_140232).concat(f_140227[0]), NTI138);
		}
		
		}
		
		if ((spec_140211.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_140211.align;
		}
		
		var align_140290 = Tmp1;
		var result_140291 = align_string_129827(f_140227[0], spec_140211.minimumWidth, align_140290, spec_140211.fill);
		if ((ConstSet12[spec_140211.typ] != undefined)) {
		if (res_140210[res_140210_Idx] != null) { res_140210[res_140210_Idx] = (res_140210[res_140210_Idx]).concat(nsuToUpperAsciiStr(result_140291)); } else { res_140210[res_140210_Idx] = nsuToUpperAsciiStr(result_140291).slice(); };
		}
		else {
		if (res_140210[res_140210_Idx] != null) { res_140210[res_140210_Idx] = (res_140210[res_140210_Idx]).concat(result_140291); } else { res_140210[res_140210_Idx] = result_140291.slice(); };
		}
		

	
}

function HEX24_139670(params_139672) {
	var result_139673 = null;

		var fmt_res_139677 = [mnewString(0)];
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit("    slope: ")); } else { fmt_res_139677[0] = makeNimstrLit("    slope: "); };
		format_140202(params_139672.slope, makeNimstrLit(".3f"), fmt_res_139677, 0);
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_139677[0] = makeNimstrLit(" (var: "); };
		format_140202(params_139672.slope_variance, makeNimstrLit(".3f"), fmt_res_139677, 0);
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_139677[0] = makeNimstrLit(", CI width: "); };
		format_140202(params_139672.slope_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_139677, 0);
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit(")\x0A    intercept: ")); } else { fmt_res_139677[0] = makeNimstrLit(")\x0A    intercept: "); };
		format_140202(params_139672.intercept, makeNimstrLit(".3f"), fmt_res_139677, 0);
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_139677[0] = makeNimstrLit(" (var: "); };
		format_140202(params_139672.intercept_variance, makeNimstrLit(".3f"), fmt_res_139677, 0);
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_139677[0] = makeNimstrLit(", CI width: "); };
		format_140202(params_139672.intercept_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_139677, 0);
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit(")\x0A    R2: ")); } else { fmt_res_139677[0] = makeNimstrLit(")\x0A    R2: "); };
		format_140202(params_139672.R2, makeNimstrLit(".3f"), fmt_res_139677, 0);
		if (fmt_res_139677[0] != null) { fmt_res_139677[0] = (fmt_res_139677[0]).concat(makeNimstrLit("\x0A    SSE: ")); } else { fmt_res_139677[0] = makeNimstrLit("\x0A    SSE: "); };
		format_140202(params_139672.residual_sum_squares, makeNimstrLit(".3f"), fmt_res_139677, 0);
		result_139673 = nimCopy(null, fmt_res_139677[0], NTI138);

	return result_139673;

}

function add_quoted_168602(s_168606, s_168606_Idx, x_168608) {
		if (s_168606[s_168606_Idx] != null) { s_168606[s_168606_Idx] = (s_168606[s_168606_Idx]).concat(HEX24_139670(x_168608)); } else { s_168606[s_168606_Idx] = HEX24_139670(x_168608).slice(); };

	
}

function HEX24_168402(x_168406) {
	var result_168407 = [null];

		result_168407[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_168408 = true;
		if (!(first_element_168408)) {
		if (result_168407[0] != null) { result_168407[0] = (result_168407[0]).concat(makeNimstrLit(", ")); } else { result_168407[0] = makeNimstrLit(", "); };
		}
		
		if (result_168407[0] != null) { result_168407[0] = (result_168407[0]).concat(makeNimstrLit("mean_structure")); } else { result_168407[0] = makeNimstrLit("mean_structure"); };
		if (result_168407[0] != null) { result_168407[0] = (result_168407[0]).concat(makeNimstrLit(": ")); } else { result_168407[0] = makeNimstrLit(": "); };
		add_quoted_168602(result_168407, 0, x_168406.mean_structure);
		first_element_168408 = false;
		if (!(first_element_168408)) {
		if (result_168407[0] != null) { result_168407[0] = (result_168407[0]).concat(makeNimstrLit(", ")); } else { result_168407[0] = makeNimstrLit(", "); };
		}
		
		if (result_168407[0] != null) { result_168407[0] = (result_168407[0]).concat(makeNimstrLit("autoregressive_structure")); } else { result_168407[0] = makeNimstrLit("autoregressive_structure"); };
		if (result_168407[0] != null) { result_168407[0] = (result_168407[0]).concat(makeNimstrLit(": ")); } else { result_168407[0] = makeNimstrLit(": "); };
		add_quoted_168602(result_168407, 0, x_168406.autoregressive_structure);
		first_element_168408 = false;
		if (result_168407[0] != null) { result_168407[0] = (result_168407[0]).concat(makeNimstrLit(")")); } else { result_168407[0] = makeNimstrLit(")"); };

	return result_168407[0];

}

function add_quoted_168202(s_168206, s_168206_Idx, x_168208) {
		if (s_168206[s_168206_Idx] != null) { s_168206[s_168206_Idx] = (s_168206[s_168206_Idx]).concat(HEX24_168402(x_168208)); } else { s_168206[s_168206_Idx] = HEX24_168402(x_168208).slice(); };

	
}

function add_quoted_177802(s_177806, s_177806_Idx, x_177808) {
		if (s_177806[s_177806_Idx] != null) { s_177806[s_177806_Idx] = (s_177806[s_177806_Idx]).concat(cstrToNimstr((x_177808)+"")); } else { s_177806[s_177806_Idx] = cstrToNimstr((x_177808)+"").slice(); };

	
}

function collection_to_string_177611(x_177615, prefix_177617, separator_177619, suffix_177621) {
	var result_177622 = [null];

		result_177622[0] = nimCopy(null, prefix_177617, NTI138);
		var first_element_177623 = true;
		L1: do {
			var value_177632 = 0;
			var i_178018 = 0;
			var l_178020 = (x_177615 != null ? x_177615.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_178018 < l_178020)) break L3;
						value_177632 = x_177615[i_178018];
						if (first_element_177623) {
						first_element_177623 = false;
						}
						else {
						if (result_177622[0] != null) { result_177622[0] = (result_177622[0]).concat(separator_177619); } else { result_177622[0] = separator_177619.slice(); };
						}
						
						add_quoted_177802(result_177622, 0, value_177632);
						i_178018 += 1;
					}
			} while(false);
		} while(false);
		if (result_177622[0] != null) { result_177622[0] = (result_177622[0]).concat(suffix_177621); } else { result_177622[0] = suffix_177621.slice(); };

	return result_177622[0];

}

function HEX24_177603(x_177608) {
	var result_177609 = null;

		result_177609 = nimCopy(null, collection_to_string_177611(x_177608, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_177609;

}

function add_quoted_177402(s_177406, s_177406_Idx, x_177408) {
		if (s_177406[s_177406_Idx] != null) { s_177406[s_177406_Idx] = (s_177406[s_177406_Idx]).concat(HEX24_177603(x_177408)); } else { s_177406[s_177406_Idx] = HEX24_177603(x_177408).slice(); };

	
}

function HEX24_176602(x_176606) {
	var result_176607 = [null];

		result_176607[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_176608 = true;
		if (!(first_element_176608)) {
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(", ")); } else { result_176607[0] = makeNimstrLit(", "); };
		}
		
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit("change_points")); } else { result_176607[0] = makeNimstrLit("change_points"); };
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(": ")); } else { result_176607[0] = makeNimstrLit(": "); };
		add_quoted_177402(result_176607, 0, x_176606.change_points);
		first_element_176608 = false;
		if (!(first_element_176608)) {
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(", ")); } else { result_176607[0] = makeNimstrLit(", "); };
		}
		
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit("loglikelihood")); } else { result_176607[0] = makeNimstrLit("loglikelihood"); };
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(": ")); } else { result_176607[0] = makeNimstrLit(": "); };
		add_quoted_138002(result_176607, 0, x_176606.loglikelihood);
		first_element_176608 = false;
		if (!(first_element_176608)) {
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(", ")); } else { result_176607[0] = makeNimstrLit(", "); };
		}
		
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit("best_loglikelihood")); } else { result_176607[0] = makeNimstrLit("best_loglikelihood"); };
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(": ")); } else { result_176607[0] = makeNimstrLit(": "); };
		add_quoted_138602(result_176607, 0, x_176606.best_loglikelihood);
		first_element_176608 = false;
		if (!(first_element_176608)) {
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(", ")); } else { result_176607[0] = makeNimstrLit(", "); };
		}
		
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit("best_likelihood")); } else { result_176607[0] = makeNimstrLit("best_likelihood"); };
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(": ")); } else { result_176607[0] = makeNimstrLit(": "); };
		add_quoted_138602(result_176607, 0, x_176606.best_likelihood);
		first_element_176608 = false;
		if (!(first_element_176608)) {
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(", ")); } else { result_176607[0] = makeNimstrLit(", "); };
		}
		
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit("best_time")); } else { result_176607[0] = makeNimstrLit("best_time"); };
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(": ")); } else { result_176607[0] = makeNimstrLit(": "); };
		add_quoted_138602(result_176607, 0, x_176606.best_time);
		first_element_176608 = false;
		if (!(first_element_176608)) {
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(", ")); } else { result_176607[0] = makeNimstrLit(", "); };
		}
		
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit("best_index")); } else { result_176607[0] = makeNimstrLit("best_index"); };
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(": ")); } else { result_176607[0] = makeNimstrLit(": "); };
		add_quoted_177802(result_176607, 0, x_176606.best_index);
		first_element_176608 = false;
		if (result_176607[0] != null) { result_176607[0] = (result_176607[0]).concat(makeNimstrLit(")")); } else { result_176607[0] = makeNimstrLit(")"); };

	return result_176607[0];

}

function add_quoted_176402(s_176406, s_176406_Idx, x_176408) {
		if (s_176406[s_176406_Idx] != null) { s_176406[s_176406_Idx] = (s_176406[s_176406_Idx]).concat(HEX24_176602(x_176408)); } else { s_176406[s_176406_Idx] = HEX24_176602(x_176408).slice(); };

	
}

function HEX24_167016(x_167020) {
	var result_167021 = [null];

		result_167021[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_167022 = true;
		if (!(first_element_167022)) {
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit(", ")); } else { result_167021[0] = makeNimstrLit(", "); };
		}
		
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit("before_change")); } else { result_167021[0] = makeNimstrLit("before_change"); };
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit(": ")); } else { result_167021[0] = makeNimstrLit(": "); };
		add_quoted_168202(result_167021, 0, x_167020.before_change);
		first_element_167022 = false;
		if (!(first_element_167022)) {
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit(", ")); } else { result_167021[0] = makeNimstrLit(", "); };
		}
		
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit("after_change")); } else { result_167021[0] = makeNimstrLit("after_change"); };
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit(": ")); } else { result_167021[0] = makeNimstrLit(": "); };
		add_quoted_168202(result_167021, 0, x_167020.after_change);
		first_element_167022 = false;
		if (!(first_element_167022)) {
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit(", ")); } else { result_167021[0] = makeNimstrLit(", "); };
		}
		
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit("likelihood")); } else { result_167021[0] = makeNimstrLit("likelihood"); };
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit(": ")); } else { result_167021[0] = makeNimstrLit(": "); };
		add_quoted_176402(result_167021, 0, x_167020.likelihood);
		first_element_167022 = false;
		if (result_167021[0] != null) { result_167021[0] = (result_167021[0]).concat(makeNimstrLit(")")); } else { result_167021[0] = makeNimstrLit(")"); };

	return result_167021[0];

}

function test_model_change_point_166040(change_point_166042, candidates_166043, verbose_166044) {
		rawEcho(makeNimstrLit("Robust Interrupted Time Series Model v3.0\x0A"));
		rawEcho(makeNimstrLit("Boot sample test"));
		L1: do {
			var HEX3Atmp_166209 = nimCopy(null, [1.0000000000000000e+000, 2.0000000000000000e+000, 3.0000000000000000e+000, 4.0000000000000000e+000, 5.0000000000000000e+000, 6.0000000000000000e+000, 7.0000000000000000e+000, 8.0000000000000000e+000, 9.0000000000000000e+000, 1.0000000000000000e+001, 1.1000000000000000e+001, 1.2000000000000000e+001, 1.3000000000000000e+001, 1.4000000000000000e+001, 1.5000000000000000e+001, 1.6000000000000000e+001, 1.7000000000000000e+001, 1.8000000000000000e+001, 1.9000000000000000e+001, 2.0000000000000000e+001], NTI166062);
			var i_166213 = 0;
			var result_166230 = new_seq_131619((HEX3Atmp_166209 != null ? HEX3Atmp_166209.length : 0));
			L2: do {
				var it_166239 = 0.0;
				var i_181040 = 0;
				var l_181042 = (HEX3Atmp_166209 != null ? HEX3Atmp_166209.length : 0);
				L3: do {
						L4: while (true) {
						if (!(i_181040 < l_181042)) break L4;
							it_166239 = HEX3Atmp_166209[i_181040];
							result_166230[i_166213] = it_166239;
							i_166213 += 1;
							i_181040 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var x_166251 = nimCopy(null, result_166230, NTI131624);
		L5: do {
			var HEX3Atmp_166609 = nimCopy(null, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], NTI166274);
			var i_166613 = 0;
			var result_166630 = new_seq_131619((HEX3Atmp_166609 != null ? HEX3Atmp_166609.length : 0));
			L6: do {
				var it_166639 = 0;
				var i_181048 = 0;
				var l_181050 = (HEX3Atmp_166609 != null ? HEX3Atmp_166609.length : 0);
				L7: do {
						L8: while (true) {
						if (!(i_181048 < l_181050)) break L8;
							it_166639 = HEX3Atmp_166609[i_181048];
							result_166630[i_166613] = it_166639;
							i_166613 += 1;
							i_181048 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var y_166651 = nimCopy(null, result_166630, NTI131624);
		L9: do {
			var t_166671 = 0;
			var colontmp__181055 = 0;
			colontmp__181055 = (x_166251 != null ? (x_166251.length-1) : -1);
			var res_181058 = 0;
			L10: do {
					L11: while (true) {
					if (!(res_181058 <= colontmp__181055)) break L11;
						t_166671 = res_181058;
						y_166651[t_166671] = (y_166651[t_166671] + ((0.0 * rand_147312(1000)) / 1.0000000000000000e+003));
						res_181058 += 1;
					}
			} while(false);
		} while(false);
		if (verbose_166044) {
		var fmt_res_166679 = mnewString(0);
		if (fmt_res_166679 != null) { fmt_res_166679 = (fmt_res_166679).concat(makeNimstrLit("X: ")); } else { fmt_res_166679 = makeNimstrLit("X: "); };
		if (fmt_res_166679 != null) { fmt_res_166679 = (fmt_res_166679).concat(HEX24_138203(x_166251)); } else { fmt_res_166679 = HEX24_138203(x_166251).slice(); };
		rawEcho(fmt_res_166679);
		var fmt_res_166814 = mnewString(0);
		if (fmt_res_166814 != null) { fmt_res_166814 = (fmt_res_166814).concat(makeNimstrLit("Y: ")); } else { fmt_res_166814 = makeNimstrLit("Y: "); };
		if (fmt_res_166814 != null) { fmt_res_166814 = (fmt_res_166814).concat(HEX24_138203(y_166651)); } else { fmt_res_166814 = HEX24_138203(y_166651).slice(); };
		rawEcho(fmt_res_166814);
		}
		
		var candidates_after_167012 = candidates_166043;
		var candidates_before_167013 = candidates_166043;
		var model_167014 = robust_interrupted_time_series(x_166251, y_166651, change_point_166042, candidates_before_167013, candidates_after_167012);
		if (verbose_166044) {
		rawEcho(HEX24_167016(model_167014));
		}
		

	
}
test_model_change_point_166040(7, 5, true);
exports.robust_interrupted_time_series = robust_interrupted_time_series
exports.robust_interrupted_time_series_approximated = robust_interrupted_time_series_approximated
exports.fix_vector = fix_vector
