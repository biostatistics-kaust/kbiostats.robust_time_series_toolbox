/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI163463 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI163474 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI131624 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI163062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI147878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI147816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI147818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI148020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI136400 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI136398 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI136397 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI136407 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI17403 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI136392 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI136388 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI136380 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI136373 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI136368 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI136288 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI126 = {size: 0,kind: 37,base: null,node: null,finalizer: null};
var NTI131021 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI131022 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI131017 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3896 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3804 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI136201 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI3804.base = NTI3896;
var NNI136201 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3804, name: "Field1", sons: null}]};
NTI136201.node = NNI136201;
NTI131021.base = NTI126;
NTI131022.base = NTI131021;
var NNI131017 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "length", len: 0, typ: NTI104, name: "length", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI131022, name: "data", sons: null}]};
NTI131017.node = NNI131017;
NTI136288.base = NTI128;
NTI136373.base = NTI124;
NTI136380.base = NTI124;
var NNI136368 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI124, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI124, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI136373, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI124, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI124, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI124, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI136380, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI124, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "R2", len: 0, typ: NTI124, name: "R2", sons: null}, 
{kind: 1, offset: "residual_sum_squares", len: 0, typ: NTI124, name: "residual_sum_squares", sons: null}, 
{kind: 1, offset: "residual_variance", len: 0, typ: NTI124, name: "residual_variance", sons: null}, 
{kind: 1, offset: "n", len: 0, typ: NTI104, name: "n", sons: null}]};
NTI136368.node = NNI136368;
var NNI136388 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mean_structure", len: 0, typ: NTI136368, name: "mean_structure", sons: null}, 
{kind: 1, offset: "autoregressive_structure", len: 0, typ: NTI136368, name: "autoregressive_structure", sons: null}]};
NTI136388.node = NNI136388;
var NNI136392 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "loglikelihood", len: 0, typ: NTI124, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "before_change", len: 0, typ: NTI136388, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI136388, name: "after_change", sons: null}]};
NTI136392.node = NNI136392;
NTI136398.base = NTI104;
NTI136400.base = NTI124;
var NNI136397 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "change_points", len: 0, typ: NTI136398, name: "change_points", sons: null}, 
{kind: 1, offset: "loglikelihood", len: 0, typ: NTI136400, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "best_loglikelihood", len: 0, typ: NTI124, name: "best_loglikelihood", sons: null}, 
{kind: 1, offset: "best_likelihood", len: 0, typ: NTI124, name: "best_likelihood", sons: null}, 
{kind: 1, offset: "best_time", len: 0, typ: NTI124, name: "best_time", sons: null}, 
{kind: 1, offset: "best_index", len: 0, typ: NTI104, name: "best_index", sons: null}]};
NTI136397.node = NNI136397;
var NNI136407 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "before_change", len: 0, typ: NTI136388, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI136388, name: "after_change", sons: null}, 
{kind: 1, offset: "likelihood", len: 0, typ: NTI136397, name: "likelihood", sons: null}]};
NTI136407.node = NNI136407;
NTI148020.base = NTI112;
NTI147816.base = NTI147878;
var NNI147818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI147816, name: "nanosecond", sons: null}]};
NTI147818.node = NNI147818;
NTI163062.base = NTI128;
NTI131624.base = NTI124;
NTI163474.base = NTI163463;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3852.base = NTI3828;

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}
		var table_ppf_136287 = nimCopy(null, [1.0000000000000001e+050, 1.2710000000000001e+001, 4.3029999999999999e+000, 3.1819999999999999e+000, 2.7759999999999998e+000, 2.5710000000000002e+000, 2.4470000000000001e+000, 2.3650000000000002e+000, 2.3060000000000000e+000, 2.2620000000000000e+000, 2.2280000000000002e+000, 2.2010000000000001e+000, 2.1789999999999998e+000, 2.1600000000000001e+000, 2.1450000000000000e+000, 2.1309999999999998e+000, 2.1200000000000001e+000, 2.1099999999999999e+000, 2.1010000000000000e+000, 2.0930000000000000e+000, 2.0859999999999999e+000, 2.0800000000000001e+000, 2.0739999999999998e+000, 2.0690000000000000e+000, 2.0640000000000001e+000, 2.0600000000000001e+000, 2.0560000000000000e+000, 2.0520000000000000e+000, 2.0480000000000000e+000, 2.0449999999999999e+000, 2.0419999999999998e+000, 2.0209999999999999e+000, 2.0089999999999999e+000, 2.0000000000000000e+000, 1.9900000000000000e+000, 1.9840000000000000e+000, 1.9800000000000000e+000, 1.9600000000000000e+000], NTI136288);
		var unit_weights_148017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI148020);

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		throw e_15818;

	
}
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
var nimvm_7173 = false;
process.exitCode = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];

function classify_29032(x_29034) {
	var result_29035 = 0;

	BeforeRet: do {
		if ((x_29034 == 0.0)) {
		if (((1.0000000000000000e+000 / x_29034) == Infinity)) {
		result_29035 = 2;
		break BeforeRet;
		}
		else {
			result_29035 = 3;
			break BeforeRet;
		}
		
		}
		
		if (((x_29034 * 5.0000000000000000e-001) == x_29034)) {
		if ((0.0 < x_29034)) {
		result_29035 = 5;
		break BeforeRet;
		}
		else {
			result_29035 = 6;
			break BeforeRet;
		}
		
		}
		
		if (!((x_29034 == x_29034))) {
		result_29035 = 4;
		break BeforeRet;
		}
		
		result_29035 = 0;
		break BeforeRet;
	} while (false);

	return result_29035;

}

function check_value_131144(data_131149, data_131149_Idx, length_131151, idx_131153, w_131155, w_idx_131157) {
			var Tmp1;

		var v_131158 = w_131155[w_idx_131157];
			if ((((classify_29032(v_131158) == 4) || (classify_29032(v_131158) == 5)) || (classify_29032(v_131158) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_131158 * 1.0000000000000000e+001) / 1.0000000000000000e+001) == v_131158));			}		if (Tmp1) {
		if ((idx_131153 == 0)) {
		data_131149[data_131149_Idx][idx_131153] = w_131155[(w_idx_131157 + 1)];
		}
		else {
		if ((idx_131153 == (length_131151 - 1))) {
		data_131149[data_131149_Idx][idx_131153] = w_131155[(w_idx_131157 - 1)];
		}
		else {
			data_131149[data_131149_Idx][idx_131153] = (5.0000000000000000e-001 * (w_131155[(w_idx_131157 - 1)] + w_131155[(w_idx_131157 + 1)]));
		}
		}
		}
		else {
			data_131149[data_131149_Idx][idx_131153] = v_131158;
		}
		

	
}

function fix_vector(v_131095) {
	var result_131097 = [null];

		var length_131105 = (v_131095 != null ? v_131095.length : 0);
		rawEcho(cstrToNimstr((length_131105)+""));
		result_131097[0] = new Array(length_131105); for (var i=0;i<length_131105;++i) {result_131097[0][i]=0.0;}		var i_131118 = 0;
		L1: do {
			var k_131142 = 0;
			var colontmp__131219 = 0;
			colontmp__131219 = (v_131095 != null ? (v_131095.length-1) : -1);
			var res_131222 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_131222 <= colontmp__131219)) break L3;
						k_131142 = res_131222;
						check_value_131144(result_131097, 0, length_131105, i_131118, v_131095, k_131142);
						i_131118 += 1;
						res_131222 += 1;
					}
			} while(false);
		} while(false);

	return result_131097[0];

}

function len_131780(v_131782) {
	var result_131783 = 0;

		result_131783 = v_131782.length;

	return result_131783;

}

function sum_135765(x_135770) {
	var result_135771 = 0.0;

		L1: do {
			var i_135810 = 0.0;
			var i_135814 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_135814 < (x_135770 != null ? x_135770.length : 0))) break L3;
						i_135810 = x_135770[i_135814];
						result_135771 = (result_135771 + i_135810);
						i_135814 += 1;
					}
			} while(false);
		} while(false);

	return result_135771;

}

function sum_135759(v_135761) {
	var result_135762 = 0.0;

		result_135762 = sum_135765(v_135761.data);

	return result_135762;

}

function low_131814(v_131816) {
	var result_131817 = 0;

		result_131817 = 0;

	return result_131817;

}

function high_131797(v_131799) {
	var result_131800 = 0;

		result_131800 = (v_131799.length - 1);

	return result_131800;

}

function HEX5BHEX5DHEX3D_132814(v_132817, i_132818, val_132819) {
		if ((v_132817.length <= i_132818)) {
		v_132817.length = (i_132818 + 1);
		}
		
		v_132817.data[i_132818] = val_132819;

	
}

function HEX5BHEX5D_132540(v_132542, i_132543) {
	var result_132544 = 0.0;

		result_132544 = v_132542.data[i_132543];

	return result_132544;

}

function HEX2EHEX2A_134956(v_134958, w_134959) {
	var result_134960 = [{length: 0, data: null}];

		result_134960[0].data = new Float32Array(50000);
		L1: do {
			var i_134977 = 0;
			var colontmp__134980 = 0;
			var colontmp__134981 = 0;
			colontmp__134980 = low_131814(v_134958);
			colontmp__134981 = high_131797(v_134958);
			var res_134984 = colontmp__134980;
			L2: do {
					L3: while (true) {
					if (!(res_134984 <= colontmp__134981)) break L3;
						i_134977 = res_134984;
						HEX5BHEX5DHEX3D_132814(result_134960[0], i_134977, (HEX5BHEX5D_132540(v_134958, i_134977) * HEX5BHEX5D_132540(w_134959, i_134977)));
						res_134984 += 1;
					}
			} while(false);
		} while(false);

	return result_134960[0];

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function HEX2AHEX3D_127689(x_127694, x_127694_Idx, y_127696) {
		x_127694[x_127694_Idx] = (x_127694[x_127694_Idx] * y_127696);

	
}

function HEX5E_135881(x_135885, y_135887) {
	var result_135888 = [0.0];

		var colontmp__141537 = {Field0: 0.0, Field1: 0};
		var x_136202 = [0.0];
		var y_136203 = 0;
		nimCopy(colontmp__141537, {Field0: x_135885, Field1: y_135887}, NTI136201);
		x_136202[0] = colontmp__141537["Field0"];
		y_136203 = colontmp__141537["Field1"];
		result_135888[0] = 1.0000000000000000e+000;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_136203 & 1) == 0))) {
					HEX2AHEX3D_127689(result_135888, 0, x_136202[0]);
					}
					
					y_136203 = ((y_136203 >>> 0) >>> 1);
					if ((y_136203 == 0)) {
					break L1;
					}
					
					HEX2AHEX3D_127689(x_136202, 0, x_136202[0]);
				}
		} while(false);

	return result_135888[0];

}

function HEX5E_135419(v_135421, w_135422) {
	var result_135423 = 0.0;

		result_135423 = Math.pow(v_135421, w_135422);

	return result_135423;

}

function HEX2EHEX5E_135482(v_135484, k_135485) {
	var result_135486 = [{length: 0, data: null}];

		result_135486[0].data = new Float32Array(50000);
		L1: do {
			var i_135503 = 0;
			var colontmp__135506 = 0;
			var colontmp__135507 = 0;
			colontmp__135506 = low_131814(v_135484);
			colontmp__135507 = high_131797(v_135484);
			var res_135510 = colontmp__135506;
			L2: do {
					L3: while (true) {
					if (!(res_135510 <= colontmp__135507)) break L3;
						i_135503 = res_135510;
						HEX5BHEX5DHEX3D_132814(result_135486[0], i_135503, HEX5E_135419(HEX5BHEX5D_132540(v_135484, i_135503), k_135485));
						res_135510 += 1;
					}
			} while(false);
		} while(false);

	return result_135486[0];

}

function HEX2D_134783(v_134785, w_134786) {
	var result_134787 = [{length: 0, data: null}];

		result_134787[0].data = new Float32Array(50000);
		L1: do {
			var i_134804 = 0;
			var colontmp__134807 = 0;
			var colontmp__134808 = 0;
			colontmp__134807 = low_131814(v_134785);
			colontmp__134808 = high_131797(v_134785);
			var res_134811 = colontmp__134807;
			L2: do {
					L3: while (true) {
					if (!(res_134811 <= colontmp__134808)) break L3;
						i_134804 = res_134811;
						HEX5BHEX5DHEX3D_132814(result_134787[0], i_134804, (HEX5BHEX5D_132540(v_134785, i_134804) - HEX5BHEX5D_132540(w_134786, i_134804)));
						res_134811 += 1;
					}
			} while(false);
		} while(false);

	return result_134787[0];

}

function HEX2B_134682(v_134684, k_134685) {
	var result_134686 = [{length: 0, data: null}];

		result_134686[0].data = new Float32Array(50000);
		L1: do {
			var i_134703 = 0;
			var colontmp__134706 = 0;
			var colontmp__134707 = 0;
			colontmp__134706 = low_131814(v_134684);
			colontmp__134707 = high_131797(v_134684);
			var res_134710 = colontmp__134706;
			L2: do {
					L3: while (true) {
					if (!(res_134710 <= colontmp__134707)) break L3;
						i_134703 = res_134710;
						HEX5BHEX5DHEX3D_132814(result_134686[0], i_134703, (HEX5BHEX5D_132540(v_134684, i_134703) + k_134685));
						res_134710 += 1;
					}
			} while(false);
		} while(false);

	return result_134686[0];

}

function HEX2B_134727(k_134729, v_134730) {
	var result_134731 = {length: 0, data: null};

		nimCopy(result_134731, HEX2B_134682(v_134730, k_134729), NTI131017);

	return result_134731;

}

function HEX2EHEX2A_135001(v_135003, k_135004) {
	var result_135005 = [{length: 0, data: null}];

		result_135005[0].data = new Float32Array(50000);
		L1: do {
			var i_135022 = 0;
			var colontmp__135025 = 0;
			var colontmp__135026 = 0;
			colontmp__135025 = low_131814(v_135003);
			colontmp__135026 = high_131797(v_135003);
			var res_135029 = colontmp__135025;
			L2: do {
					L3: while (true) {
					if (!(res_135029 <= colontmp__135026)) break L3;
						i_135022 = res_135029;
						HEX5BHEX5DHEX3D_132814(result_135005[0], i_135022, (HEX5BHEX5D_132540(v_135003, i_135022) * k_135004));
						res_135029 += 1;
					}
			} while(false);
		} while(false);

	return result_135005[0];

}

function HEX2EHEX2A_135046(k_135048, v_135049) {
	var result_135050 = {length: 0, data: null};

		nimCopy(result_135050, HEX2EHEX2A_135001(v_135049, k_135048), NTI131017);

	return result_135050;

}

function HEX2A_135120(k_135122, v_135123) {
	var result_135124 = {length: 0, data: null};

		nimCopy(result_135124, HEX2EHEX2A_135046(k_135122, v_135123), NTI131017);

	return result_135124;

}

function student_t_ppf_95p_136283(df_136285) {
	var result_136286 = 0.0;

	BeforeRet: do {
		if ((38 < df_136285)) {
		result_136286 = 1.9600000000000000e+000;
		break BeforeRet;
		}
		else {
		if ((df_136285 <= 1)) {
		result_136286 = 1.2710000000000001e+001;
		break BeforeRet;
		}
		}
		result_136286 = table_ppf_136287[df_136285];
		break BeforeRet;
	} while (false);

	return result_136286;

}

function student_t_ppf_95p_136341(df_136343) {
	var result_136344 = 0.0;

		result_136344 = student_t_ppf_95p_136283(((df_136343)|0));

	return result_136344;

}

function simple_linear_regression(x_141441, y_141442) {
	var result_141443 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0};

		var n_141444 = len_131780(x_141441);
		var sx_141445 = sum_135759(x_141441);
		var sxx_141446 = sum_135759(HEX2EHEX2A_134956(x_141441, x_141441));
		var sy_141447 = sum_135759(y_141442);
		var sxy_141448 = sum_135759(HEX2EHEX2A_134956(x_141441, y_141442));
		var syy_141449 = sum_135759(HEX2EHEX2A_134956(y_141442, y_141442));
		result_141443.n = ((n_141444)|0);
		result_141443.slope = (((n_141444 * sxy_141448) - (sx_141445 * sy_141447)) / (((n_141444 * sxx_141446) - HEX5E_135881(sx_141445, 2)) + 1.0000000000000000e-010));
		result_141443.intercept = ((sy_141447 / n_141444) - ((result_141443.slope * sx_141445) / n_141444));
		result_141443.R2 = ((HEX5E_135881(((n_141444 * sxy_141448) - (sx_141445 * sy_141447)), 2) / ((n_141444 * sxx_141446) - HEX5E_135881(sx_141445, 2))) / (((n_141444 * syy_141449) - HEX5E_135881(sy_141447, 2)) + 1.0000000000000000e-010));
		result_141443.residual_sum_squares = sum_135759(HEX2EHEX5E_135482(HEX2D_134783(y_141442, HEX2B_134727(result_141443.intercept, HEX2A_135120(result_141443.slope, x_141441))), 2.0000000000000000e+000));
		result_141443.residual_variance = ((((n_141444 * syy_141449) - HEX5E_135881(sy_141447, 2)) - (HEX5E_135881(result_141443.slope, 2) * ((n_141444 * sxx_141446) - HEX5E_135881(sx_141445, 2)))) / (((n_141444 * n_141444) - (2.0000000000000000e+000 * n_141444)) + 1.0000000000000000e-010));
		result_141443.slope_variance = ((n_141444 * result_141443.residual_variance) / (((n_141444 * sxx_141446) - HEX5E_135881(sx_141445, 2)) + 1.0000000000000000e-010));
		result_141443.intercept_variance = ((result_141443.slope_variance * sxx_141446) / n_141444);
		result_141443.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_141443.slope_variance)) * student_t_ppf_95p_136341((n_141444 - 2.0000000000000000e+000)));
		result_141443.slope_confidence_interval[0] = (result_141443.slope - (5.0000000000000000e-001 * result_141443.slope_width_confidence_interval));
		result_141443.slope_confidence_interval[1] = (result_141443.slope + (5.0000000000000000e-001 * result_141443.slope_width_confidence_interval));
		result_141443.intercept_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_141443.intercept_variance)) * student_t_ppf_95p_136341((n_141444 - 2.0000000000000000e+000)));
		result_141443.intercept_confidence_interval[0] = (result_141443.intercept - (5.0000000000000000e-001 * result_141443.intercept_width_confidence_interval));
		result_141443.intercept_confidence_interval[1] = (result_141443.intercept + (5.0000000000000000e-001 * result_141443.intercept_width_confidence_interval));

	return result_141443;

}

function simple_linear_regression_wo_intercept(x_141540, y_141541) {
	var result_141542 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0};

		var n_141543 = len_131780(x_141540);
		var sx_141544 = sum_135759(x_141540);
		var sxx_141545 = sum_135759(HEX2EHEX2A_134956(x_141540, x_141540));
		var sy_141546 = sum_135759(y_141541);
		var sxy_141547 = sum_135759(HEX2EHEX2A_134956(x_141540, y_141541));
		var sxxyy_141548 = sum_135759(HEX2EHEX2A_134956(HEX2EHEX2A_134956(x_141540, y_141541), HEX2EHEX2A_134956(x_141540, y_141541)));
		var syy_141549 = sum_135759(HEX2EHEX2A_134956(y_141541, y_141541));
		result_141542.n = ((n_141543)|0);
		result_141542.slope = ((((n_141543 * sxy_141547) - (sx_141544 * sy_141546)) + (sx_141544 * sy_141546)) / ((((n_141543 * sxx_141545) - HEX5E_135881(sx_141544, 2)) + (sx_141544 * sx_141544)) + 1.0000000000000000e-010));
		result_141542.intercept = 0.0;
		result_141542.R2 = ((HEX5E_135881(sxy_141547, 2) + 1.0000000000000000e-010) / ((sxx_141545 * syy_141549) + 1.0000000000000000e-010));
		result_141542.residual_sum_squares = sum_135759(HEX2EHEX5E_135482(HEX2D_134783(y_141541, HEX2EHEX2A_135046(result_141542.slope, x_141540)), 2.0000000000000000e+000));
		result_141542.residual_variance = (result_141542.residual_sum_squares / ((n_141543 - 1.0000000000000000e+000) + 1.0000000000000000e-010));
		result_141542.slope_variance = (result_141542.residual_variance / (sxx_141545 + 1.0000000000000000e-010));
		result_141542.intercept_variance = 0.0;
		result_141542.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_141542.slope_variance)) * student_t_ppf_95p_136341((n_141543 - 1.0000000000000000e+000)));
		result_141542.slope_confidence_interval[0] = (result_141542.slope - (5.0000000000000000e-001 * result_141542.slope_width_confidence_interval));
		result_141542.slope_confidence_interval[1] = (result_141542.slope + (5.0000000000000000e-001 * result_141542.slope_width_confidence_interval));
		result_141542.intercept_width_confidence_interval = 0.0;
		result_141542.intercept_confidence_interval[0] = 0.0;
		result_141542.intercept_confidence_interval[1] = 0.0;

	return result_141542;

}

function HEX5BHEX5D_133214(v_133216, idx_133224) {
	var result_133225 = {length: 0, data: null};

		result_133225.data = new Float32Array(50000);
		var k_133235 = 0;
		L1: do {
			var i_133274 = 0;
			L2: do {
				var x_133614 = 0;
				var colontmp__133616 = 0;
				var colontmp__133618 = 0;
				colontmp__133616 = idx_133224.a;
				colontmp__133618 = idx_133224.b;
				var res_133620 = colontmp__133616;
				L3: do {
						L4: while (true) {
						if (!(res_133620 <= colontmp__133618)) break L4;
							x_133614 = res_133620;
							i_133274 = x_133614;
							result_133225.data[k_133235] = v_133216.data[i_133274];
							k_133235 += 1;
							res_133620 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_133225.length = k_133235;

	return result_133225;

}

function HEX2EHEX2E_56828(a_56833, b_56835) {
	var result_56843 = {a: 0, b: 0};

		result_56843.a = a_56833;
		result_56843.b = b_56835;

	return result_56843;

}

function arma(x_141592, y_141593) {
	var result_141594 = {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}};

		nimCopy(result_141594.mean_structure, simple_linear_regression(x_141592, y_141593), NTI136368);
		var residuals_141595 = HEX2D_134783(y_141593, HEX2B_134727(result_141594.mean_structure.intercept, HEX2A_135120(result_141594.mean_structure.slope, x_141592)));
		nimCopy(result_141594.autoregressive_structure, simple_linear_regression_wo_intercept(HEX5BHEX5D_133214(residuals_141595, HEX2EHEX2E_56828(0, (high_131797(residuals_141595) - 1))), HEX5BHEX5D_133214(residuals_141595, HEX2EHEX2E_56828(1, high_131797(residuals_141595)))), NTI136368);

	return result_141594;

}

function HEX2BHEX3D_31100(x_31105, x_31105_Idx, y_31107) {
		x_31105[x_31105_Idx] = (x_31105[x_31105_Idx] + y_31107);

	
}

function HEX2DHEX3D_141651(x_141656, x_141656_Idx, y_141658) {
		x_141656[x_141656_Idx] = (x_141656[x_141656_Idx] - y_141658);

	
}

function HEX2EHEX5E_135572(v_135574, k_135575) {
	var result_135576 = {length: 0, data: null};

		nimCopy(result_135576, HEX2EHEX5E_135482(v_135574, k_135575), NTI131017);

	return result_135576;

}

function normal_loglikelihood_141633(x_141635, y_141636, slope_141637, intercept_141638, sigma2_141639) {
	var result_141640 = [0.0];

		var n_141641 = len_131780(x_141635);
		result_141640[0] = ((-5.0000000000000000e-001 * n_141641) * Math.log(((6.2831853071795862e+000 * sigma2_141639) + 1.0000000000000000e-010)));
		HEX2DHEX3D_141651(result_141640, 0, (sum_135759(HEX2EHEX5E_135572(HEX2D_134783(y_141636, HEX2B_134727(intercept_141638, HEX2A_135120(slope_141637, x_141635))), 2)) / ((2.0000000000000000e+000 * sigma2_141639) + 1.0000000000000000e-010)));

	return result_141640[0];

}

function analysis_at_point_t_141688(x_141690, y_141691, change_point_141692) {
	var result_141693 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}};

		var n_141694 = len_131780(x_141690);
		var x_before_141707 = HEX5BHEX5D_133214(x_141690, HEX2EHEX2E_56828(0, (change_point_141692 - 1)));
		var y_before_141720 = HEX5BHEX5D_133214(y_141691, HEX2EHEX2E_56828(0, (change_point_141692 - 1)));
		var x_after_141731 = HEX5BHEX5D_133214(x_141690, HEX2EHEX2E_56828(change_point_141692, high_131797(x_141690)));
		var y_after_141742 = HEX5BHEX5D_133214(y_141691, HEX2EHEX2E_56828(change_point_141692, high_131797(y_141691)));
		nimCopy(result_141693.before_change, arma(x_before_141707, y_before_141720), NTI136388);
		HEX2BHEX3D_31100(result_141693, "loglikelihood", normal_loglikelihood_141633(x_before_141707, y_before_141720, result_141693.before_change.mean_structure.slope, result_141693.before_change.mean_structure.intercept, result_141693.before_change.autoregressive_structure.residual_variance));
		nimCopy(result_141693.after_change, arma(x_after_141731, y_after_141742), NTI136388);
		HEX2BHEX3D_31100(result_141693, "loglikelihood", normal_loglikelihood_141633(x_after_141731, y_after_141742, result_141693.after_change.mean_structure.slope, result_141693.after_change.mean_structure.intercept, result_141693.after_change.autoregressive_structure.residual_variance));

	return result_141693;

}

function robust_interrupted_time_series_model_141776(x_141778, y_141779, change_point_141780, candidates_before_141781, candidates_after_141782) {
								var Tmp5;

	var result_141783 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}};

		var ll_result_141784 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}};
		result_141783.likelihood.best_loglikelihood = -1.0000000000000000e+100;
		L1: do {
			var t_141794 = 0;
			var colontmp__141817 = 0;
			var colontmp__141818 = 0;
			colontmp__141817 = (change_point_141780 - candidates_before_141781);
			colontmp__141818 = (change_point_141780 + candidates_after_141782);
			var res_141821 = colontmp__141817;
			L2: do {
					L3: while (true) {
					if (!(res_141821 <= colontmp__141818)) break L3;
						t_141794 = res_141821;
						L4: do {
								if ((t_141794 < 3)) Tmp5 = true; else {									Tmp5 = (high_131797(x_141778) < t_141794);								}							if (Tmp5) {
							break L4;
							}
							
							nimCopy(ll_result_141784, analysis_at_point_t_141688(x_141778, y_141779, t_141794), NTI136392);
							var Tmp6 = nimCopy(null, t_141794, NTI17403);
							if (result_141783.likelihood.change_points != null) { result_141783.likelihood.change_points.push(Tmp6); } else { result_141783.likelihood.change_points = [Tmp6]; };
							var Tmp7 = nimCopy(null, ll_result_141784.loglikelihood, NTI124);
							if (result_141783.likelihood.loglikelihood != null) { result_141783.likelihood.loglikelihood.push(Tmp7); } else { result_141783.likelihood.loglikelihood = [Tmp7]; };
							if ((result_141783.likelihood.best_loglikelihood < ll_result_141784.loglikelihood)) {
							result_141783.likelihood.best_loglikelihood = ll_result_141784.loglikelihood;
							result_141783.likelihood.best_likelihood = Math.exp(ll_result_141784.loglikelihood);
							result_141783.likelihood.best_index = t_141794;
							result_141783.likelihood.best_time = HEX5BHEX5D_132540(x_141778, t_141794);
							nimCopy(result_141783.before_change, ll_result_141784.before_change, NTI136388);
							nimCopy(result_141783.after_change, ll_result_141784.after_change, NTI136388);
							}
							
						} while(false);
						res_141821 += 1;
					}
			} while(false);
		} while(false);

	return result_141783;

}

function check_value_131283(data_131288, data_131288_Idx, length_131290, idx_131292, w_131294, w_idx_131296) {
			var Tmp1;

		var v_131297 = w_131294[w_idx_131296];
			if ((((classify_29032(v_131297) == 4) || (classify_29032(v_131297) == 5)) || (classify_29032(v_131297) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_131297 * 1.0000000000000000e+001) / 1.0000000000000000e+001) == v_131297));			}		if (Tmp1) {
		if ((idx_131292 == 0)) {
		data_131288[data_131288_Idx][idx_131292] = w_131294[(w_idx_131296 + 1)];
		}
		else {
		if ((idx_131292 == (length_131290 - 1))) {
		data_131288[data_131288_Idx][idx_131292] = w_131294[(w_idx_131296 - 1)];
		}
		else {
			data_131288[data_131288_Idx][idx_131292] = (5.0000000000000000e-001 * (w_131294[(w_idx_131296 - 1)] + w_131294[(w_idx_131296 + 1)]));
		}
		}
		}
		else {
			data_131288[data_131288_Idx][idx_131292] = v_131297;
		}
		

	
}

function vector_131239(v_131242) {
	var result_131243 = {length: 0, data: null};

		result_131243.data = new Float32Array(50000);
		result_131243.length = (v_131242 != null ? v_131242.length : 0);
		var i_131258 = 0;
		L1: do {
			var k_131281 = 0;
			var colontmp__131350 = 0;
			colontmp__131350 = (v_131242 != null ? (v_131242.length-1) : -1);
			var res_131353 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_131353 <= colontmp__131350)) break L3;
						k_131281 = res_131353;
						check_value_131283(result_131243, "data", result_131243.length, i_131258, v_131242, k_131281);
						i_131258 += 1;
						res_131353 += 1;
					}
			} while(false);
		} while(false);
		result_131243.length = i_131258;
		nimCopy(result_131243, result_131243, NTI131017);

	return result_131243;

}

function robust_interrupted_time_series(x_141841, y_141843, change_point_141844, candidates_before_141845, candidates_after_141846) {
	var result_141847 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}};

		nimCopy(result_141847, robust_interrupted_time_series_model_141776(vector_131239(x_141841), vector_131239(y_141843), change_point_141844, candidates_before_141845, candidates_after_141846), NTI136407);

	return result_141847;

}

function vector_reduced_131689(v_131692, sampling_131693) {
	var result_131694 = {length: 0, data: null};

		result_131694.data = new Float32Array(50000);
		result_131694.length = (v_131692 != null ? v_131692.length : 0);
		var i_131709 = 0;
		L1: do {
			var k_131732 = 0;
			var colontmp__131760 = 0;
			colontmp__131760 = (v_131692 != null ? (v_131692.length-1) : -1);
			var res_131763 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_131763 <= colontmp__131760)) break L3;
						k_131732 = res_131763;
						L4: do {
							if (!((Math.trunc(k_131732 % sampling_131693) == 0))) {
							break L4;
							}
							
							check_value_131283(result_131694, "data", result_131694.length, i_131709, v_131692, k_131732);
							i_131709 += 1;
						} while(false);
						res_131763 += 1;
					}
			} while(false);
		} while(false);
		result_131694.length = i_131709;
		nimCopy(result_131694, result_131694, NTI131017);

	return result_131694;

}

function robust_interrupted_time_series_approximated(sampling_141863, x_141865, y_141867, change_point_141868, candidates_before_141869, candidates_after_141870) {
	var result_141871 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, R2: 0.0, residual_sum_squares: 0.0, residual_variance: 0.0, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}};

		nimCopy(result_141871, robust_interrupted_time_series_model_141776(vector_reduced_131689(x_141865, sampling_141863), vector_reduced_131689(y_141867, sampling_141863), (((change_point_141868 / sampling_141863))|0), (((candidates_before_141869 / sampling_141863))|0), (((candidates_after_141870 / sampling_141863))|0)), NTI136407);

	return result_141871;

}
var state_143405 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_150832 = [null];
var local_instance_150833 = [null];

function HEX2A_147401(a_147403, b_147404) {
	var result_147405 = 0;

		result_147405 = (a_147403 * b_147404);

	return result_147405;

}

function convert_148453(unit_from_148457, unit_to_148459, quantity_148461) {
		var Tmp1;

	var result_148462 = 0;

		if ((unit_from_148457 < unit_to_148459)) {
		Tmp1 = Math.trunc(quantity_148461 / Math.trunc(unit_weights_148017[unit_to_148459] / unit_weights_148017[unit_from_148457]));
		}
		else {
		Tmp1 = HEX2A_147401(Math.trunc(unit_weights_148017[unit_from_148457] / unit_weights_148017[unit_to_148459]), quantity_148461);
		}
		
		result_148462 = Tmp1;

	return result_148462;

}

function init_time_148090(unix_148092, nanosecond_148093) {
	var result_150018 = {seconds: 0, nanosecond: 0};

		result_150018.seconds = unix_148092;
		result_150018.nanosecond = nanosecond_148093;

	return result_150018;

}

function get_time_150961() {
	var result_150963 = {seconds: 0, nanosecond: 0};

		var millis_151001 = new Date().getTime();
		var seconds_151012 = convert_148453(2, 3, millis_151001);
		var nanos_151034 = convert_148453(2, 0, Math.trunc(millis_151001 % convert_148453(3, 2, 1)));
		nimCopy(result_150963, init_time_148090(seconds_151012, nanos_151034), NTI147818);

	return result_150963;

}
var start_160831 = [get_time_150961()];

function new_seq_131619(len_131623) {
	var result_131625 = null;

		result_131625 = new Array(len_131623); for (var i=0;i<len_131623;++i) {result_131625[i]=0.0;}
	return result_131625;

}

function rotl_143615(x_143617, k_143618) {
	var result_143619 = 0;

		result_143619 = ((x_143617 << k_143618) | ((x_143617 >>> 0) >>> ((64 - k_143618) >>> 0)));

	return result_143619;

}

function next_143667(r_143670) {
	var result_143671 = 0;

		var s0_143672 = r_143670.a0;
		var s1_143673 = r_143670.a1;
		result_143671 = ((s0_143672 + s1_143673) >>> 0);
		s1_143673 = (s1_143673 ^ s0_143672);
		r_143670.a0 = ((rotl_143615(s0_143672, 55) ^ s1_143673) ^ (s1_143673 << 14));
		r_143670.a1 = rotl_143615(s1_143673, 36);

	return result_143671;

}

function rand_144048(r_144051, max_144052) {
	var result_144053 = 0;

	BeforeRet: do {
		if ((max_144052 == 0)) {
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var x_144054 = next_143667(r_144051);
					if ((x_144054 <= ((4294967295 - (4294967295 % max_144052)) >>> 0))) {
					result_144053 = (((x_144054 % ((max_144052 + 1) )))|0);
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);

	return result_144053;

}

function rand_144112(max_144114) {
	var result_144115 = 0;

		result_144115 = rand_144048(state_143405[0], max_144114);

	return result_144115;

}

function add_quoted_164202(s_164206, s_164206_Idx, x_164208) {
		if (s_164206[s_164206_Idx] != null) { s_164206[s_164206_Idx] = (s_164206[s_164206_Idx]).concat(cstrToNimstr((x_164208)+"")); } else { s_164206[s_164206_Idx] = cstrToNimstr((x_164208)+"").slice(); };

	
}

function collection_to_string_164011(x_164015, prefix_164017, separator_164019, suffix_164021) {
	var result_164022 = [null];

		result_164022[0] = nimCopy(null, prefix_164017, NTI138);
		var first_element_164023 = true;
		L1: do {
			var value_164032 = 0.0;
			var i_164418 = 0;
			var l_164420 = (x_164015 != null ? x_164015.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_164418 < l_164420)) break L3;
						value_164032 = x_164015[i_164418];
						if (first_element_164023) {
						first_element_164023 = false;
						}
						else {
						if (result_164022[0] != null) { result_164022[0] = (result_164022[0]).concat(separator_164019); } else { result_164022[0] = separator_164019.slice(); };
						}
						
						add_quoted_164202(result_164022, 0, value_164032);
						i_164418 += 1;
					}
			} while(false);
		} while(false);
		if (result_164022[0] != null) { result_164022[0] = (result_164022[0]).concat(suffix_164021); } else { result_164022[0] = suffix_164021.slice(); };

	return result_164022[0];

}

function HEX24_164003(x_164008) {
	var result_164009 = null;

		result_164009 = nimCopy(null, collection_to_string_164011(x_164008, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_164009;

}

function parse_saturated_natural_46485(s_46487, b_46489, b_46489_Idx, start_46490) {
			var Tmp1;
					var Tmp4;

	var result_46492 = 0;

		var i_46493 = start_46490;
		if (((i_46493 < (s_46487 != null ? s_46487.length : 0)) && (s_46487[i_46493] == 43))) {
		i_46493 += 1;
		}
		
			if (!(i_46493 < (s_46487 != null ? s_46487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_46487[i_46493]] != undefined);			}		if (Tmp1) {
		b_46489[b_46489_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_46493 < (s_46487 != null ? s_46487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_46487[i_46493]] != undefined);					}				if (!Tmp4) break L3;
					var c_46535 = (s_46487[i_46493] - 48);
					if ((b_46489[b_46489_Idx] <= Math.trunc((2147483647 - c_46535) / 10))) {
					b_46489[b_46489_Idx] = ((b_46489[b_46489_Idx] * 10) + c_46535);
					}
					else {
						b_46489[b_46489_Idx] = 2147483647;
					}
					
					i_46493 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_46493 < (s_46487 != null ? s_46487.length : 0)) && (s_46487[i_46493] == 95))) break L6;
								i_46493 += 1;
							}
					} while(false);
				}
		} while(false);
		result_46492 = (i_46493 - start_46490);
		}
		

	return result_46492;

}

function HEX5BHEX5D_88905(s_88910, x_88913) {
	var result_88914 = null;

		var a_89001 = x_88913.a;
		var l_89201 = ((((s_88910 != null ? s_88910.length : 0) - x_88913.b) - a_89001) + 1);
		result_88914 = nimCopy(null, mnewString(l_89201), NTI138);
		L1: do {
			var i_89211 = 0;
			var i_89223 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_89223 < l_89201)) break L3;
						i_89211 = i_89223;
						result_88914[i_89211] = s_88910[(i_89211 + a_89001)];
						i_89223 += 1;
					}
			} while(false);
		} while(false);

	return result_88914;

}

function HEX2EHEX2E_88853(a_88858, b_88860) {
	var result_88868 = {a: 0, b: 0};

		result_88868.a = a_88858;
		result_88868.b = b_88860;

	return result_88868;

}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function parse_standard_format_specifier_129928(s_129930, start_129931, ignore_unknown_suffix_129933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_129934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_129934.fill = 32;
		result_129934.align = 0;
		result_129934.sign = 45;
		var i_129937 = start_129931;
		if ((((i_129937 + 1) < (s_129930 != null ? s_129930.length : 0)) && (ConstSet2[s_129930[(i_129937 + 1)]] != undefined))) {
		result_129934.fill = s_129930[i_129937];
		result_129934.align = s_129930[(i_129937 + 1)];
		i_129937 += 2;
		}
		else {
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (ConstSet3[s_129930[i_129937]] != undefined))) {
		result_129934.align = s_129930[i_129937];
		i_129937 += 1;
		}
		}
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (ConstSet4[s_129930[i_129937]] != undefined))) {
		result_129934.sign = s_129930[i_129937];
		i_129937 += 1;
		}
		
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (s_129930[i_129937] == 35))) {
		result_129934.alternateForm = true;
		i_129937 += 1;
		}
		
			if (!(((i_129937 + 1) < (s_129930 != null ? s_129930.length : 0)) && (s_129930[i_129937] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_129930[(i_129937 + 1)]] != undefined);			}		if (Tmp1) {
		result_129934.padWithZero = true;
		i_129937 += 1;
		}
		
		var parsed_length_130022 = parse_saturated_natural_46485(s_129930, result_129934, "minimumWidth", i_129937);
		i_129937 += parsed_length_130022;
		if (((i_129937 < (s_129930 != null ? s_129930.length : 0)) && (s_129930[i_129937] == 46))) {
		i_129937 += 1;
		var parsed_length_b_130042 = parse_saturated_natural_46485(s_129930, result_129934, "precision", i_129937);
		i_129937 += parsed_length_b_130042;
		}
		else {
			result_129934.precision = -1;
		}
		
			if (!(i_129937 < (s_129930 != null ? s_129930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_129930[i_129937]] != undefined);			}		if (Tmp2) {
		result_129934.typ = s_129930[i_129937];
		i_129937 += 1;
		}
		
		result_129934.endPosition = i_129937;
			if (!!((i_129937 == (s_129930 != null ? s_129930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_129933);			}		if (Tmp3) {
		var e_130120 = null;
		e_130120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_130120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_88905(s_129930, HEX2EHEX2E_88853(i_129937, 1))), NTI138);
		e_130120.parent = null;
		raiseException(e_130120, "ValueError");
		}
		

	return result_129934;

}

function nsuformatBiggestFloat(f_127023, format_127024, precision_127030, decimal_sep_127031) {
	var result_127032 = null;

		var precision_127201 = precision_127030;
		if ((precision_127201 == -1)) {
		precision_127201 = 6;
		}
		
		var res_127203 = null;
		switch (format_127024) {
		case 0:
			res_127203 = f_127023.toString();
			break;
		case 1:
			res_127203 = f_127023.toFixed(precision_127201);
			break;
		case 2:
			res_127203 = f_127023.toExponential(precision_127201);
			break;
		}
		result_127032 = nimCopy(null, cstrToNimstr(res_127203), NTI138);
		if (((1.0000000000000000e+000 / f_127023) == -Infinity)) {
		result_127032 = nimCopy(null, (makeNimstrLit("-")).concat(cstrToNimstr(res_127203)), NTI138);
		}
		
		L1: do {
			var i_127215 = 0;
			var colontmp__127227 = 0;
			colontmp__127227 = (result_127032 != null ? result_127032.length : 0);
			var i_127230 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_127230 < colontmp__127227)) break L3;
						i_127215 = i_127230;
						if ((ConstSet9[result_127032[i_127215]] != undefined)) {
						result_127032[i_127215] = decimal_sep_127031;
						}
						
						i_127230 += 1;
					}
			} while(false);
		} while(false);

	return result_127032;

}

function insert_21601(x_21604, x_21604_Idx, item_21605, i_21606) {
		var xl_21607 = (x_21604[x_21604_Idx] != null ? x_21604[x_21604_Idx].length : 0);
		x_21604[x_21604_Idx].length = (xl_21607 + (item_21605 != null ? item_21605.length : 0));
		var j_21608 = (xl_21607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_21606 <= j_21608)) break L2;
					x_21604[x_21604_Idx][(j_21608 + (item_21605 != null ? item_21605.length : 0))] = x_21604[x_21604_Idx][j_21608];
					j_21608 -= 1;
				}
		} while(false);
		j_21608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_21608 < (item_21605 != null ? item_21605.length : 0))) break L4;
					x_21604[x_21604_Idx][(j_21608 + i_21606)] = item_21605[j_21608];
					j_21608 += 1;
				}
		} while(false);

	
}

function nsuRepeatChar(c_122984, count_122985) {
	var result_122986 = null;

		result_122986 = nimCopy(null, mnewString(count_122985), NTI138);
		L1: do {
			var i_122998 = 0;
			var colontmp__123000 = 0;
			colontmp__123000 = (count_122985 - 1);
			var res_123003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_123003 <= colontmp__123000)) break L3;
						i_122998 = res_123003;
						result_122986[i_122998] = c_122984;
						res_123003 += 1;
					}
			} while(false);
		} while(false);

	return result_122986;

}

function validate_utf8_49955(s_49957) {
	var result_49958 = 0;

	BeforeRet: do {
		var i_49960 = 0;
		var l_49961 = (s_49957 != null ? s_49957.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_49960 < l_49961)) break L2;
					if ((s_49957[i_49960] <= 127)) {
					i_49960 += 1;
					}
					else {
					if ((((s_49957[i_49960] >>> 0) >>> 5) == 6)) {
					if ((s_49957[i_49960] < 194)) {
					result_49958 = i_49960;
					break BeforeRet;
					}
					
					if ((((i_49960 + 1) < l_49961) && (((s_49957[(i_49960 + 1)] >>> 0) >>> 6) == 2))) {
					i_49960 += 2;
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_49957[i_49960] >>> 0) >>> 4) == 14)) {
					if (((((i_49960 + 2) < l_49961) && (((s_49957[(i_49960 + 1)] >>> 0) >>> 6) == 2)) && (((s_49957[(i_49960 + 2)] >>> 0) >>> 6) == 2))) {
					i_49960 += 3;
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_49957[i_49960] >>> 0) >>> 3) == 30)) {
					if ((((((i_49960 + 3) < l_49961) && (((s_49957[(i_49960 + 1)] >>> 0) >>> 6) == 2)) && (((s_49957[(i_49960 + 2)] >>> 0) >>> 6) == 2)) && (((s_49957[(i_49960 + 3)] >>> 0) >>> 6) == 2))) {
					i_49960 += 4;
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					
					}
					else {
						result_49958 = i_49960;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_49958 = -1;
		break BeforeRet;
	} while (false);

	return result_49958;

}

function nucruneLen(s_49507) {
	var result_49508 = 0;

		var i_49510 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_49510 < (s_49507 != null ? s_49507.length : 0))) break L2;
					if ((s_49507[i_49510] <= 127)) {
					i_49510 += 1;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 5) == 6)) {
					i_49510 += 2;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 4) == 14)) {
					i_49510 += 3;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 3) == 30)) {
					i_49510 += 4;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 2) == 62)) {
					i_49510 += 5;
					}
					else {
					if ((((s_49507[i_49510] >>> 0) >>> 1) == 126)) {
					i_49510 += 6;
					}
					else {
					i_49510 += 1;
					}
					}}}}}
					result_49508 += 1;
				}
		} while(false);

	return result_49508;

}

function align_string_129827(s_129829, minimum_width_129830, align_129831, fill_129832) {
			var Tmp1;

	var result_129833 = null;

		if ((minimum_width_129830 == 0)) {
		result_129833 = nimCopy(null, s_129829, NTI138);
		}
		else {
			if ((validate_utf8_49955(s_129829) == -1)) {
			Tmp1 = nucruneLen(s_129829);
			}
			else {
			Tmp1 = (s_129829 != null ? s_129829.length : 0);
			}
			
			var s_rune_len_129835 = Tmp1;
			var to_fill_129836 = (minimum_width_129830 - s_rune_len_129835);
			if ((to_fill_129836 <= 0)) {
			result_129833 = nimCopy(null, s_129829, NTI138);
			}
			else {
			if (((align_129831 == 60) || (align_129831 == 0))) {
			result_129833 = nimCopy(null, (s_129829).concat(nsuRepeatChar(fill_129832, to_fill_129836)), NTI138);
			}
			else {
			if ((align_129831 == 94)) {
			var half_129837 = Math.trunc(to_fill_129836 / 2);
			result_129833 = nimCopy(null, (nsuRepeatChar(fill_129832, half_129837)).concat(s_129829,nsuRepeatChar(fill_129832, (to_fill_129836 - half_129837))), NTI138);
			}
			else {
				result_129833 = nimCopy(null, (nsuRepeatChar(fill_129832, to_fill_129836)).concat(s_129829), NTI138);
			}
			}}
		}
		

	return result_129833;

}

function nsuToUpperAsciiChar(c_120319) {
	var result_120320 = 0;

		if ((ConstSet11[c_120319] != undefined)) {
		result_120320 = (c_120319 - 32);
		}
		else {
			result_120320 = c_120319;
		}
		

	return result_120320;

}

function nsuToUpperAsciiStr(s_120367) {
	var result_120368 = null;

		result_120368 = nimCopy(null, mnewString((s_120367 != null ? s_120367.length : 0)), NTI138);
		L1: do {
			var i_120383 = 0;
			var colontmp__120391 = 0;
			colontmp__120391 = ((s_120367 != null ? s_120367.length : 0) - 1);
			var res_120394 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_120394 <= colontmp__120391)) break L3;
						i_120383 = res_120394;
						result_120368[i_120383] = nsuToUpperAsciiChar(s_120367[i_120383]);
						res_120394 += 1;
					}
			} while(false);
		} while(false);

	return result_120368;

}

function format_137002(value_137006, specifier_137008, res_137010, res_137010_Idx) {
		var Tmp1;

		var spec_137011 = parse_standard_format_specifier_129928(specifier_137008, 0, false);
		var fmode_137012 = 0;
		switch (spec_137011.typ) {
		case 101:
		case 69:
			fmode_137012 = 2;
			break;
		case 102:
		case 70:
			fmode_137012 = 1;
			break;
		case 103:
		case 71:
			fmode_137012 = 0;
			break;
		case 0:
			break;
		default: 
			var e_137018 = null;
			e_137018 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_137018.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_137011.typ]), NTI138);
			e_137018.parent = null;
			raiseException(e_137018, "ValueError");
			break;
		}
		var f_137027 = [nsuformatBiggestFloat(value_137006, fmode_137012, spec_137011.precision, 46)];
		var sign_137028 = false;
		if ((0.0 <= value_137006)) {
		if (!((spec_137011.sign == 45))) {
		sign_137028 = true;
		if ((value_137006 == 0.0)) {
		if (((1.0000000000000000e+000 / value_137006) == Infinity)) {
		insert_21601(f_137027, 0, nimCharToStr(spec_137011.sign), 0);
		}
		
		}
		else {
		insert_21601(f_137027, 0, nimCharToStr(spec_137011.sign), 0);
		}
		
		}
		
		}
		else {
			sign_137028 = true;
		}
		
		if (spec_137011.padWithZero) {
		var sign_str_137032 = [];
		if (sign_137028) {
		sign_str_137032 = nimCopy(null, nimCharToStr(f_137027[0][0]), NTI138);
		f_137027[0] = nimCopy(null, HEX5BHEX5D_88905(f_137027[0], HEX2EHEX2E_88853(1, 1)), NTI138);
		}
		
		var to_fill_137087 = ((spec_137011.minimumWidth - (f_137027[0] != null ? f_137027[0].length : 0)) - (sign_137028 ? 1:0));
		if ((0 < to_fill_137087)) {
		f_137027[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_137087)).concat(f_137027[0]), NTI138);
		}
		
		if (sign_137028) {
		f_137027[0] = nimCopy(null, (sign_str_137032).concat(f_137027[0]), NTI138);
		}
		
		}
		
		if ((spec_137011.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_137011.align;
		}
		
		var align_137090 = Tmp1;
		var result_137091 = align_string_129827(f_137027[0], spec_137011.minimumWidth, align_137090, spec_137011.fill);
		if ((ConstSet10[spec_137011.typ] != undefined)) {
		if (res_137010[res_137010_Idx] != null) { res_137010[res_137010_Idx] = (res_137010[res_137010_Idx]).concat(nsuToUpperAsciiStr(result_137091)); } else { res_137010[res_137010_Idx] = nsuToUpperAsciiStr(result_137091).slice(); };
		}
		else {
		if (res_137010[res_137010_Idx] != null) { res_137010[res_137010_Idx] = (res_137010[res_137010_Idx]).concat(result_137091); } else { res_137010[res_137010_Idx] = result_137091.slice(); };
		}
		

	
}

function HEX24_136424(params_136426) {
	var result_136427 = null;

		var fmt_res_136431 = [mnewString(0)];
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit("    slope: ")); } else { fmt_res_136431[0] = makeNimstrLit("    slope: "); };
		format_137002(params_136426.slope, makeNimstrLit(".3f"), fmt_res_136431, 0);
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_136431[0] = makeNimstrLit(" (var: "); };
		format_137002(params_136426.slope_variance, makeNimstrLit(".3f"), fmt_res_136431, 0);
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_136431[0] = makeNimstrLit(", CI width: "); };
		format_137002(params_136426.slope_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_136431, 0);
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit(")\x0A    intercept: ")); } else { fmt_res_136431[0] = makeNimstrLit(")\x0A    intercept: "); };
		format_137002(params_136426.intercept, makeNimstrLit(".3f"), fmt_res_136431, 0);
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_136431[0] = makeNimstrLit(" (var: "); };
		format_137002(params_136426.intercept_variance, makeNimstrLit(".3f"), fmt_res_136431, 0);
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_136431[0] = makeNimstrLit(", CI width: "); };
		format_137002(params_136426.intercept_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_136431, 0);
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit(")\x0A    R2: ")); } else { fmt_res_136431[0] = makeNimstrLit(")\x0A    R2: "); };
		format_137002(params_136426.R2, makeNimstrLit(".3f"), fmt_res_136431, 0);
		if (fmt_res_136431[0] != null) { fmt_res_136431[0] = (fmt_res_136431[0]).concat(makeNimstrLit("\x0A    SSE: ")); } else { fmt_res_136431[0] = makeNimstrLit("\x0A    SSE: "); };
		format_137002(params_136426.residual_sum_squares, makeNimstrLit(".3f"), fmt_res_136431, 0);
		result_136427 = nimCopy(null, fmt_res_136431[0], NTI138);

	return result_136427;

}

function add_quoted_166202(s_166206, s_166206_Idx, x_166208) {
		if (s_166206[s_166206_Idx] != null) { s_166206[s_166206_Idx] = (s_166206[s_166206_Idx]).concat(HEX24_136424(x_166208)); } else { s_166206[s_166206_Idx] = HEX24_136424(x_166208).slice(); };

	
}

function HEX24_166002(x_166006) {
	var result_166007 = [null];

		result_166007[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_166008 = true;
		if (!(first_element_166008)) {
		if (result_166007[0] != null) { result_166007[0] = (result_166007[0]).concat(makeNimstrLit(", ")); } else { result_166007[0] = makeNimstrLit(", "); };
		}
		
		if (result_166007[0] != null) { result_166007[0] = (result_166007[0]).concat(makeNimstrLit("mean_structure")); } else { result_166007[0] = makeNimstrLit("mean_structure"); };
		if (result_166007[0] != null) { result_166007[0] = (result_166007[0]).concat(makeNimstrLit(": ")); } else { result_166007[0] = makeNimstrLit(": "); };
		add_quoted_166202(result_166007, 0, x_166006.mean_structure);
		first_element_166008 = false;
		if (!(first_element_166008)) {
		if (result_166007[0] != null) { result_166007[0] = (result_166007[0]).concat(makeNimstrLit(", ")); } else { result_166007[0] = makeNimstrLit(", "); };
		}
		
		if (result_166007[0] != null) { result_166007[0] = (result_166007[0]).concat(makeNimstrLit("autoregressive_structure")); } else { result_166007[0] = makeNimstrLit("autoregressive_structure"); };
		if (result_166007[0] != null) { result_166007[0] = (result_166007[0]).concat(makeNimstrLit(": ")); } else { result_166007[0] = makeNimstrLit(": "); };
		add_quoted_166202(result_166007, 0, x_166006.autoregressive_structure);
		first_element_166008 = false;
		if (result_166007[0] != null) { result_166007[0] = (result_166007[0]).concat(makeNimstrLit(")")); } else { result_166007[0] = makeNimstrLit(")"); };

	return result_166007[0];

}

function add_quoted_165802(s_165806, s_165806_Idx, x_165808) {
		if (s_165806[s_165806_Idx] != null) { s_165806[s_165806_Idx] = (s_165806[s_165806_Idx]).concat(HEX24_166002(x_165808)); } else { s_165806[s_165806_Idx] = HEX24_166002(x_165808).slice(); };

	
}

function add_quoted_175402(s_175406, s_175406_Idx, x_175408) {
		if (s_175406[s_175406_Idx] != null) { s_175406[s_175406_Idx] = (s_175406[s_175406_Idx]).concat(cstrToNimstr((x_175408)+"")); } else { s_175406[s_175406_Idx] = cstrToNimstr((x_175408)+"").slice(); };

	
}

function collection_to_string_175211(x_175215, prefix_175217, separator_175219, suffix_175221) {
	var result_175222 = [null];

		result_175222[0] = nimCopy(null, prefix_175217, NTI138);
		var first_element_175223 = true;
		L1: do {
			var value_175232 = 0;
			var i_175618 = 0;
			var l_175620 = (x_175215 != null ? x_175215.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_175618 < l_175620)) break L3;
						value_175232 = x_175215[i_175618];
						if (first_element_175223) {
						first_element_175223 = false;
						}
						else {
						if (result_175222[0] != null) { result_175222[0] = (result_175222[0]).concat(separator_175219); } else { result_175222[0] = separator_175219.slice(); };
						}
						
						add_quoted_175402(result_175222, 0, value_175232);
						i_175618 += 1;
					}
			} while(false);
		} while(false);
		if (result_175222[0] != null) { result_175222[0] = (result_175222[0]).concat(suffix_175221); } else { result_175222[0] = suffix_175221.slice(); };

	return result_175222[0];

}

function HEX24_175203(x_175208) {
	var result_175209 = null;

		result_175209 = nimCopy(null, collection_to_string_175211(x_175208, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_175209;

}

function add_quoted_175002(s_175006, s_175006_Idx, x_175008) {
		if (s_175006[s_175006_Idx] != null) { s_175006[s_175006_Idx] = (s_175006[s_175006_Idx]).concat(HEX24_175203(x_175008)); } else { s_175006[s_175006_Idx] = HEX24_175203(x_175008).slice(); };

	
}

function add_quoted_176602(s_176606, s_176606_Idx, x_176608) {
		if (s_176606[s_176606_Idx] != null) { s_176606[s_176606_Idx] = (s_176606[s_176606_Idx]).concat(HEX24_164003(x_176608)); } else { s_176606[s_176606_Idx] = HEX24_164003(x_176608).slice(); };

	
}

function HEX24_174202(x_174206) {
	var result_174207 = [null];

		result_174207[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_174208 = true;
		if (!(first_element_174208)) {
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(", ")); } else { result_174207[0] = makeNimstrLit(", "); };
		}
		
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit("change_points")); } else { result_174207[0] = makeNimstrLit("change_points"); };
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(": ")); } else { result_174207[0] = makeNimstrLit(": "); };
		add_quoted_175002(result_174207, 0, x_174206.change_points);
		first_element_174208 = false;
		if (!(first_element_174208)) {
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(", ")); } else { result_174207[0] = makeNimstrLit(", "); };
		}
		
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit("loglikelihood")); } else { result_174207[0] = makeNimstrLit("loglikelihood"); };
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(": ")); } else { result_174207[0] = makeNimstrLit(": "); };
		add_quoted_176602(result_174207, 0, x_174206.loglikelihood);
		first_element_174208 = false;
		if (!(first_element_174208)) {
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(", ")); } else { result_174207[0] = makeNimstrLit(", "); };
		}
		
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit("best_loglikelihood")); } else { result_174207[0] = makeNimstrLit("best_loglikelihood"); };
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(": ")); } else { result_174207[0] = makeNimstrLit(": "); };
		add_quoted_164202(result_174207, 0, x_174206.best_loglikelihood);
		first_element_174208 = false;
		if (!(first_element_174208)) {
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(", ")); } else { result_174207[0] = makeNimstrLit(", "); };
		}
		
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit("best_likelihood")); } else { result_174207[0] = makeNimstrLit("best_likelihood"); };
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(": ")); } else { result_174207[0] = makeNimstrLit(": "); };
		add_quoted_164202(result_174207, 0, x_174206.best_likelihood);
		first_element_174208 = false;
		if (!(first_element_174208)) {
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(", ")); } else { result_174207[0] = makeNimstrLit(", "); };
		}
		
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit("best_time")); } else { result_174207[0] = makeNimstrLit("best_time"); };
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(": ")); } else { result_174207[0] = makeNimstrLit(": "); };
		add_quoted_164202(result_174207, 0, x_174206.best_time);
		first_element_174208 = false;
		if (!(first_element_174208)) {
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(", ")); } else { result_174207[0] = makeNimstrLit(", "); };
		}
		
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit("best_index")); } else { result_174207[0] = makeNimstrLit("best_index"); };
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(": ")); } else { result_174207[0] = makeNimstrLit(": "); };
		add_quoted_175402(result_174207, 0, x_174206.best_index);
		first_element_174208 = false;
		if (result_174207[0] != null) { result_174207[0] = (result_174207[0]).concat(makeNimstrLit(")")); } else { result_174207[0] = makeNimstrLit(")"); };

	return result_174207[0];

}

function add_quoted_174002(s_174006, s_174006_Idx, x_174008) {
		if (s_174006[s_174006_Idx] != null) { s_174006[s_174006_Idx] = (s_174006[s_174006_Idx]).concat(HEX24_174202(x_174008)); } else { s_174006[s_174006_Idx] = HEX24_174202(x_174008).slice(); };

	
}

function HEX24_164616(x_164620) {
	var result_164621 = [null];

		result_164621[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_164622 = true;
		if (!(first_element_164622)) {
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit(", ")); } else { result_164621[0] = makeNimstrLit(", "); };
		}
		
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit("before_change")); } else { result_164621[0] = makeNimstrLit("before_change"); };
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit(": ")); } else { result_164621[0] = makeNimstrLit(": "); };
		add_quoted_165802(result_164621, 0, x_164620.before_change);
		first_element_164622 = false;
		if (!(first_element_164622)) {
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit(", ")); } else { result_164621[0] = makeNimstrLit(", "); };
		}
		
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit("after_change")); } else { result_164621[0] = makeNimstrLit("after_change"); };
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit(": ")); } else { result_164621[0] = makeNimstrLit(": "); };
		add_quoted_165802(result_164621, 0, x_164620.after_change);
		first_element_164622 = false;
		if (!(first_element_164622)) {
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit(", ")); } else { result_164621[0] = makeNimstrLit(", "); };
		}
		
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit("likelihood")); } else { result_164621[0] = makeNimstrLit("likelihood"); };
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit(": ")); } else { result_164621[0] = makeNimstrLit(": "); };
		add_quoted_174002(result_164621, 0, x_164620.likelihood);
		first_element_164622 = false;
		if (result_164621[0] != null) { result_164621[0] = (result_164621[0]).concat(makeNimstrLit(")")); } else { result_164621[0] = makeNimstrLit(")"); };

	return result_164621[0];

}

function test_model_change_point_163040(change_point_163042, candidates_163043, verbose_163044) {
		rawEcho(makeNimstrLit("Robust Interrupted Time Series Model v3.0\x0A"));
		rawEcho(makeNimstrLit("Boot sample test"));
		L1: do {
			var HEX3Atmp_163409 = nimCopy(null, [1.0000000000000000e+000, 2.0000000000000000e+000, 3.0000000000000000e+000, 4.0000000000000000e+000, 5.0000000000000000e+000, 6.0000000000000000e+000, 7.0000000000000000e+000, 8.0000000000000000e+000, 9.0000000000000000e+000, 1.0000000000000000e+001, 1.1000000000000000e+001, 1.2000000000000000e+001, 1.3000000000000000e+001, 1.4000000000000000e+001, 1.5000000000000000e+001, 1.6000000000000000e+001, 1.7000000000000000e+001, 1.8000000000000000e+001, 1.9000000000000000e+001, 2.0000000000000000e+001], NTI163062);
			var i_163413 = 0;
			var result_163430 = new_seq_131619((HEX3Atmp_163409 != null ? HEX3Atmp_163409.length : 0));
			L2: do {
				var it_163439 = 0.0;
				var i_178840 = 0;
				var l_178842 = (HEX3Atmp_163409 != null ? HEX3Atmp_163409.length : 0);
				L3: do {
						L4: while (true) {
						if (!(i_178840 < l_178842)) break L4;
							it_163439 = HEX3Atmp_163409[i_178840];
							result_163430[i_163413] = it_163439;
							i_163413 += 1;
							i_178840 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var x_163451 = nimCopy(null, result_163430, NTI131624);
		L5: do {
			var HEX3Atmp_163809 = nimCopy(null, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], NTI163474);
			var i_163813 = 0;
			var result_163830 = new_seq_131619((HEX3Atmp_163809 != null ? HEX3Atmp_163809.length : 0));
			L6: do {
				var it_163839 = 0;
				var i_178848 = 0;
				var l_178850 = (HEX3Atmp_163809 != null ? HEX3Atmp_163809.length : 0);
				L7: do {
						L8: while (true) {
						if (!(i_178848 < l_178850)) break L8;
							it_163839 = HEX3Atmp_163809[i_178848];
							result_163830[i_163813] = it_163839;
							i_163813 += 1;
							i_178848 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var y_163851 = nimCopy(null, result_163830, NTI131624);
		L9: do {
			var t_163871 = 0;
			var colontmp__178855 = 0;
			colontmp__178855 = (x_163451 != null ? (x_163451.length-1) : -1);
			var res_178858 = 0;
			L10: do {
					L11: while (true) {
					if (!(res_178858 <= colontmp__178855)) break L11;
						t_163871 = res_178858;
						y_163851[t_163871] = (y_163851[t_163871] + ((0.0 * rand_144112(1000)) / 1.0000000000000000e+003));
						res_178858 += 1;
					}
			} while(false);
		} while(false);
		if (verbose_163044) {
		var fmt_res_163879 = mnewString(0);
		if (fmt_res_163879 != null) { fmt_res_163879 = (fmt_res_163879).concat(makeNimstrLit("X: ")); } else { fmt_res_163879 = makeNimstrLit("X: "); };
		if (fmt_res_163879 != null) { fmt_res_163879 = (fmt_res_163879).concat(HEX24_164003(x_163451)); } else { fmt_res_163879 = HEX24_164003(x_163451).slice(); };
		rawEcho(fmt_res_163879);
		var fmt_res_164452 = mnewString(0);
		if (fmt_res_164452 != null) { fmt_res_164452 = (fmt_res_164452).concat(makeNimstrLit("Y: ")); } else { fmt_res_164452 = makeNimstrLit("Y: "); };
		if (fmt_res_164452 != null) { fmt_res_164452 = (fmt_res_164452).concat(HEX24_164003(y_163851)); } else { fmt_res_164452 = HEX24_164003(y_163851).slice(); };
		rawEcho(fmt_res_164452);
		}
		
		var candidates_after_164612 = candidates_163043;
		var candidates_before_164613 = candidates_163043;
		var model_164614 = robust_interrupted_time_series(x_163451, y_163851, change_point_163042, candidates_before_164613, candidates_after_164612);
		if (verbose_163044) {
		rawEcho(HEX24_164616(model_164614));
		}
		

	
}
test_model_change_point_163040(7, 5, true);
exports.robust_interrupted_time_series = robust_interrupted_time_series
exports.robust_interrupted_time_series_approximated = robust_interrupted_time_series_approximated
exports.fix_vector = fix_vector
