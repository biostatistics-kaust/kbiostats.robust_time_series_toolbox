var LENGTH_VECTOR = 1012;
/* Generated by the Nim Compiler v1.0.6 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI164623 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI172073 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI172071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI172070 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI172080 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI172056 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172048 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172040 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172035 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI172295 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172293 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172291 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172065 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI172061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI172028 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI172023 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172015 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI172010 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI168443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI168442 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI165114 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI98432 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTILENGTH_VECTOR47 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI74228 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI168247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3694 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3604 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI126 = {size: 0,kind: 37,base: null,node: null,finalizer: null};
var NTI164022 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI164023 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI164018 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI164022.base = NTI126;
NTI164023.base = NTI164022;
var NNI164018 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "length", len: 0, typ: NTI104, name: "length", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI164023, name: "data", sons: null}]};
NTI164018.node = NNI164018;
NTI3604.base = NTI3694;
var NNI168247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3604, name: "Field1", sons: null}]};
NTI168247.node = NNI168247;
var NNI74228 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI74228.node = NNI74228;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
var NNILENGTH_VECTOR47 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI98432, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTILENGTH_VECTOR47.node = NNILENGTH_VECTOR47;
NTI165114.base = NTI124;
NTI168443.base = NTI124;
var NNI168442 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "autocorrelation", len: 0, typ: NTI168443, name: "autocorrelation", sons: null}, 
{kind: 1, offset: "confidence_interval", len: 0, typ: NTI124, name: "confidence_interval", sons: null}]};
NTI168442.node = NNI168442;
NTI172015.base = NTI124;
NTI172023.base = NTI124;
NTI172028.base = NTI124;
var NNI172010 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI124, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI124, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI172015, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI124, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_p_value", len: 0, typ: NTI124, name: "intercept_p_value", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI124, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI124, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI172023, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI124, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_p_value", len: 0, typ: NTI124, name: "slope_p_value", sons: null}, 
{kind: 1, offset: "R2", len: 0, typ: NTI124, name: "R2", sons: null}, 
{kind: 1, offset: "residual", len: 0, typ: NTI172028, name: "residual", sons: null}, 
{kind: 1, offset: "residual_sum_squares", len: 0, typ: NTI124, name: "residual_sum_squares", sons: null}, 
{kind: 1, offset: "residual_variance", len: 0, typ: NTI124, name: "residual_variance", sons: null}, 
{kind: 1, offset: "autocorrelation_function", len: 0, typ: NTI168442, name: "autocorrelation_function", sons: null}, 
{kind: 1, offset: "n", len: 0, typ: NTI104, name: "n", sons: null}]};
NTI172010.node = NNI172010;
var NNI172061 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mean_structure", len: 0, typ: NTI172010, name: "mean_structure", sons: null}, 
{kind: 1, offset: "autoregressive_structure", len: 0, typ: NTI172010, name: "autoregressive_structure", sons: null}]};
NTI172061.node = NNI172061;
var NNI172065 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "loglikelihood", len: 0, typ: NTI124, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "before_change", len: 0, typ: NTI172061, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI172061, name: "after_change", sons: null}]};
NTI172065.node = NNI172065;
NTI172291.base = NTI124;
NTI172293.base = NTI124;
NTI172295.base = NTI124;
NTI172040.base = NTI124;
NTI172048.base = NTI124;
NTI172056.base = NTI124;
var NNI172035 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI124, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI124, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI172040, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI124, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_p_value", len: 0, typ: NTI124, name: "intercept_p_value", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI124, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI124, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI172048, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI124, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_p_value", len: 0, typ: NTI124, name: "slope_p_value", sons: null}, 
{kind: 1, offset: "autoregressive_slope", len: 0, typ: NTI124, name: "autoregressive_slope", sons: null}, 
{kind: 1, offset: "autoregressive_slope_variance", len: 0, typ: NTI124, name: "autoregressive_slope_variance", sons: null}, 
{kind: 1, offset: "autoregressive_slope_confidence_interval", len: 0, typ: NTI172056, name: "autoregressive_slope_confidence_interval", sons: null}, 
{kind: 1, offset: "autoregressive_slope_width_confidence_interval", len: 0, typ: NTI124, name: "autoregressive_slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "autoregressive_slope_p_value", len: 0, typ: NTI124, name: "autoregressive_slope_p_value", sons: null}]};
NTI172035.node = NNI172035;
NTI172071.base = NTI104;
NTI172073.base = NTI124;
var NNI172070 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "change_points", len: 0, typ: NTI172071, name: "change_points", sons: null}, 
{kind: 1, offset: "loglikelihood", len: 0, typ: NTI172073, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "best_loglikelihood", len: 0, typ: NTI124, name: "best_loglikelihood", sons: null}, 
{kind: 1, offset: "best_likelihood", len: 0, typ: NTI124, name: "best_likelihood", sons: null}, 
{kind: 1, offset: "best_time", len: 0, typ: NTI124, name: "best_time", sons: null}, 
{kind: 1, offset: "best_index", len: 0, typ: NTI104, name: "best_index", sons: null}]};
NTI172070.node = NNI172070;
var NNI172080 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "before_change", len: 0, typ: NTI172061, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI172061, name: "after_change", sons: null}, 
{kind: 1, offset: "likelihood", len: 0, typ: NTI172070, name: "likelihood", sons: null}, 
{kind: 1, offset: "parameter_differences", len: 0, typ: NTI172035, name: "parameter_differences", sons: null}]};
NTI172080.node = NNI172080;
NTI164623.base = NTI124;

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		throw e_21618;

	
}
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_21062) {
	var result_21063 = null;

		result_21063 = nimCopy(null, mnewString(1), NTI138);
		result_21063[0] = x_21062;

	return result_21063;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
		var table_ppf_168396 = [1.0000000000000001e+50, 1.2710000000000001e+01, 4.3029999999999999e+00, 3.1819999999999999e+00, 2.7759999999999998e+00, 2.5710000000000002e+00, 2.4470000000000001e+00, 2.3650000000000002e+00, 2.3060000000000000e+00, 2.2620000000000000e+00, 2.2280000000000002e+00, 2.2010000000000001e+00, 2.1789999999999998e+00, 2.1600000000000001e+00, 2.1450000000000000e+00, 2.1309999999999998e+00, 2.1200000000000001e+00, 2.1099999999999999e+00, 2.1010000000000000e+00, 2.0930000000000000e+00, 2.0859999999999999e+00, 2.0800000000000001e+00, 2.0739999999999998e+00, 2.0690000000000000e+00, 2.0640000000000001e+00, 2.0600000000000001e+00, 2.0560000000000000e+00, 2.0520000000000000e+00, 2.0480000000000000e+00, 2.0449999999999999e+00, 2.0419999999999998e+00, 2.0209999999999999e+00, 2.0089999999999999e+00, 2.0000000000000000e+00, 1.9900000000000000e+00, 1.9840000000000000e+00, 1.9800000000000000e+00, 1.9600000000000000e+00];
var ConstSet12 = setConstr([65, 90]);
process.exitCode = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];

function new_seq_23336(len_23339) {
	var result_23341 = null;

		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}
	return result_23341;

}

function classify_54030(x_54032) {
	var result_54033 = 0;

	BeforeRet: do {
		if ((x_54032 == 0.0)) {
		if (((1.0000000000000000e+00 / x_54032) == Infinity)) {
		result_54033 = 2;
		break BeforeRet;
		}
		else {
			result_54033 = 3;
			break BeforeRet;
		}
		
		}
		
		if (((x_54032 * 5.0000000000000000e-01) == x_54032)) {
		if ((0.0 < x_54032)) {
		result_54033 = 5;
		break BeforeRet;
		}
		else {
			result_54033 = 6;
			break BeforeRet;
		}
		
		}
		
		if (!((x_54032 == x_54032))) {
		result_54033 = 4;
		break BeforeRet;
		}
		
		result_54033 = 0;
		break BeforeRet;
	} while (false);

	return result_54033;

}

function check_value_164127(data_164131, data_164131_Idx, length_164132, idx_164133, w_164134, w_idx_164135) {
			var Tmp1;

		var v_164136 = w_164134[w_idx_164135];
			if ((((classify_54030(v_164136) == 4) || (classify_54030(v_164136) == 5)) || (classify_54030(v_164136) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_164136 * 1.0000000000000000e+01) / 1.0000000000000000e+01) == v_164136));			}		if (Tmp1) {
		if ((idx_164133 == 0)) {
		data_164131[data_164131_Idx][idx_164133] = w_164134[(w_idx_164135 + 1)];
		}
		else {
		if ((idx_164133 == (length_164132 - 1))) {
		data_164131[data_164131_Idx][idx_164133] = w_164134[(w_idx_164135 - 1)];
		}
		else {
			data_164131[data_164131_Idx][idx_164133] = (5.0000000000000000e-01 * (w_164134[(w_idx_164135 - 1)] + w_164134[(w_idx_164135 + 1)]));
		}
		}
		}
		else {
			data_164131[data_164131_Idx][idx_164133] = v_164136;
		}
		

	
}

function fix_vector(v_164090) {
	var result_164092 = [null];

		var length_164098 = (v_164090 != null ? v_164090.length : 0);
		rawEcho(cstrToNimstr((length_164098)+""));
		result_164092[0] = new Array(length_164098); for (var i=0;i<length_164098;++i) {result_164092[0][i]=0.0;}		var i_164108 = 0;
		L1: do {
			var k_164126 = 0;
			var colontmp__164194 = 0;
			colontmp__164194 = (v_164090 != null ? (v_164090.length-1) : -1);
			var res_164195 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_164195 <= colontmp__164194)) break L3;
						k_164126 = res_164195;
						check_value_164127(result_164092, 0, length_164098, i_164108, v_164090, k_164126);
						i_164108 += 1;
						res_164195 += 1;
					}
			} while(false);
		} while(false);

	return result_164092[0];

}

function check_value_164234(data_164238, data_164238_Idx, length_164239, idx_164240, w_164241, w_idx_164242) {
			var Tmp1;

		var v_164243 = w_164241[w_idx_164242];
			if ((((classify_54030(v_164243) == 4) || (classify_54030(v_164243) == 5)) || (classify_54030(v_164243) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_164243 * 1.0000000000000000e+01) / 1.0000000000000000e+01) == v_164243));			}		if (Tmp1) {
		if ((idx_164240 == 0)) {
		data_164238[data_164238_Idx][idx_164240] = w_164241[(w_idx_164242 + 1)];
		}
		else {
		if ((idx_164240 == (length_164239 - 1))) {
		data_164238[data_164238_Idx][idx_164240] = w_164241[(w_idx_164242 - 1)];
		}
		else {
			data_164238[data_164238_Idx][idx_164240] = (5.0000000000000000e-01 * (w_164241[(w_idx_164242 - 1)] + w_164241[(w_idx_164242 + 1)]));
		}
		}
		}
		else {
			data_164238[data_164238_Idx][idx_164240] = v_164243;
		}
		

	
}

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function vector_164202(v_164205) {
	var result_164206 = {length: 0, data: null};

		result_164206.data = new Float32Array(LENGTH_VECTOR);
		result_164206.length = (v_164205 != null ? v_164205.length : 0);
		var i_164217 = 0;
		L1: do {
			var k_164233 = 0;
			var colontmp__172120 = 0;
			colontmp__172120 = (v_164205 != null ? (v_164205.length-1) : -1);
			var res_172121 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_172121 <= colontmp__172120)) break L3;
						k_164233 = res_172121;
						check_value_164234(result_164206, "data", result_164206.length, i_164217, v_164205, k_164233);
						i_164217 += 1;
						res_172121 += 1;
					}
			} while(false);
		} while(false);
		result_164206.length = i_164217;
		nimCopy(result_164206, result_164206, NTI164018);

	return result_164206;

}

function new_seq_164619(len_164622) {
	var result_164624 = null;

		result_164624 = new Array(len_164622); for (var i=0;i<len_164622;++i) {result_164624[i]=0.0;}
	return result_164624;

}

function vector_164322(v_164325) {
	var result_164326 = {length: 0, data: null};

		L1: do {
			var iHEX60gensym164329_164613 = 0;
			var resultHEX60gensym164330_164645 = new_seq_164619((v_164325 != null ? v_164325.length : 0));
			L2: do {
				var it_164651 = 0;
				var i_172117 = 0;
				L3: do {
						L4: while (true) {
						if (!(i_172117 < (v_164325 != null ? v_164325.length : 0))) break L4;
							it_164651 = v_164325[i_172117];
							resultHEX60gensym164330_164645[iHEX60gensym164329_164613] = it_164651;
							iHEX60gensym164329_164613 += 1;
							i_172117 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		nimCopy(result_164326, vector_164202(resultHEX60gensym164330_164645), NTI164018);

	return result_164326;

}

function high_164767(v_164769) {
	var result_164770 = 0;

		result_164770 = (v_164769.length - 1);

	return result_164770;

}

function sum_168140(x_168144) {
	var result_168145 = 0.0;

		L1: do {
			var i_168176 = 0.0;
			var i_172137 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_172137 < (x_168144 != null ? x_168144.length : 0))) break L3;
						i_168176 = x_168144[i_172137];
						result_168145 = (result_168145 + i_168176);
						i_172137 += 1;
					}
			} while(false);
		} while(false);

	return result_168145;

}

function sum_168135(v_168137) {
	var result_168138 = 0.0;

		result_168138 = sum_168140(v_168137.data);

	return result_168138;

}

function len_164750(v_164752) {
	var result_164753 = 0;

		result_164753 = v_164752.length;

	return result_164753;

}

function mean_168203(v_168205) {
	var result_168206 = 0.0;

		result_168206 = (sum_168135(v_168205) / len_164750(v_168205));

	return result_168206;

}

function low_164784(v_164786) {
	var result_164787 = 0;

		result_164787 = 0;

	return result_164787;

}

function HEX5BHEX5DHEX3D_165414(v_165417, i_165418, val_165419) {
		if ((v_165417.length <= i_165418)) {
		v_165417.length = (i_165418 + 1);
		}
		
		v_165417.data[i_165418] = val_165419;

	
}

function HEX5BHEX5D_165150(v_165152, i_165153) {
	var result_165154 = 0.0;

		result_165154 = v_165152.data[i_165153];

	return result_165154;

}

function HEX2EHEX2A_167465(v_167467, w_167468) {
	var result_167469 = [{length: 0, data: null}];

		result_167469[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_167481 = 0;
			var colontmp__172141 = 0;
			var colontmp__172142 = 0;
			colontmp__172141 = low_164784(v_167467);
			colontmp__172142 = high_164767(v_167467);
			var res_172143 = colontmp__172141;
			L2: do {
					L3: while (true) {
					if (!(res_172143 <= colontmp__172142)) break L3;
						i_167481 = res_172143;
						HEX5BHEX5DHEX3D_165414(result_167469[0], i_167481, (HEX5BHEX5D_165150(v_167467, i_167481) * HEX5BHEX5D_165150(w_167468, i_167481)));
						res_172143 += 1;
					}
			} while(false);
		} while(false);

	return result_167469[0];

}

function HEX2AHEX3D_158841(x_158845, x_158845_Idx, y_158846) {
		x_158845[x_158845_Idx] = (x_158845[x_158845_Idx] * y_158846);

	
}

function HEX5E_168241(x_168244, y_168245) {
	var result_168246 = [0.0];

		switch (y_168245) {
		case 0:
			result_168246[0] = 1.0000000000000000e+00;
			break;
		case 1:
			result_168246[0] = x_168244;
			break;
		case 2:
			result_168246[0] = (x_168244 * x_168244);
			break;
		case 3:
			result_168246[0] = ((x_168244 * x_168244) * x_168244);
			break;
		default: 
			var colontmp__172149 = {Field0: 0.0, Field1: 0};
			var x_168248 = [0.0];
			var y_168249 = 0;
			nimCopy(colontmp__172149, {Field0: x_168244, Field1: nimCopy(null, y_168245, NTI3604)}, NTI168247);
			x_168248[0] = colontmp__172149["Field0"];
			y_168249 = colontmp__172149["Field1"];
			result_168246[0] = 1.0000000000000000e+00;
			L1: do {
					L2: while (true) {
					if (!true) break L2;
						if (!(((y_168249 & 1) == 0))) {
						HEX2AHEX3D_158841(result_168246, 0, x_168248[0]);
						}
						
						y_168249 = (y_168249 >> 1);
						if ((y_168249 == 0)) {
						break L1;
						}
						
						HEX2AHEX3D_158841(x_168248, 0, x_168248[0]);
					}
			} while(false);
			break;
		}

	return result_168246[0];

}

function variance_168237(v_168239) {
	var result_168240 = 0.0;

		result_168240 = ((sum_168135(HEX2EHEX2A_167465(v_168239, v_168239)) / len_164750(v_168239)) - HEX5E_168241(mean_168203(v_168239), 2));

	return result_168240;

}

function HEX5BHEX5D_165814(v_165816, idx_165824) {
	var result_165825 = {length: 0, data: null};

		result_165825.data = new Float32Array(LENGTH_VECTOR);
		var k_165833 = 0;
		L1: do {
			var i_165858 = 0;
			L2: do {
				var x_172160 = 0;
				var colontmp__172161 = 0;
				var colontmp__172162 = 0;
				colontmp__172161 = idx_165824.a;
				colontmp__172162 = idx_165824.b;
				var res_172163 = colontmp__172161;
				L3: do {
						L4: while (true) {
						if (!(res_172163 <= colontmp__172162)) break L4;
							x_172160 = res_172163;
							i_165858 = x_172160;
							result_165825.data[k_165833] = v_165816.data[i_165858];
							k_165833 += 1;
							res_172163 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_165825.length = k_165833;

	return result_165825;

}

function HEX2EHEX2E_74220(a_74224, b_74225) {
	var result_74231 = {a: 0, b: 0};

		nimCopy(result_74231, {a: a_74224, b: b_74225}, NTI74228);

	return result_74231;

}

function HEX2D_167367(v_167369, k_167370) {
	var result_167371 = [{length: 0, data: null}];

		result_167371[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_167383 = 0;
			var colontmp__172171 = 0;
			var colontmp__172172 = 0;
			colontmp__172171 = low_164784(v_167369);
			colontmp__172172 = high_164767(v_167369);
			var res_172173 = colontmp__172171;
			L2: do {
					L3: while (true) {
					if (!(res_172173 <= colontmp__172172)) break L3;
						i_167383 = res_172173;
						HEX5BHEX5DHEX3D_165414(result_167371[0], i_167383, (HEX5BHEX5D_165150(v_167369, i_167383) - k_167370));
						res_172173 += 1;
					}
			} while(false);
		} while(false);

	return result_167371[0];

}

function acf_168476(x_168478, max_lag_168479) {
	var result_168480 = [{length: 0, data: null}];

		result_168480[0].data = new Float32Array(LENGTH_VECTOR);
		var n_168487 = high_164767(x_168478);
		var u_168488 = mean_168203(x_168478);
		var s2_168489 = variance_168237(x_168478);
		HEX5BHEX5DHEX3D_165414(result_168480[0], 0, 1.0000000000000000e+00);
		L1: do {
			var h_168499 = 0;
			var colontmp__172128 = 0;
			colontmp__172128 = nimMin(max_lag_168479, n_168487);
			var res_172129 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_172129 <= colontmp__172128)) break L3;
						h_168499 = res_172129;
						var a_168509 = HEX5BHEX5D_165814(x_168478, HEX2EHEX2E_74220(0, (n_168487 - h_168499)));
						var b_168517 = HEX5BHEX5D_165814(x_168478, HEX2EHEX2E_74220(h_168499, n_168487));
						HEX5BHEX5DHEX3D_165414(result_168480[0], h_168499, ((mean_168203(HEX2EHEX2A_167465(HEX2D_167367(a_168509, u_168488), HEX2D_167367(b_168517, u_168488))) + 1.0000000000000000e-10) / ((n_168487 * s2_168489) + 1.0000000000000000e-10)));
						res_172129 += 1;
					}
			} while(false);
		} while(false);

	return result_168480[0];

}

function parse_saturated_natural_63231(s_63233, b_63235, b_63235_Idx, start_63236) {
			var Tmp1;
					var Tmp4;

	var result_63238 = 0;

		var i_63239 = start_63236;
		if (((i_63239 < (s_63233 != null ? s_63233.length : 0)) && (s_63233[i_63239] == 43))) {
		i_63239 += 1;
		}
		
			if (!(i_63239 < (s_63233 != null ? s_63233.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_63233[i_63239]] != undefined);			}		if (Tmp1) {
		b_63235[b_63235_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_63239 < (s_63233 != null ? s_63233.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_63233[i_63239]] != undefined);					}				if (!Tmp4) break L3;
					var c_63268 = (s_63233[i_63239] - 48);
					if ((b_63235[b_63235_Idx] <= Math.trunc((2147483647 - c_63268) / 10))) {
					b_63235[b_63235_Idx] = ((b_63235[b_63235_Idx] * 10) + c_63268);
					}
					else {
						b_63235[b_63235_Idx] = 2147483647;
					}
					
					i_63239 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_63239 < (s_63233 != null ? s_63233.length : 0)) && (s_63233[i_63239] == 95))) break L6;
								i_63239 += 1;
							}
					} while(false);
				}
		} while(false);
		result_63238 = (i_63239 - start_63236);
		}
		

	return result_63238;

}

function HEX5BHEX5D_101304(s_101308, x_101310) {
	var result_101311 = null;

		var a_101401 = x_101310.a;
		var l_101601 = ((((s_101308 != null ? s_101308.length : 0) - x_101310.b) - a_101401) + 1);
		result_101311 = nimCopy(null, mnewString(l_101601), NTI138);
		L1: do {
			var i_101609 = 0;
			var i_172189 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_172189 < l_101601)) break L3;
						i_101609 = i_172189;
						result_101311[i_101609] = s_101308[(i_101609 + a_101401)];
						i_172189 += 1;
					}
			} while(false);
		} while(false);

	return result_101311;

}

function HEX2EHEX2E_LENGTH_VECTOR39(a_LENGTH_VECTOR43, b_LENGTH_VECTOR44) {
	var result_LENGTH_VECTOR50 = {a: 0, b: 0};

		nimCopy(result_LENGTH_VECTOR50, {a: a_LENGTH_VECTOR43, b: b_LENGTH_VECTOR44}, NTILENGTH_VECTOR47);

	return result_LENGTH_VECTOR50;

}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function parse_standard_format_specifier_161324(s_161326, start_161327, ignore_unknown_suffix_161329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_161330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_161330.fill = 32;
		result_161330.align = 0;
		result_161330.sign = 45;
		var i_161333 = start_161327;
		if ((((i_161333 + 1) < (s_161326 != null ? s_161326.length : 0)) && (ConstSet2[s_161326[(i_161333 + 1)]] != undefined))) {
		result_161330.fill = s_161326[i_161333];
		result_161330.align = s_161326[(i_161333 + 1)];
		i_161333 += 2;
		}
		else {
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (ConstSet3[s_161326[i_161333]] != undefined))) {
		result_161330.align = s_161326[i_161333];
		i_161333 += 1;
		}
		}
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (ConstSet4[s_161326[i_161333]] != undefined))) {
		result_161330.sign = s_161326[i_161333];
		i_161333 += 1;
		}
		
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (s_161326[i_161333] == 35))) {
		result_161330.alternateForm = true;
		i_161333 += 1;
		}
		
			if (!(((i_161333 + 1) < (s_161326 != null ? s_161326.length : 0)) && (s_161326[i_161333] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_161326[(i_161333 + 1)]] != undefined);			}		if (Tmp1) {
		result_161330.padWithZero = true;
		i_161333 += 1;
		}
		
		var parsed_length_161391 = parse_saturated_natural_63231(s_161326, result_161330, "minimumWidth", i_161333);
		i_161333 += parsed_length_161391;
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (s_161326[i_161333] == 46))) {
		i_161333 += 1;
		var parsed_length_b_161405 = parse_saturated_natural_63231(s_161326, result_161330, "precision", i_161333);
		i_161333 += parsed_length_b_161405;
		}
		else {
			result_161330.precision = -1;
		}
		
			if (!(i_161333 < (s_161326 != null ? s_161326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_161326[i_161333]] != undefined);			}		if (Tmp2) {
		result_161330.typ = s_161326[i_161333];
		i_161333 += 1;
		}
		
		result_161330.endPosition = i_161333;
			if (!!((i_161333 == (s_161326 != null ? s_161326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_161329);			}		if (Tmp3) {
		var eHEX60gensym161460_161603 = null;
		eHEX60gensym161460_161603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym161460_161603.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_101304(s_161326, HEX2EHEX2E_LENGTH_VECTOR39(i_161333, 1)) || []), NTI138);
		eHEX60gensym161460_161603.parent = null;
		raiseException(eHEX60gensym161460_161603, "ValueError");
		}
		

	return result_161330;

}

function nucruneLen(s_65829) {
	var result_65830 = 0;

		var i_65832 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_65832 < (s_65829 != null ? s_65829.length : 0))) break L2;
					if ((s_65829[i_65832] <= 127)) {
					i_65832 += 1;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 5) == 6)) {
					i_65832 += 2;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 4) == 14)) {
					i_65832 += 3;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 3) == 30)) {
					i_65832 += 4;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 2) == 62)) {
					i_65832 += 5;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 1) == 126)) {
					i_65832 += 6;
					}
					else {
					i_65832 += 1;
					}
					}}}}}
					result_65830 += 1;
				}
		} while(false);

	return result_65830;

}

function rune_len_at_65961(s_65963, i_65964) {
	var result_65965 = 0;

		if ((s_65963[i_65964] <= 127)) {
		result_65965 = 1;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 5) == 6)) {
		result_65965 = 2;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 4) == 14)) {
		result_65965 = 3;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 3) == 30)) {
		result_65965 = 4;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 2) == 62)) {
		result_65965 = 5;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 1) == 126)) {
		result_65965 = 6;
		}
		else {
			result_65965 = 1;
		}
		}}}}}

	return result_65965;

}

function rune_offset_71644(s_71646, pos_71647, start_71648) {
	var result_71649 = 0;

	BeforeRet: do {
		var i_71651 = 0;
		var o_71652 = start_71648;
		L1: do {
				L2: while (true) {
				if (!(i_71651 < pos_71647)) break L2;
					o_71652 += rune_len_at_65961(s_71646, o_71652);
					if (((s_71646 != null ? s_71646.length : 0) <= o_71652)) {
					result_71649 = -1;
					break BeforeRet;
					}
					
					i_71651 += 1;
				}
		} while(false);
		result_71649 = o_71652;
		break BeforeRet;
	} while (false);

	return result_71649;

}

function validate_utf8_68829(s_68831) {
						var Tmp3;
						var Tmp4;
						var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;

	var result_68832 = 0;

	BeforeRet: do {
		var i_68834 = 0;
		var l_68835 = (s_68831 != null ? s_68831.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_68834 < l_68835)) break L2;
					if ((s_68831[i_68834] <= 127)) {
					i_68834 += 1;
					}
					else {
					if ((((s_68831[i_68834] >>> 0) >>> 5) == 6)) {
					if ((s_68831[i_68834] < 194)) {
					result_68832 = i_68834;
					break BeforeRet;
					}
					
						if (!((i_68834 + 1) < l_68835)) Tmp3 = false; else {							Tmp3 = (((s_68831[(i_68834 + 1)] >>> 0) >>> 6) == 2);						}					if (Tmp3) {
					i_68834 += 2;
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_68831[i_68834] >>> 0) >>> 4) == 14)) {
						if (!((i_68834 + 2) < l_68835)) Tmp5 = false; else {							Tmp5 = (((s_68831[(i_68834 + 1)] >>> 0) >>> 6) == 2);						}						if (!Tmp5) Tmp4 = false; else {							Tmp4 = (((s_68831[(i_68834 + 2)] >>> 0) >>> 6) == 2);						}					if (Tmp4) {
					i_68834 += 3;
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_68831[i_68834] >>> 0) >>> 3) == 30)) {
						if (!((i_68834 + 3) < l_68835)) Tmp8 = false; else {							Tmp8 = (((s_68831[(i_68834 + 1)] >>> 0) >>> 6) == 2);						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (((s_68831[(i_68834 + 2)] >>> 0) >>> 6) == 2);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (((s_68831[(i_68834 + 3)] >>> 0) >>> 6) == 2);						}					if (Tmp6) {
					i_68834 += 4;
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_68832 = -1;
		break BeforeRet;
	} while (false);

	return result_68832;

}

function nsuRepeatChar(c_154656, count_154657) {
	var result_154658 = null;

		result_154658 = nimCopy(null, mnewString(count_154657), NTI138);
		L1: do {
			var i_154667 = 0;
			var colontmp__172221 = 0;
			colontmp__172221 = (count_154657 - 1);
			var res_172222 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_172222 <= colontmp__172221)) break L3;
						i_154667 = res_172222;
						result_154658[i_154667] = c_154656;
						res_172222 += 1;
					}
			} while(false);
		} while(false);

	return result_154658;

}

function align_string_161223(s_161225, minimum_width_161226, align_161227, fill_161228) {
			var Tmp1;

	var result_161229 = null;

		if ((minimum_width_161226 == 0)) {
		result_161229 = nimCopy(null, s_161225, NTI138);
		}
		else {
			if ((validate_utf8_68829(s_161225) == -1)) {
			Tmp1 = nucruneLen(s_161225);
			}
			else {
			Tmp1 = (s_161225 != null ? s_161225.length : 0);
			}
			
			var s_rune_len_161231 = Tmp1;
			var to_fill_161232 = (minimum_width_161226 - s_rune_len_161231);
			if ((to_fill_161232 <= 0)) {
			result_161229 = nimCopy(null, s_161225, NTI138);
			}
			else {
			if (((align_161227 == 60) || (align_161227 == 0))) {
			result_161229 = nimCopy(null, (s_161225 || []).concat(nsuRepeatChar(fill_161228, to_fill_161232) || []), NTI138);
			}
			else {
			if ((align_161227 == 94)) {
			var half_161233 = Math.trunc(to_fill_161232 / 2);
			result_161229 = nimCopy(null, (nsuRepeatChar(fill_161228, half_161233) || []).concat(s_161225 || [],nsuRepeatChar(fill_161228, (to_fill_161232 - half_161233)) || []), NTI138);
			}
			else {
				result_161229 = nimCopy(null, (nsuRepeatChar(fill_161228, to_fill_161232) || []).concat(s_161225 || []), NTI138);
			}
			}}
		}
		

	return result_161229;

}

function format_value_161688(result_161691, result_161691_Idx, value_161692, specifier_161693) {
		var spec_161694 = parse_standard_format_specifier_161324(specifier_161693, 0, false);
		var value_161695 = nimCopy(null, value_161692, NTI138);
		switch (spec_161694.typ) {
		case 115:
		case 0:
			break;
		default: 
			var eHEX60gensym161698_161803 = null;
			eHEX60gensym161698_161803 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym161698_161803.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_161694.typ]), NTI138);
			eHEX60gensym161698_161803.parent = null;
			raiseException(eHEX60gensym161698_161803, "ValueError");
			break;
		}
		if (!((spec_161694.precision == -1))) {
		if ((spec_161694.precision < nucruneLen(value_161695))) {
		(value_161695 == null ? value_161695 = mnewString(rune_offset_71644(value_161695, spec_161694.precision, 0)) : value_161695.length = rune_offset_71644(value_161695, spec_161694.precision, 0));
		}
		
		}
		
		if (result_161691[result_161691_Idx] != null) { result_161691[result_161691_Idx] = (result_161691[result_161691_Idx]).concat(align_string_161223(value_161695, spec_161694.minimumWidth, spec_161694.align, spec_161694.fill)); } else { result_161691[result_161691_Idx] = align_string_161223(value_161695, spec_161694.minimumWidth, spec_161694.align, spec_161694.fill).slice(); };

	
}

function nsuformatBiggestFloat(f_158221, format_158222, precision_158228, decimal_sep_158229) {
	var result_158230 = null;

		var precision_158401 = precision_158228;
		if ((precision_158401 == -1)) {
		precision_158401 = 6;
		}
		
		var res_158403 = null;
		switch (format_158222) {
		case 0:
			res_158403 = f_158221.toString();
			break;
		case 1:
			res_158403 = f_158221.toFixed(precision_158401);
			break;
		case 2:
			res_158403 = f_158221.toExponential(precision_158401);
			break;
		}
		result_158230 = nimCopy(null, cstrToNimstr(res_158403), NTI138);
		if (((1.0000000000000000e+00 / f_158221) == -Infinity)) {
		result_158230 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_158403) || []), NTI138);
		}
		
		L1: do {
			var i_158411 = 0;
			var colontmp__172237 = 0;
			colontmp__172237 = (result_158230 != null ? result_158230.length : 0);
			var i_172238 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_172238 < colontmp__172237)) break L3;
						i_158411 = i_172238;
						if ((ConstSet9[result_158230[i_158411]] != undefined)) {
						result_158230[i_158411] = decimal_sep_158229;
						}
						
						i_172238 += 1;
					}
			} while(false);
		} while(false);

	return result_158230;

}

function insert_28601(x_28604, x_28604_Idx, item_28605, i_28606) {
		var xl_28607 = (x_28604[x_28604_Idx] != null ? x_28604[x_28604_Idx].length : 0);
		(x_28604[x_28604_Idx] == null ? x_28604[x_28604_Idx] = mnewString((xl_28607 + (item_28605 != null ? item_28605.length : 0))) : x_28604[x_28604_Idx].length = (xl_28607 + (item_28605 != null ? item_28605.length : 0)));
		var j_28608 = (xl_28607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_28606 <= j_28608)) break L2;
					x_28604[x_28604_Idx][(j_28608 + (item_28605 != null ? item_28605.length : 0))] = x_28604[x_28604_Idx][j_28608];
					j_28608 -= 1;
				}
		} while(false);
		j_28608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_28608 < (item_28605 != null ? item_28605.length : 0))) break L4;
					x_28604[x_28604_Idx][(j_28608 + i_28606)] = item_28605[j_28608];
					j_28608 += 1;
				}
		} while(false);

	
}

function nsuToUpperAsciiChar(c_150463) {
	var result_150464 = 0;

		if ((ConstSet11[c_150463] != undefined)) {
		result_150464 = (c_150463 - 32);
		}
		else {
			result_150464 = c_150463;
		}
		

	return result_150464;

}

function nsuToUpperAsciiStr(s_150502) {
	var result_150503 = null;

		result_150503 = nimCopy(null, mnewString((s_150502 != null ? s_150502.length : 0)), NTI138);
		L1: do {
			var iHEX60gensym150504_150513 = 0;
			var colontmp__172244 = 0;
			colontmp__172244 = ((s_150502 != null ? s_150502.length : 0) - 1);
			var res_172245 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_172245 <= colontmp__172244)) break L3;
						iHEX60gensym150504_150513 = res_172245;
						result_150503[iHEX60gensym150504_150513] = nsuToUpperAsciiChar(s_150502[iHEX60gensym150504_150513]);
						res_172245 += 1;
					}
			} while(false);
		} while(false);

	return result_150503;

}

function format_value_164820(result_164823, result_164823_Idx, value_164824, specifier_164825) {
		var Tmp1;

	BeforeRet: do {
		if (((specifier_164825 != null ? specifier_164825.length : 0) == 0)) {
		if (result_164823[result_164823_Idx] != null) { result_164823[result_164823_Idx] = (result_164823[result_164823_Idx]).concat(cstrToNimstr((value_164824)+"")); } else { result_164823[result_164823_Idx] = cstrToNimstr((value_164824)+"").slice(); };
		break BeforeRet;
		}
		
		var spec_164826 = parse_standard_format_specifier_161324(specifier_164825, 0, false);
		var fmode_164827 = 0;
		switch (spec_164826.typ) {
		case 101:
		case 69:
			fmode_164827 = 2;
			break;
		case 102:
		case 70:
			fmode_164827 = 1;
			break;
		case 103:
		case 71:
			fmode_164827 = 0;
			break;
		case 0:
			break;
		default: 
			var eHEX60gensym164829_165003 = null;
			eHEX60gensym164829_165003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym164829_165003.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_164826.typ]), NTI138);
			eHEX60gensym164829_165003.parent = null;
			raiseException(eHEX60gensym164829_165003, "ValueError");
			break;
		}
		var f_165010 = [nsuformatBiggestFloat(value_164824, fmode_164827, spec_164826.precision, 46)];
		var sign_165011 = false;
		if ((0.0 <= value_164824)) {
		if (!((spec_164826.sign == 45))) {
		sign_165011 = true;
		if ((value_164824 == 0.0)) {
		if (((1.0000000000000000e+00 / value_164824) == Infinity)) {
		insert_28601(f_165010, 0, nimCharToStr(spec_164826.sign), 0);
		}
		
		}
		else {
		insert_28601(f_165010, 0, nimCharToStr(spec_164826.sign), 0);
		}
		
		}
		
		}
		else {
			sign_165011 = true;
		}
		
		if (spec_164826.padWithZero) {
		var sign_str_165014 = [];
		if (sign_165011) {
		sign_str_165014 = nimCopy(null, nimCharToStr(f_165010[0][0]), NTI138);
		f_165010[0] = nimCopy(null, HEX5BHEX5D_101304(f_165010[0], HEX2EHEX2E_LENGTH_VECTOR39(1, 1)), NTI138);
		}
		
		var to_fill_165057 = ((spec_164826.minimumWidth - (f_165010[0] != null ? f_165010[0].length : 0)) - (sign_165011 ? 1:0));
		if ((0 < to_fill_165057)) {
		f_165010[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_165057) || []).concat(f_165010[0] || []), NTI138);
		}
		
		if (sign_165011) {
		f_165010[0] = nimCopy(null, (sign_str_165014 || []).concat(f_165010[0] || []), NTI138);
		}
		
		}
		
		if ((spec_164826.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_164826.align;
		}
		
		var align_165060 = Tmp1;
		var res_165061 = align_string_161223(f_165010[0], spec_164826.minimumWidth, align_165060, spec_164826.fill);
		if ((ConstSet10[spec_164826.typ] != undefined)) {
		if (result_164823[result_164823_Idx] != null) { result_164823[result_164823_Idx] = (result_164823[result_164823_Idx]).concat(nsuToUpperAsciiStr(res_165061)); } else { result_164823[result_164823_Idx] = nsuToUpperAsciiStr(res_165061).slice(); };
		}
		else {
		if (result_164823[result_164823_Idx] != null) { result_164823[result_164823_Idx] = (result_164823[result_164823_Idx]).concat(res_165061); } else { result_164823[result_164823_Idx] = res_165061.slice(); };
		}
		
	} while (false);

	
}

function HEX24_164801(v_164803) {
	var result_164804 = null;

		result_164804 = nimCopy(null, makeNimstrLit("["), NTI138);
		L1: do {
			var k_164810 = 0;
			var colontmp__172228 = 0;
			var colontmp__172229 = 0;
			colontmp__172228 = low_164784(v_164803);
			colontmp__172229 = high_164767(v_164803);
			var res_172230 = colontmp__172228;
			L2: do {
					L3: while (true) {
					if (!(res_172230 <= colontmp__172229)) break L3;
						k_164810 = res_172230;
						var fmt_res_164814 = [mnewString(0)];
						format_value_164820(fmt_res_164814, 0, v_164803.data[k_164810], makeNimstrLit(".04f"));
						if (result_164804 != null) { result_164804 = (result_164804).concat(fmt_res_164814[0]); } else { result_164804 = fmt_res_164814[0].slice(); };
						if (!((k_164810 == high_164767(v_164803)))) {
						if (result_164804 != null) { result_164804 = (result_164804).concat(makeNimstrLit(", ")); } else { result_164804 = makeNimstrLit(", "); };
						}
						
						res_172230 += 1;
					}
			} while(false);
		} while(false);
		if (result_164804 != null) { result_164804 = (result_164804).concat(makeNimstrLit("]")); } else { result_164804 = makeNimstrLit("]"); };

	return result_164804;

}

function format_value_168559(result_168562, result_168562_Idx, value_168563, specifier_168564) {
		format_value_161688(result_168562, result_168562_Idx, HEX24_164801(value_168563), specifier_168564);

	
}

function add_quoted_170601(s_170604, s_170604_Idx, x_170605) {
		if (s_170604[s_170604_Idx] != null) { s_170604[s_170604_Idx] = (s_170604[s_170604_Idx]).concat(cstrToNimstr((x_170605)+"")); } else { s_170604[s_170604_Idx] = cstrToNimstr((x_170605)+"").slice(); };

	
}

function collection_to_string_170208(x_170211, prefix_170212, separator_170213, suffix_170214) {
	var result_170215 = [null];

		result_170215[0] = nimCopy(null, prefix_170212, NTI138);
		var first_element_170216 = true;
		L1: do {
			var value_170414 = 0.0;
			var i_172252 = 0;
			var l_172253 = (x_170211 != null ? x_170211.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_172252 < l_172253)) break L3;
						value_170414 = x_170211[i_172252];
						if (first_element_170216) {
						first_element_170216 = false;
						}
						else {
						if (result_170215[0] != null) { result_170215[0] = (result_170215[0]).concat(separator_170213); } else { result_170215[0] = separator_170213.slice(); };
						}
						
						add_quoted_170601(result_170215, 0, value_170414);
						i_172252 += 1;
					}
			} while(false);
		} while(false);
		if (result_170215[0] != null) { result_170215[0] = (result_170215[0]).concat(suffix_170214); } else { result_170215[0] = suffix_170214.slice(); };

	return result_170215[0];

}

function HEX24_170202(x_170206) {
	var result_170207 = null;

		result_170207 = nimCopy(null, collection_to_string_170208(x_170206, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_170207;

}

function add_quoted_170001(s_170004, s_170004_Idx, x_170005) {
		if (s_170004[s_170004_Idx] != null) { s_170004[s_170004_Idx] = (s_170004[s_170004_Idx]).concat(HEX24_170202(x_170005)); } else { s_170004[s_170004_Idx] = HEX24_170202(x_170005).slice(); };

	
}

function HEX24_168600(x_168603) {
	var result_168604 = [null];

		result_168604[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_168605 = true;
		if (!(first_element_168605)) {
		if (result_168604[0] != null) { result_168604[0] = (result_168604[0]).concat(makeNimstrLit(", ")); } else { result_168604[0] = makeNimstrLit(", "); };
		}
		
		if (result_168604[0] != null) { result_168604[0] = (result_168604[0]).concat(makeNimstrLit("autocorrelation")); } else { result_168604[0] = makeNimstrLit("autocorrelation"); };
		if (result_168604[0] != null) { result_168604[0] = (result_168604[0]).concat(makeNimstrLit(": ")); } else { result_168604[0] = makeNimstrLit(": "); };
		add_quoted_170001(result_168604, 0, x_168603.autocorrelation);
		first_element_168605 = false;
		if (!(first_element_168605)) {
		if (result_168604[0] != null) { result_168604[0] = (result_168604[0]).concat(makeNimstrLit(", ")); } else { result_168604[0] = makeNimstrLit(", "); };
		}
		
		if (result_168604[0] != null) { result_168604[0] = (result_168604[0]).concat(makeNimstrLit("confidence_interval")); } else { result_168604[0] = makeNimstrLit("confidence_interval"); };
		if (result_168604[0] != null) { result_168604[0] = (result_168604[0]).concat(makeNimstrLit(": ")); } else { result_168604[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_168604, 0, x_168603.confidence_interval);
		first_element_168605 = false;
		if (result_168604[0] != null) { result_168604[0] = (result_168604[0]).concat(makeNimstrLit(")")); } else { result_168604[0] = makeNimstrLit(")"); };

	return result_168604[0];

}

function format_value_168594(result_168597, result_168597_Idx, value_168598, specifier_168599) {
		format_value_161688(result_168597, result_168597_Idx, HEX24_168600(value_168598), specifier_168599);

	
}

function vector_to_seq_165111(v_165113) {
	var result_165115 = null;

		var length_165116 = len_164750(v_165113);
		result_165115 = new Array(length_165116); for (var i=0;i<length_165116;++i) {result_165115[i]=0.0;}		var i_165124 = 0;
		L1: do {
			var k_165130 = 0;
			var colontmp__172256 = 0;
			var colontmp__172257 = 0;
			colontmp__172256 = low_164784(v_165113);
			colontmp__172257 = high_164767(v_165113);
			var res_172258 = colontmp__172256;
			L2: do {
					L3: while (true) {
					if (!(res_172258 <= colontmp__172257)) break L3;
						k_165130 = res_172258;
						result_165115[i_165124] = v_165113.data[k_165130];
						i_165124 += 1;
						res_172258 += 1;
					}
			} while(false);
		} while(false);

	return result_165115;

}

function to_float_10657(i_10659) {
	var result_10660 = 0.0;

		result_10660 = i_10659;

	return result_10660;

}

function HEX2F_27017(x_27019, y_27020) {
	var result_27021 = 0.0;

		result_27021 = (to_float_10657(x_27019) / to_float_10657(y_27020));

	return result_27021;

}

function acf_confidence_interval_168459(x_168461) {
	var result_168462 = 0.0;

		result_168462 = (1.9600000000000000e+00 * Math.sqrt(HEX2F_27017(1, len_164750(x_168461))));

	return result_168462;

}

function acf_information_168532(x_168534, max_lag_168535) {
	var result_168536 = {autocorrelation: null, confidence_interval: 0.0};

		result_168536.autocorrelation = nimCopy(null, vector_to_seq_165111(acf_168476(x_168534, max_lag_168535)), NTI165114);
		result_168536.confidence_interval = acf_confidence_interval_168459(x_168534);

	return result_168536;

}
var x_168553 = vector_164322([3, 2, 1, 9, 4, 2, 5, 3, 3, 6, 8, 9, 10]);
var y_168554 = acf_168476(x_168553, 10);
rawEcho(makeNimstrLit("AutocorrelationFunction"));
var fmt_res_168558 = [mnewString(0)];
if (fmt_res_168558[0] != null) { fmt_res_168558[0] = (fmt_res_168558[0]).concat(makeNimstrLit("  X: ")); } else { fmt_res_168558[0] = makeNimstrLit("  X: "); };
format_value_168559(fmt_res_168558, 0, x_168553, []);
rawEcho(fmt_res_168558[0]);
var fmt_res_168582 = [mnewString(0)];
if (fmt_res_168582[0] != null) { fmt_res_168582[0] = (fmt_res_168582[0]).concat(makeNimstrLit("  ACF: ")); } else { fmt_res_168582[0] = makeNimstrLit("  ACF: "); };
format_value_168559(fmt_res_168582, 0, y_168554, []);
rawEcho(fmt_res_168582[0]);
var fmt_res_168593 = [mnewString(0)];
if (fmt_res_168593[0] != null) { fmt_res_168593[0] = (fmt_res_168593[0]).concat(makeNimstrLit("  ACF-info: ")); } else { fmt_res_168593[0] = makeNimstrLit("  ACF-info: "); };
format_value_168594(fmt_res_168593, 0, acf_information_168532(x_168553, 10), []);
rawEcho(fmt_res_168593[0]);
rawEcho([]);

function student_t_ppf_95p_168390(df_168392) {
	var result_168393 = 0.0;

	BeforeRet: do {
		if ((37 < df_168392)) {
		result_168393 = 1.9600000000000000e+00;
		break BeforeRet;
		}
		else {
		if ((df_168392 <= 1)) {
		result_168393 = 1.2710000000000001e+01;
		break BeforeRet;
		}
		}
		result_168393 = table_ppf_168396[df_168392];
		break BeforeRet;
	} while (false);

	return result_168393;

}

function student_t_ppf_95p_168424(df_168426) {
	var result_168427 = 0.0;

		result_168427 = student_t_ppf_95p_168390(((df_168426)|0));

	return result_168427;

}

function HEX2D_167336(v_167338, w_167339) {
	var result_167340 = [{length: 0, data: null}];

		result_167340[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_167352 = 0;
			var colontmp__172619 = 0;
			var colontmp__172620 = 0;
			colontmp__172619 = low_164784(v_167338);
			colontmp__172620 = high_164767(v_167338);
			var res_172621 = colontmp__172619;
			L2: do {
					L3: while (true) {
					if (!(res_172621 <= colontmp__172620)) break L3;
						i_167352 = res_172621;
						HEX5BHEX5DHEX3D_165414(result_167340[0], i_167352, (HEX5BHEX5D_165150(v_167338, i_167352) - HEX5BHEX5D_165150(w_167339, i_167352)));
						res_172621 += 1;
					}
			} while(false);
		} while(false);

	return result_167340[0];

}

function HEX2B_167251(v_167253, k_167254) {
	var result_167255 = [{length: 0, data: null}];

		result_167255[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_167267 = 0;
			var colontmp__172627 = 0;
			var colontmp__172628 = 0;
			colontmp__172627 = low_164784(v_167253);
			colontmp__172628 = high_164767(v_167253);
			var res_172629 = colontmp__172627;
			L2: do {
					L3: while (true) {
					if (!(res_172629 <= colontmp__172628)) break L3;
						i_167267 = res_172629;
						HEX5BHEX5DHEX3D_165414(result_167255[0], i_167267, (HEX5BHEX5D_165150(v_167253, i_167267) + k_167254));
						res_172629 += 1;
					}
			} while(false);
		} while(false);

	return result_167255[0];

}

function HEX2B_167282(k_167284, v_167285) {
	var result_167286 = {length: 0, data: null};

		nimCopy(result_167286, HEX2B_167251(v_167285, k_167284), NTI164018);

	return result_167286;

}

function HEX2EHEX2A_167496(v_167498, k_167499) {
	var result_167500 = [{length: 0, data: null}];

		result_167500[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_167512 = 0;
			var colontmp__172635 = 0;
			var colontmp__172636 = 0;
			colontmp__172635 = low_164784(v_167498);
			colontmp__172636 = high_164767(v_167498);
			var res_172637 = colontmp__172635;
			L2: do {
					L3: while (true) {
					if (!(res_172637 <= colontmp__172636)) break L3;
						i_167512 = res_172637;
						HEX5BHEX5DHEX3D_165414(result_167500[0], i_167512, (HEX5BHEX5D_165150(v_167498, i_167512) * k_167499));
						res_172637 += 1;
					}
			} while(false);
		} while(false);

	return result_167500[0];

}

function HEX2EHEX2A_167527(k_167529, v_167530) {
	var result_167531 = {length: 0, data: null};

		nimCopy(result_167531, HEX2EHEX2A_167496(v_167530, k_167529), NTI164018);

	return result_167531;

}

function HEX2A_167599(k_167601, v_167602) {
	var result_167603 = {length: 0, data: null};

		nimCopy(result_167603, HEX2EHEX2A_167527(k_167601, v_167602), NTI164018);

	return result_167603;

}

function HEX5E_167854(v_167856, w_167857) {
	var result_167858 = 0.0;

		result_167858 = Math.pow(v_167856, w_167857);

	return result_167858;

}

function HEX2EHEX5E_167903(v_167905, k_167906) {
	var result_167907 = [{length: 0, data: null}];

		result_167907[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_167919 = 0;
			var colontmp__172643 = 0;
			var colontmp__172644 = 0;
			colontmp__172643 = low_164784(v_167905);
			colontmp__172644 = high_164767(v_167905);
			var res_172645 = colontmp__172643;
			L2: do {
					L3: while (true) {
					if (!(res_172645 <= colontmp__172644)) break L3;
						i_167919 = res_172645;
						HEX5BHEX5DHEX3D_165414(result_167907[0], i_167919, HEX5E_167854(HEX5BHEX5D_165150(v_167905, i_167919), k_167906));
						res_172645 += 1;
					}
			} while(false);
		} while(false);

	return result_167907[0];

}

function student_t_cdf_168371(t_168373, df_168374) {
	var result_168375 = 0.0;

	BeforeRet: do {
		var y_168376 = (((df_168374 + 1.0526315789473684e-01) / (df_168374 + 3.0985915492957744e-01)) * Math.sqrt(((df_168374 + 1.0526315789473684e-01) * Math.log((1.0000000000000000e+00 + ((t_168373 * t_168373) / (df_168374 + 2.6000000000000001e-01)))))));
		result_168375 = (1.0000000000000000e+00 / (1.0000000000000000e+00 + Math.exp(((-1.6000000000000001e+00 * y_168376) - (((7.0000000000000007e-02 * y_168376) * y_168376) * y_168376)))));
		break BeforeRet;
	} while (false);

	return result_168375;

}

function p_value_of_t_distr_172264(mean_172266, variance_172267, n_172268) {
	var result_172269 = 0.0;

		result_172269 = (2.0000000000000000e+00 - (2.0000000000000000e+00 * student_t_cdf_168371((mean_172266 / Math.sqrt(variance_172267)), (n_172268 - 2))));

	return result_172269;

}

function simple_linear_regression(x_172547, y_172548) {
	var result_172549 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0};

		var n_172550 = len_164750(x_172547);
		var sx_172551 = sum_168135(x_172547);
		var sxx_172552 = sum_168135(HEX2EHEX2A_167465(x_172547, x_172547));
		var sy_172553 = sum_168135(y_172548);
		var sxy_172554 = sum_168135(HEX2EHEX2A_167465(x_172547, y_172548));
		var syy_172555 = sum_168135(HEX2EHEX2A_167465(y_172548, y_172548));
		var t_value_172556 = student_t_ppf_95p_168424((n_172550 - 2.0000000000000000e+00));
		result_172549.n = ((n_172550)|0);
		result_172549.slope = (((n_172550 * sxy_172554) - (sx_172551 * sy_172553)) / (((n_172550 * sxx_172552) - HEX5E_168241(sx_172551, 2)) + 1.0000000000000000e-10));
		result_172549.intercept = ((sy_172553 / n_172550) - ((result_172549.slope * sx_172551) / n_172550));
		result_172549.R2 = ((HEX5E_168241(((n_172550 * sxy_172554) - (sx_172551 * sy_172553)), 2) / ((n_172550 * sxx_172552) - HEX5E_168241(sx_172551, 2))) / (((n_172550 * syy_172555) - HEX5E_168241(sy_172553, 2)) + 1.0000000000000000e-10));
		var residual_172577 = HEX2D_167336(y_172548, HEX2B_167282(result_172549.intercept, HEX2A_167599(result_172549.slope, x_172547)));
		result_172549.residual = nimCopy(null, vector_to_seq_165111(residual_172577), NTI165114);
		result_172549.residual_sum_squares = sum_168135(HEX2EHEX5E_167903(residual_172577, 2.0000000000000000e+00));
		result_172549.residual_variance = ((((n_172550 * syy_172555) - HEX5E_168241(sy_172553, 2)) - (HEX5E_168241(result_172549.slope, 2) * ((n_172550 * sxx_172552) - HEX5E_168241(sx_172551, 2)))) / (((n_172550 * n_172550) - (2.0000000000000000e+00 * n_172550)) + 1.0000000000000000e-10));
		nimCopy(result_172549.autocorrelation_function, acf_information_168532(residual_172577, 100), NTI168442);
		result_172549.slope_variance = ((n_172550 * result_172549.residual_variance) / (((n_172550 * sxx_172552) - HEX5E_168241(sx_172551, 2)) + 1.0000000000000000e-10));
		result_172549.intercept_variance = ((result_172549.slope_variance * sxx_172552) / n_172550);
		result_172549.slope_p_value = p_value_of_t_distr_172264(result_172549.slope, result_172549.slope_variance, ((n_172550)|0));
		result_172549.intercept_p_value = p_value_of_t_distr_172264(result_172549.intercept, result_172549.intercept_variance, ((n_172550)|0));
		result_172549.slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_172549.slope_variance)) * t_value_172556);
		result_172549.slope_confidence_interval[0] = (result_172549.slope - (5.0000000000000000e-01 * result_172549.slope_width_confidence_interval));
		result_172549.slope_confidence_interval[1] = (result_172549.slope + (5.0000000000000000e-01 * result_172549.slope_width_confidence_interval));
		result_172549.intercept_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_172549.intercept_variance)) * t_value_172556);
		result_172549.intercept_confidence_interval[0] = (result_172549.intercept - (5.0000000000000000e-01 * result_172549.intercept_width_confidence_interval));
		result_172549.intercept_confidence_interval[1] = (result_172549.intercept + (5.0000000000000000e-01 * result_172549.intercept_width_confidence_interval));

	return result_172549;

}

function simple_linear_regression_wo_intercept(x_172657, y_172658) {
	var result_172659 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0};

		var n_172660 = len_164750(x_172657);
		var sx_172661 = sum_168135(x_172657);
		var sxx_172662 = sum_168135(HEX2EHEX2A_167465(x_172657, x_172657));
		var sy_172663 = sum_168135(y_172658);
		var sxy_172664 = sum_168135(HEX2EHEX2A_167465(x_172657, y_172658));
		var sxxyy_172665 = sum_168135(HEX2EHEX2A_167465(HEX2EHEX2A_167465(x_172657, y_172658), HEX2EHEX2A_167465(x_172657, y_172658)));
		var syy_172666 = sum_168135(HEX2EHEX2A_167465(y_172658, y_172658));
		result_172659.n = ((n_172660)|0);
		result_172659.slope = ((((n_172660 * sxy_172664) - (sx_172661 * sy_172663)) + (sx_172661 * sy_172663)) / ((((n_172660 * sxx_172662) - HEX5E_168241(sx_172661, 2)) + (sx_172661 * sx_172661)) + 1.0000000000000000e-10));
		result_172659.intercept = 0.0;
		result_172659.R2 = ((HEX5E_168241(sxy_172664, 2) + 1.0000000000000000e-10) / ((sxx_172662 * syy_172666) + 1.0000000000000000e-10));
		var residual_172677 = HEX2D_167336(y_172658, HEX2B_167282(result_172659.intercept, HEX2A_167599(result_172659.slope, x_172657)));
		result_172659.residual = nimCopy(null, vector_to_seq_165111(residual_172677), NTI165114);
		result_172659.residual_sum_squares = sum_168135(HEX2EHEX5E_167903(residual_172677, 2.0000000000000000e+00));
		result_172659.residual_variance = (result_172659.residual_sum_squares / ((n_172660 - 1.0000000000000000e+00) + 1.0000000000000000e-10));
		nimCopy(result_172659.autocorrelation_function, acf_information_168532(residual_172677, 100), NTI168442);
		result_172659.slope_variance = (result_172659.residual_variance / (sxx_172662 + 1.0000000000000000e-10));
		result_172659.intercept_variance = 0.0;
		result_172659.slope_p_value = p_value_of_t_distr_172264(result_172659.slope, result_172659.slope_variance, ((n_172660)|0));
		result_172659.intercept_p_value = 0.0;
		result_172659.slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_172659.slope_variance)) * student_t_ppf_95p_168424((n_172660 - 1.0000000000000000e+00)));
		result_172659.slope_confidence_interval[0] = (result_172659.slope - (5.0000000000000000e-01 * result_172659.slope_width_confidence_interval));
		result_172659.slope_confidence_interval[1] = (result_172659.slope + (5.0000000000000000e-01 * result_172659.slope_width_confidence_interval));
		result_172659.intercept_width_confidence_interval = 0.0;
		result_172659.intercept_confidence_interval[0] = 0.0;
		result_172659.intercept_confidence_interval[1] = 0.0;

	return result_172659;

}

function arma(x_172780, y_172781) {
	var result_172782 = {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}};

		nimCopy(result_172782.mean_structure, simple_linear_regression(x_172780, y_172781), NTI172010);
		var residuals_172783 = HEX2D_167336(y_172781, HEX2B_167282(result_172782.mean_structure.intercept, HEX2A_167599(result_172782.mean_structure.slope, x_172780)));
		nimCopy(result_172782.autoregressive_structure, simple_linear_regression_wo_intercept(HEX5BHEX5D_165814(residuals_172783, HEX2EHEX2E_74220(0, (high_164767(residuals_172783) - 1))), HEX5BHEX5D_165814(residuals_172783, HEX2EHEX2E_74220(1, high_164767(residuals_172783)))), NTI172010);

	return result_172782;

}

function HEX2BHEX3D_58093(x_58097, x_58097_Idx, y_58098) {
		x_58097[x_58097_Idx] = (x_58097[x_58097_Idx] + y_58098);

	
}

function HEX2DHEX3D_172841(x_172845, x_172845_Idx, y_172846) {
		x_172845[x_172845_Idx] = (x_172845[x_172845_Idx] - y_172846);

	
}

function HEX2EHEX5E_167965(v_167967, k_167968) {
	var result_167969 = {length: 0, data: null};

		nimCopy(result_167969, HEX2EHEX5E_167903(v_167967, k_167968), NTI164018);

	return result_167969;

}

function normal_loglikelihood_172830(x_172832, y_172833, slope_172834, intercept_172835, sigma2_172836) {
	var result_172837 = [0.0];

		var n_172838 = len_164750(x_172832);
		result_172837[0] = ((-5.0000000000000000e-01 * n_172838) * Math.log(((6.2831853071795862e+00 * sigma2_172836) + 1.0000000000000000e-10)));
		HEX2DHEX3D_172841(result_172837, 0, (sum_168135(HEX2EHEX5E_167965(HEX2D_167336(y_172833, HEX2B_167282(intercept_172835, HEX2A_167599(slope_172834, x_172832))), 2)) / ((2.0000000000000000e+00 * sigma2_172836) + 1.0000000000000000e-10)));

	return result_172837[0];

}

function analysis_at_point_t_172874(x_172876, y_172877, change_point_172878) {
	var result_172879 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}};

		var n_172880 = len_164750(x_172876);
		var x_before_172890 = HEX5BHEX5D_165814(x_172876, HEX2EHEX2E_74220(0, (change_point_172878 - 1)));
		var y_before_172900 = HEX5BHEX5D_165814(y_172877, HEX2EHEX2E_74220(0, (change_point_172878 - 1)));
		var x_after_172908 = HEX5BHEX5D_165814(x_172876, HEX2EHEX2E_74220(change_point_172878, high_164767(x_172876)));
		var y_after_172916 = HEX5BHEX5D_165814(y_172877, HEX2EHEX2E_74220(change_point_172878, high_164767(y_172877)));
		nimCopy(result_172879.before_change, arma(x_before_172890, y_before_172900), NTI172061);
		HEX2BHEX3D_58093(result_172879, "loglikelihood", normal_loglikelihood_172830(x_before_172890, y_before_172900, result_172879.before_change.mean_structure.slope, result_172879.before_change.mean_structure.intercept, result_172879.before_change.autoregressive_structure.residual_variance));
		nimCopy(result_172879.after_change, arma(x_after_172908, y_after_172916), NTI172061);
		HEX2BHEX3D_58093(result_172879, "loglikelihood", normal_loglikelihood_172830(x_after_172908, y_after_172916, result_172879.after_change.mean_structure.slope, result_172879.after_change.mean_structure.intercept, result_172879.after_change.autoregressive_structure.residual_variance));

	return result_172879;

}

function model_differences_172283(before_change_172285, after_change_172286) {
	var result_172287 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0};

		result_172287.intercept = (after_change_172286.mean_structure.intercept - before_change_172285.mean_structure.intercept);
		result_172287.slope = (after_change_172286.mean_structure.slope - before_change_172285.mean_structure.slope);
		result_172287.autoregressive_slope = (after_change_172286.autoregressive_structure.slope - before_change_172285.autoregressive_structure.slope);
		var intercept_dof_172288 = ((after_change_172286.mean_structure.n + before_change_172285.mean_structure.n) - 4);
		var slope_dof_172289 = ((after_change_172286.mean_structure.n + before_change_172285.mean_structure.n) - 4);
		var autoregressive_slope_dof_172290 = ((after_change_172286.autoregressive_structure.n + before_change_172285.autoregressive_structure.n) - 4);
		result_172287.intercept_variance = (after_change_172286.mean_structure.intercept_variance + before_change_172285.mean_structure.intercept_variance);
		result_172287.slope_variance = (after_change_172286.mean_structure.slope_variance + before_change_172285.mean_structure.slope_variance);
		result_172287.autoregressive_slope_variance = (after_change_172286.autoregressive_structure.slope_variance + before_change_172285.autoregressive_structure.slope_variance);
		result_172287.intercept_p_value = p_value_of_t_distr_172264(result_172287.intercept, result_172287.intercept_variance, (intercept_dof_172288 + 2));
		result_172287.slope_p_value = p_value_of_t_distr_172264(result_172287.slope, result_172287.slope_variance, (slope_dof_172289 + 2));
		result_172287.autoregressive_slope_p_value = p_value_of_t_distr_172264(result_172287.autoregressive_slope, result_172287.autoregressive_slope_variance, (autoregressive_slope_dof_172290 + 2));
		result_172287.intercept_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_172287.intercept_variance)) * student_t_ppf_95p_168390(intercept_dof_172288));
		result_172287.slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_172287.slope_variance)) * student_t_ppf_95p_168390(slope_dof_172289));
		result_172287.autoregressive_slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_172287.autoregressive_slope_variance)) * student_t_ppf_95p_168390(autoregressive_slope_dof_172290));
		nimCopy(result_172287.intercept_confidence_interval, [(result_172287.intercept - (5.0000000000000000e-01 * result_172287.intercept_width_confidence_interval)), (result_172287.intercept + (5.0000000000000000e-01 * result_172287.intercept_width_confidence_interval))], NTI172291);
		nimCopy(result_172287.slope_confidence_interval, [(result_172287.slope - (5.0000000000000000e-01 * result_172287.slope_width_confidence_interval)), (result_172287.slope + (5.0000000000000000e-01 * result_172287.slope_width_confidence_interval))], NTI172293);
		nimCopy(result_172287.autoregressive_slope_confidence_interval, [(result_172287.autoregressive_slope - (5.0000000000000000e-01 * result_172287.autoregressive_slope_width_confidence_interval)), (result_172287.autoregressive_slope + (5.0000000000000000e-01 * result_172287.autoregressive_slope_width_confidence_interval))], NTI172295);

	return result_172287;

}

function robust_interrupted_time_series_model_172959(x_172961, y_172962, change_point_172963, candidates_before_172964, candidates_after_172965) {
								var Tmp5;

	var result_172966 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}, parameter_differences: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0}};

		var ll_result_172967 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}};
		result_172966.likelihood.best_loglikelihood = -1.0000000000000000e+100;
		L1: do {
			var t_172973 = 0;
			var colontmp__173071 = 0;
			var colontmp__173072 = 0;
			colontmp__173071 = (change_point_172963 - candidates_before_172964);
			colontmp__173072 = (change_point_172963 + candidates_after_172965);
			var res_173073 = colontmp__173071;
			L2: do {
					L3: while (true) {
					if (!(res_173073 <= colontmp__173072)) break L3;
						t_172973 = res_173073;
						L4: do {
								if ((t_172973 < 3)) Tmp5 = true; else {									Tmp5 = (high_164767(x_172961) < t_172973);								}							if (Tmp5) {
							break L4;
							}
							
							nimCopy(ll_result_172967, analysis_at_point_t_172874(x_172961, y_172962, t_172973), NTI172065);
							if (result_172966.likelihood.change_points != null) { result_172966.likelihood.change_points.push(t_172973); } else { result_172966.likelihood.change_points = [t_172973]; };
							if (result_172966.likelihood.loglikelihood != null) { result_172966.likelihood.loglikelihood.push(ll_result_172967.loglikelihood); } else { result_172966.likelihood.loglikelihood = [ll_result_172967.loglikelihood]; };
							if ((result_172966.likelihood.best_loglikelihood < ll_result_172967.loglikelihood)) {
							result_172966.likelihood.best_loglikelihood = ll_result_172967.loglikelihood;
							result_172966.likelihood.best_likelihood = Math.exp(ll_result_172967.loglikelihood);
							result_172966.likelihood.best_index = t_172973;
							result_172966.likelihood.best_time = HEX5BHEX5D_165150(x_172961, t_172973);
							nimCopy(result_172966.before_change, ll_result_172967.before_change, NTI172061);
							nimCopy(result_172966.after_change, ll_result_172967.after_change, NTI172061);
							nimCopy(result_172966.parameter_differences, model_differences_172283(result_172966.before_change, result_172966.after_change), NTI172035);
							}
							
						} while(false);
						res_173073 += 1;
					}
			} while(false);
		} while(false);

	return result_172966;

}

function robust_interrupted_time_series(x_173034, y_173036, change_point_173037, candidates_before_173038, candidates_after_173039) {
	var result_173040 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}, parameter_differences: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0}};

		nimCopy(result_173040, robust_interrupted_time_series_model_172959(vector_164202(x_173034), vector_164202(y_173036), change_point_173037, candidates_before_173038, candidates_after_173039), NTI172080);

	return result_173040;

}

function vector_reduced_164688(v_164691, sampling_164692) {
	var result_164693 = {length: 0, data: null};

		result_164693.data = new Float32Array(LENGTH_VECTOR);
		result_164693.length = (v_164691 != null ? v_164691.length : 0);
		var i_164704 = 0;
		L1: do {
			var k_164720 = 0;
			var colontmp__173115 = 0;
			colontmp__173115 = (v_164691 != null ? (v_164691.length-1) : -1);
			var res_173116 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_173116 <= colontmp__173115)) break L3;
						k_164720 = res_173116;
						L4: do {
							if (!((Math.trunc(k_164720 % sampling_164692) == 0))) {
							break L4;
							}
							
							check_value_164234(result_164693, "data", result_164693.length, i_164704, v_164691, k_164720);
							i_164704 += 1;
						} while(false);
						res_173116 += 1;
					}
			} while(false);
		} while(false);
		result_164693.length = i_164704;
		nimCopy(result_164693, result_164693, NTI164018);

	return result_164693;

}

function robust_interrupted_time_series_approximated(sampling_173082, x_173084, y_173086, change_point_173087, candidates_before_173088, candidates_after_173089) {
	var result_173090 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}, parameter_differences: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0}};

		nimCopy(result_173090, robust_interrupted_time_series_model_172959(vector_reduced_164688(x_173084, sampling_173082), vector_reduced_164688(y_173086, sampling_173082), (((change_point_173087 / sampling_173082))|0), (((candidates_before_173088 / sampling_173082))|0), (((candidates_after_173089 / sampling_173082))|0)), NTI172080);

	return result_173090;

}
var state_174005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_185031 = [null];
var local_instance_185032 = [null];

function rotl_174230(x_174232, k_174233) {
	var result_174234 = 0;

		result_174234 = ((x_174232 << k_174233) | ((x_174232 >>> 0) >>> ((64 - k_174233) >>> 0)));

	return result_174234;

}

function next_174270(r_174273) {
	var result_174274 = 0;

		var s0_174275 = r_174273.a0;
		var s1_174276 = r_174273.a1;
		result_174274 = ((s0_174275 + s1_174276) >>> 0);
		s1_174276 = (s1_174276 ^ s0_174275);
		r_174273.a0 = ((rotl_174230(s0_174275, 55) ^ s1_174276) ^ (s1_174276 << 14));
		r_174273.a1 = rotl_174230(s1_174276, 36);

	return result_174274;

}

function rand_174643(r_174646, max_174647) {
	var result_174648 = 0;

	BeforeRet: do {
		if ((max_174647 == 0)) {
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var x_174649 = next_174270(r_174646);
					if ((x_174649 <= ((4294967295 - (4294967295 % max_174647)) >>> 0))) {
					result_174648 = (x_174649 % ((max_174647 + 1) ));
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);

	return result_174648;

}

function rand_174688(max_174690) {
	var result_174691 = 0;

		result_174691 = rand_174643(state_174005[0], max_174690);

	return result_174691;

}

function format_value_194056(result_194059, result_194059_Idx, value_194060, specifier_194061) {
		format_value_161688(result_194059, result_194059_Idx, HEX24_170202(value_194060), specifier_194061);

	
}

function format_value_172331(result_172334, result_172334_Idx, value_172335, specifier_172336) {
		var Tmp1;

	BeforeRet: do {
		if (((specifier_172336 != null ? specifier_172336.length : 0) == 0)) {
		if (result_172334[result_172334_Idx] != null) { result_172334[result_172334_Idx] = (result_172334[result_172334_Idx]).concat(cstrToNimstr((value_172335)+"")); } else { result_172334[result_172334_Idx] = cstrToNimstr((value_172335)+"").slice(); };
		break BeforeRet;
		}
		
		var spec_172337 = parse_standard_format_specifier_161324(specifier_172336, 0, false);
		var fmode_172338 = 0;
		switch (spec_172337.typ) {
		case 101:
		case 69:
			fmode_172338 = 2;
			break;
		case 102:
		case 70:
			fmode_172338 = 1;
			break;
		case 103:
		case 71:
			fmode_172338 = 0;
			break;
		case 0:
			break;
		default: 
			var eHEX60gensym172340_172403 = null;
			eHEX60gensym172340_172403 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym172340_172403.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_172337.typ]), NTI138);
			eHEX60gensym172340_172403.parent = null;
			raiseException(eHEX60gensym172340_172403, "ValueError");
			break;
		}
		var f_172410 = [nsuformatBiggestFloat(value_172335, fmode_172338, spec_172337.precision, 46)];
		var sign_172411 = false;
		if ((0.0 <= value_172335)) {
		if (!((spec_172337.sign == 45))) {
		sign_172411 = true;
		if ((value_172335 == 0.0)) {
		if (((1.0000000000000000e+00 / value_172335) == Infinity)) {
		insert_28601(f_172410, 0, nimCharToStr(spec_172337.sign), 0);
		}
		
		}
		else {
		insert_28601(f_172410, 0, nimCharToStr(spec_172337.sign), 0);
		}
		
		}
		
		}
		else {
			sign_172411 = true;
		}
		
		if (spec_172337.padWithZero) {
		var sign_str_172414 = [];
		if (sign_172411) {
		sign_str_172414 = nimCopy(null, nimCharToStr(f_172410[0][0]), NTI138);
		f_172410[0] = nimCopy(null, HEX5BHEX5D_101304(f_172410[0], HEX2EHEX2E_LENGTH_VECTOR39(1, 1)), NTI138);
		}
		
		var to_fill_172457 = ((spec_172337.minimumWidth - (f_172410[0] != null ? f_172410[0].length : 0)) - (sign_172411 ? 1:0));
		if ((0 < to_fill_172457)) {
		f_172410[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_172457) || []).concat(f_172410[0] || []), NTI138);
		}
		
		if (sign_172411) {
		f_172410[0] = nimCopy(null, (sign_str_172414 || []).concat(f_172410[0] || []), NTI138);
		}
		
		}
		
		if ((spec_172337.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_172337.align;
		}
		
		var align_172460 = Tmp1;
		var res_172461 = align_string_161223(f_172410[0], spec_172337.minimumWidth, align_172460, spec_172337.fill);
		if ((ConstSet12[spec_172337.typ] != undefined)) {
		if (result_172334[result_172334_Idx] != null) { result_172334[result_172334_Idx] = (result_172334[result_172334_Idx]).concat(nsuToUpperAsciiStr(res_172461)); } else { result_172334[result_172334_Idx] = nsuToUpperAsciiStr(res_172461).slice(); };
		}
		else {
		if (result_172334[result_172334_Idx] != null) { result_172334[result_172334_Idx] = (result_172334[result_172334_Idx]).concat(res_172461); } else { result_172334[result_172334_Idx] = res_172461.slice(); };
		}
		
	} while (false);

	
}

function HEX24_172325(params_172327) {
	var result_172328 = null;

		var fmt_res_172329 = [mnewString(0)];
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit("    slope: ")); } else { fmt_res_172329[0] = makeNimstrLit("    slope: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.slope, makeNimstrLit(".3f"));
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_172329[0] = makeNimstrLit(" (var: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.slope_variance, makeNimstrLit(".3f"));
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_172329[0] = makeNimstrLit(", CI width: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.slope_width_confidence_interval, makeNimstrLit(".3f"));
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit(")\x0A    intercept: ")); } else { fmt_res_172329[0] = makeNimstrLit(")\x0A    intercept: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.intercept, makeNimstrLit(".3f"));
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_172329[0] = makeNimstrLit(" (var: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.intercept_variance, makeNimstrLit(".3f"));
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_172329[0] = makeNimstrLit(", CI width: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.intercept_width_confidence_interval, makeNimstrLit(".3f"));
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit(")\x0A    R2: ")); } else { fmt_res_172329[0] = makeNimstrLit(")\x0A    R2: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.R2, makeNimstrLit(".3f"));
		if (fmt_res_172329[0] != null) { fmt_res_172329[0] = (fmt_res_172329[0]).concat(makeNimstrLit("\x0A    SSE: ")); } else { fmt_res_172329[0] = makeNimstrLit("\x0A    SSE: "); };
		format_value_172331(fmt_res_172329, 0, params_172327.residual_sum_squares, makeNimstrLit(".3f"));
		result_172328 = nimCopy(null, fmt_res_172329[0], NTI138);

	return result_172328;

}

function add_quoted_197801(s_197804, s_197804_Idx, x_197805) {
		if (s_197804[s_197804_Idx] != null) { s_197804[s_197804_Idx] = (s_197804[s_197804_Idx]).concat(HEX24_172325(x_197805)); } else { s_197804[s_197804_Idx] = HEX24_172325(x_197805).slice(); };

	
}

function HEX24_197001(x_197004) {
	var result_197005 = [null];

		result_197005[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_197006 = true;
		if (!(first_element_197006)) {
		if (result_197005[0] != null) { result_197005[0] = (result_197005[0]).concat(makeNimstrLit(", ")); } else { result_197005[0] = makeNimstrLit(", "); };
		}
		
		if (result_197005[0] != null) { result_197005[0] = (result_197005[0]).concat(makeNimstrLit("mean_structure")); } else { result_197005[0] = makeNimstrLit("mean_structure"); };
		if (result_197005[0] != null) { result_197005[0] = (result_197005[0]).concat(makeNimstrLit(": ")); } else { result_197005[0] = makeNimstrLit(": "); };
		add_quoted_197801(result_197005, 0, x_197004.mean_structure);
		first_element_197006 = false;
		if (!(first_element_197006)) {
		if (result_197005[0] != null) { result_197005[0] = (result_197005[0]).concat(makeNimstrLit(", ")); } else { result_197005[0] = makeNimstrLit(", "); };
		}
		
		if (result_197005[0] != null) { result_197005[0] = (result_197005[0]).concat(makeNimstrLit("autoregressive_structure")); } else { result_197005[0] = makeNimstrLit("autoregressive_structure"); };
		if (result_197005[0] != null) { result_197005[0] = (result_197005[0]).concat(makeNimstrLit(": ")); } else { result_197005[0] = makeNimstrLit(": "); };
		add_quoted_197801(result_197005, 0, x_197004.autoregressive_structure);
		first_element_197006 = false;
		if (result_197005[0] != null) { result_197005[0] = (result_197005[0]).concat(makeNimstrLit(")")); } else { result_197005[0] = makeNimstrLit(")"); };

	return result_197005[0];

}

function add_quoted_196801(s_196804, s_196804_Idx, x_196805) {
		if (s_196804[s_196804_Idx] != null) { s_196804[s_196804_Idx] = (s_196804[s_196804_Idx]).concat(HEX24_197001(x_196805)); } else { s_196804[s_196804_Idx] = HEX24_197001(x_196805).slice(); };

	
}

function add_quoted_206801(s_206804, s_206804_Idx, x_206805) {
		if (s_206804[s_206804_Idx] != null) { s_206804[s_206804_Idx] = (s_206804[s_206804_Idx]).concat(cstrToNimstr((x_206805)+"")); } else { s_206804[s_206804_Idx] = cstrToNimstr((x_206805)+"").slice(); };

	
}

function collection_to_string_206608(x_206611, prefix_206612, separator_206613, suffix_206614) {
	var result_206615 = [null];

		result_206615[0] = nimCopy(null, prefix_206612, NTI138);
		var first_element_206616 = true;
		L1: do {
			var value_206623 = 0;
			var i_232041 = 0;
			var l_232042 = (x_206611 != null ? x_206611.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_232041 < l_232042)) break L3;
						value_206623 = x_206611[i_232041];
						if (first_element_206616) {
						first_element_206616 = false;
						}
						else {
						if (result_206615[0] != null) { result_206615[0] = (result_206615[0]).concat(separator_206613); } else { result_206615[0] = separator_206613.slice(); };
						}
						
						add_quoted_206801(result_206615, 0, value_206623);
						i_232041 += 1;
					}
			} while(false);
		} while(false);
		if (result_206615[0] != null) { result_206615[0] = (result_206615[0]).concat(suffix_206614); } else { result_206615[0] = suffix_206614.slice(); };

	return result_206615[0];

}

function HEX24_206602(x_206606) {
	var result_206607 = null;

		result_206607 = nimCopy(null, collection_to_string_206608(x_206606, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_206607;

}

function add_quoted_206401(s_206404, s_206404_Idx, x_206405) {
		if (s_206404[s_206404_Idx] != null) { s_206404[s_206404_Idx] = (s_206404[s_206404_Idx]).concat(HEX24_206602(x_206405)); } else { s_206404[s_206404_Idx] = HEX24_206602(x_206405).slice(); };

	
}

function HEX24_205201(x_205204) {
	var result_205205 = [null];

		result_205205[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_205206 = true;
		if (!(first_element_205206)) {
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(", ")); } else { result_205205[0] = makeNimstrLit(", "); };
		}
		
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit("change_points")); } else { result_205205[0] = makeNimstrLit("change_points"); };
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(": ")); } else { result_205205[0] = makeNimstrLit(": "); };
		add_quoted_206401(result_205205, 0, x_205204.change_points);
		first_element_205206 = false;
		if (!(first_element_205206)) {
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(", ")); } else { result_205205[0] = makeNimstrLit(", "); };
		}
		
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit("loglikelihood")); } else { result_205205[0] = makeNimstrLit("loglikelihood"); };
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(": ")); } else { result_205205[0] = makeNimstrLit(": "); };
		add_quoted_170001(result_205205, 0, x_205204.loglikelihood);
		first_element_205206 = false;
		if (!(first_element_205206)) {
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(", ")); } else { result_205205[0] = makeNimstrLit(", "); };
		}
		
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit("best_loglikelihood")); } else { result_205205[0] = makeNimstrLit("best_loglikelihood"); };
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(": ")); } else { result_205205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_205205, 0, x_205204.best_loglikelihood);
		first_element_205206 = false;
		if (!(first_element_205206)) {
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(", ")); } else { result_205205[0] = makeNimstrLit(", "); };
		}
		
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit("best_likelihood")); } else { result_205205[0] = makeNimstrLit("best_likelihood"); };
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(": ")); } else { result_205205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_205205, 0, x_205204.best_likelihood);
		first_element_205206 = false;
		if (!(first_element_205206)) {
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(", ")); } else { result_205205[0] = makeNimstrLit(", "); };
		}
		
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit("best_time")); } else { result_205205[0] = makeNimstrLit("best_time"); };
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(": ")); } else { result_205205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_205205, 0, x_205204.best_time);
		first_element_205206 = false;
		if (!(first_element_205206)) {
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(", ")); } else { result_205205[0] = makeNimstrLit(", "); };
		}
		
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit("best_index")); } else { result_205205[0] = makeNimstrLit("best_index"); };
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(": ")); } else { result_205205[0] = makeNimstrLit(": "); };
		add_quoted_206801(result_205205, 0, x_205204.best_index);
		first_element_205206 = false;
		if (result_205205[0] != null) { result_205205[0] = (result_205205[0]).concat(makeNimstrLit(")")); } else { result_205205[0] = makeNimstrLit(")"); };

	return result_205205[0];

}

function add_quoted_205001(s_205004, s_205004_Idx, x_205005) {
		if (s_205004[s_205004_Idx] != null) { s_205004[s_205004_Idx] = (s_205004[s_205004_Idx]).concat(HEX24_205201(x_205005)); } else { s_205004[s_205004_Idx] = HEX24_205201(x_205005).slice(); };

	
}

function collection_to_string_223616(x_223619, prefix_223620, separator_223621, suffix_223622) {
	var result_223623 = [null];

		result_223623[0] = nimCopy(null, prefix_223620, NTI138);
		var first_element_223624 = true;
		L1: do {
			var value_223670 = 0.0;
			var i_232049 = 0;
			if ((i_232049 <= 1)) {
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						value_223670 = x_223619[i_232049];
						if (first_element_223624) {
						first_element_223624 = false;
						}
						else {
						if (result_223623[0] != null) { result_223623[0] = (result_223623[0]).concat(separator_223621); } else { result_223623[0] = separator_223621.slice(); };
						}
						
						add_quoted_170601(result_223623, 0, value_223670);
						if ((1 <= i_232049)) {
						break L2;
						}
						
						i_232049 += 1;
					}
			} while(false);
			}
			
		} while(false);
		if (result_223623[0] != null) { result_223623[0] = (result_223623[0]).concat(suffix_223622); } else { result_223623[0] = suffix_223622.slice(); };

	return result_223623[0];

}

function HEX24_223609(x_223614) {
	var result_223615 = null;

		result_223615 = nimCopy(null, collection_to_string_223616(x_223614, makeNimstrLit("["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_223615;

}

function add_quoted_223401(s_223404, s_223404_Idx, x_223405) {
		if (s_223404[s_223404_Idx] != null) { s_223404[s_223404_Idx] = (s_223404[s_223404_Idx]).concat(HEX24_223609(x_223405)); } else { s_223404[s_223404_Idx] = HEX24_223609(x_223405).slice(); };

	
}

function HEX24_221201(x_221204) {
	var result_221205 = [null];

		result_221205[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_221206 = true;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("intercept")); } else { result_221205[0] = makeNimstrLit("intercept"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.intercept);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("intercept_variance")); } else { result_221205[0] = makeNimstrLit("intercept_variance"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.intercept_variance);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("intercept_confidence_interval")); } else { result_221205[0] = makeNimstrLit("intercept_confidence_interval"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_223401(result_221205, 0, x_221204.intercept_confidence_interval);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("intercept_width_confidence_interval")); } else { result_221205[0] = makeNimstrLit("intercept_width_confidence_interval"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.intercept_width_confidence_interval);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("intercept_p_value")); } else { result_221205[0] = makeNimstrLit("intercept_p_value"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.intercept_p_value);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("slope")); } else { result_221205[0] = makeNimstrLit("slope"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.slope);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("slope_variance")); } else { result_221205[0] = makeNimstrLit("slope_variance"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.slope_variance);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("slope_confidence_interval")); } else { result_221205[0] = makeNimstrLit("slope_confidence_interval"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_223401(result_221205, 0, x_221204.slope_confidence_interval);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("slope_width_confidence_interval")); } else { result_221205[0] = makeNimstrLit("slope_width_confidence_interval"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.slope_width_confidence_interval);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("slope_p_value")); } else { result_221205[0] = makeNimstrLit("slope_p_value"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.slope_p_value);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("autoregressive_slope")); } else { result_221205[0] = makeNimstrLit("autoregressive_slope"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.autoregressive_slope);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("autoregressive_slope_variance")); } else { result_221205[0] = makeNimstrLit("autoregressive_slope_variance"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.autoregressive_slope_variance);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("autoregressive_slope_confidence_interval")); } else { result_221205[0] = makeNimstrLit("autoregressive_slope_confidence_interval"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_223401(result_221205, 0, x_221204.autoregressive_slope_confidence_interval);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("autoregressive_slope_width_confidence_interval")); } else { result_221205[0] = makeNimstrLit("autoregressive_slope_width_confidence_interval"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.autoregressive_slope_width_confidence_interval);
		first_element_221206 = false;
		if (!(first_element_221206)) {
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(", ")); } else { result_221205[0] = makeNimstrLit(", "); };
		}
		
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit("autoregressive_slope_p_value")); } else { result_221205[0] = makeNimstrLit("autoregressive_slope_p_value"); };
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(": ")); } else { result_221205[0] = makeNimstrLit(": "); };
		add_quoted_170601(result_221205, 0, x_221204.autoregressive_slope_p_value);
		first_element_221206 = false;
		if (result_221205[0] != null) { result_221205[0] = (result_221205[0]).concat(makeNimstrLit(")")); } else { result_221205[0] = makeNimstrLit(")"); };

	return result_221205[0];

}

function add_quoted_221001(s_221004, s_221004_Idx, x_221005) {
		if (s_221004[s_221004_Idx] != null) { s_221004[s_221004_Idx] = (s_221004[s_221004_Idx]).concat(HEX24_221201(x_221005)); } else { s_221004[s_221004_Idx] = HEX24_221201(x_221005).slice(); };

	
}

function HEX24_194099(x_194102) {
	var result_194103 = [null];

		result_194103[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_194104 = true;
		if (!(first_element_194104)) {
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(", ")); } else { result_194103[0] = makeNimstrLit(", "); };
		}
		
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit("before_change")); } else { result_194103[0] = makeNimstrLit("before_change"); };
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(": ")); } else { result_194103[0] = makeNimstrLit(": "); };
		add_quoted_196801(result_194103, 0, x_194102.before_change);
		first_element_194104 = false;
		if (!(first_element_194104)) {
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(", ")); } else { result_194103[0] = makeNimstrLit(", "); };
		}
		
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit("after_change")); } else { result_194103[0] = makeNimstrLit("after_change"); };
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(": ")); } else { result_194103[0] = makeNimstrLit(": "); };
		add_quoted_196801(result_194103, 0, x_194102.after_change);
		first_element_194104 = false;
		if (!(first_element_194104)) {
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(", ")); } else { result_194103[0] = makeNimstrLit(", "); };
		}
		
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit("likelihood")); } else { result_194103[0] = makeNimstrLit("likelihood"); };
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(": ")); } else { result_194103[0] = makeNimstrLit(": "); };
		add_quoted_205001(result_194103, 0, x_194102.likelihood);
		first_element_194104 = false;
		if (!(first_element_194104)) {
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(", ")); } else { result_194103[0] = makeNimstrLit(", "); };
		}
		
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit("parameter_differences")); } else { result_194103[0] = makeNimstrLit("parameter_differences"); };
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(": ")); } else { result_194103[0] = makeNimstrLit(": "); };
		add_quoted_221001(result_194103, 0, x_194102.parameter_differences);
		first_element_194104 = false;
		if (result_194103[0] != null) { result_194103[0] = (result_194103[0]).concat(makeNimstrLit(")")); } else { result_194103[0] = makeNimstrLit(")"); };

	return result_194103[0];

}

function test_model_change_point_193040(change_point_193042, candidates_193043, verbose_193044) {
		rawEcho(makeNimstrLit("Robust Interrupted Time Series Model v3.0\x0A"));
		rawEcho(makeNimstrLit("Boot sample test"));
		L1: do {
			var HEX3Atmp_193404 = [1.0000000000000000e+00, 2.0000000000000000e+00, 3.0000000000000000e+00, 4.0000000000000000e+00, 5.0000000000000000e+00, 6.0000000000000000e+00, 7.0000000000000000e+00, 8.0000000000000000e+00, 9.0000000000000000e+00, 1.0000000000000000e+01, 1.1000000000000000e+01, 1.2000000000000000e+01, 1.3000000000000000e+01, 1.4000000000000000e+01, 1.5000000000000000e+01, 1.6000000000000000e+01, 1.7000000000000000e+01, 1.8000000000000000e+01, 1.9000000000000000e+01, 2.0000000000000000e+01];
			var iHEX60gensym193064_193409 = 0;
			var resultHEX60gensym193065_193421 = new_seq_164619((HEX3Atmp_193404 != null ? HEX3Atmp_193404.length : 0));
			L2: do {
				var it_193428 = 0.0;
				var i_232017 = 0;
				var l_232018 = (HEX3Atmp_193404 != null ? HEX3Atmp_193404.length : 0);
				L3: do {
						L4: while (true) {
						if (!(i_232017 < l_232018)) break L4;
							it_193428 = HEX3Atmp_193404[i_232017];
							resultHEX60gensym193065_193421[iHEX60gensym193064_193409] = it_193428;
							iHEX60gensym193064_193409 += 1;
							i_232017 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var x_193437 = nimCopy(null, resultHEX60gensym193065_193421, NTI164623);
		L5: do {
			var HEX3Atmp_194004 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200];
			var iHEX60gensym193462_194009 = 0;
			var resultHEX60gensym193463_194021 = new_seq_164619((HEX3Atmp_194004 != null ? HEX3Atmp_194004.length : 0));
			L6: do {
				var it_194028 = 0;
				var i_232024 = 0;
				var l_232025 = (HEX3Atmp_194004 != null ? HEX3Atmp_194004.length : 0);
				L7: do {
						L8: while (true) {
						if (!(i_232024 < l_232025)) break L8;
							it_194028 = HEX3Atmp_194004[i_232024];
							resultHEX60gensym193463_194021[iHEX60gensym193462_194009] = it_194028;
							iHEX60gensym193462_194009 += 1;
							i_232024 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var y_194037 = nimCopy(null, resultHEX60gensym193463_194021, NTI164623);
		L9: do {
			var t_194052 = 0;
			var colontmp__232030 = 0;
			colontmp__232030 = (x_193437 != null ? (x_193437.length-1) : -1);
			var res_232031 = 0;
			L10: do {
					L11: while (true) {
					if (!(res_232031 <= colontmp__232030)) break L11;
						t_194052 = res_232031;
						y_194037[t_194052] = (y_194037[t_194052] + ((0.0 * rand_174688(1000)) / 1.0000000000000000e+03));
						res_232031 += 1;
					}
			} while(false);
		} while(false);
		if (verbose_193044) {
		var fmt_res_194055 = [mnewString(0)];
		if (fmt_res_194055[0] != null) { fmt_res_194055[0] = (fmt_res_194055[0]).concat(makeNimstrLit("X: ")); } else { fmt_res_194055[0] = makeNimstrLit("X: "); };
		format_value_194056(fmt_res_194055, 0, x_193437, []);
		rawEcho(fmt_res_194055[0]);
		var fmt_res_194085 = [mnewString(0)];
		if (fmt_res_194085[0] != null) { fmt_res_194085[0] = (fmt_res_194085[0]).concat(makeNimstrLit("Y: ")); } else { fmt_res_194085[0] = makeNimstrLit("Y: "); };
		format_value_194056(fmt_res_194085, 0, y_194037, []);
		rawEcho(fmt_res_194085[0]);
		}
		
		var candidates_after_194096 = candidates_193043;
		var candidates_before_194097 = candidates_193043;
		var model_194098 = robust_interrupted_time_series(x_193437, y_194037, change_point_193042, candidates_before_194097, candidates_after_194096);
		if (verbose_193044) {
		rawEcho(HEX24_194099(model_194098));
		}
		

	
}
test_model_change_point_193040(7, 5, true);
exports.robust_interrupted_time_series = (X, Y, change_point, candidates_before, candidates_after) => {LENGTH_VECTOR = X.length; return robust_interrupted_time_series(X, Y, change_point, candidates_before, candidates_after)}; 
exports.robust_interrupted_time_series_approximated = (sampling, X, Y, change_point, candidates_before, candidates_after) => {LENGTH_VECTOR = X.length; return robust_interrupted_time_series_approximated(sampling, X, Y, change_point, candidates_before, candidates_after)}; 
exports.fix_vector = (X) => {LENGTH_VECTOR = X.length; return fix_vector(X)}
