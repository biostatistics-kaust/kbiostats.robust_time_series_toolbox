var LENGTH_VECTOR = 1012;
/* Generated by the Nim Compiler v1.2.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI9875009 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10101873 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10101871 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10101870 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10101880 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10101856 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10101848 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10101840 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10101835 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10102092 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10102090 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10102088 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10101865 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10101861 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10101828 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10101823 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10101815 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI10101810 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10065077 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10065076 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI9910017 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4275232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4530011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI2080230 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6018 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI6004 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI106 = {size: 0,kind: 37,base: null,node: null,finalizer: null};
var NTI9861022 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI9861023 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI9861018 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI9861022.base = NTI106;
NTI9861023.base = NTI9861022;
var NNI9861018 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI9861023, name: "data", sons: null}]};
NTI9861018.node = NNI9861018;
NTI6004.base = NTI6018;
var NNI2080230 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI143, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI2080230.node = NNI2080230;
var NNI4530011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4275232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4530011.node = NNI4530011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
NTI9910017.base = NTI104;
NTI10065077.base = NTI104;
var NNI10065076 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "autocorrelation", len: 0, typ: NTI10065077, name: "autocorrelation", sons: null}, 
{kind: 1, offset: "confidence_interval", len: 0, typ: NTI104, name: "confidence_interval", sons: null}]};
NTI10065076.node = NNI10065076;
NTI10101815.base = NTI104;
NTI10101823.base = NTI104;
NTI10101828.base = NTI104;
var NNI10101810 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI104, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI104, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI10101815, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI104, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_p_value", len: 0, typ: NTI104, name: "intercept_p_value", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI104, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI104, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI10101823, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI104, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_p_value", len: 0, typ: NTI104, name: "slope_p_value", sons: null}, 
{kind: 1, offset: "R2", len: 0, typ: NTI104, name: "R2", sons: null}, 
{kind: 1, offset: "residual", len: 0, typ: NTI10101828, name: "residual", sons: null}, 
{kind: 1, offset: "residual_sum_squares", len: 0, typ: NTI104, name: "residual_sum_squares", sons: null}, 
{kind: 1, offset: "residual_variance", len: 0, typ: NTI104, name: "residual_variance", sons: null}, 
{kind: 1, offset: "autocorrelation_function", len: 0, typ: NTI10065076, name: "autocorrelation_function", sons: null}, 
{kind: 1, offset: "n", len: 0, typ: NTI143, name: "n", sons: null}]};
NTI10101810.node = NNI10101810;
var NNI10101861 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mean_structure", len: 0, typ: NTI10101810, name: "mean_structure", sons: null}, 
{kind: 1, offset: "autoregressive_structure", len: 0, typ: NTI10101810, name: "autoregressive_structure", sons: null}]};
NTI10101861.node = NNI10101861;
var NNI10101865 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "loglikelihood", len: 0, typ: NTI104, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "before_change", len: 0, typ: NTI10101861, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI10101861, name: "after_change", sons: null}]};
NTI10101865.node = NNI10101865;
NTI10102088.base = NTI104;
NTI10102090.base = NTI104;
NTI10102092.base = NTI104;
NTI10101840.base = NTI104;
NTI10101848.base = NTI104;
NTI10101856.base = NTI104;
var NNI10101835 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI104, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI104, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI10101840, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI104, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_p_value", len: 0, typ: NTI104, name: "intercept_p_value", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI104, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI104, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI10101848, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI104, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_p_value", len: 0, typ: NTI104, name: "slope_p_value", sons: null}, 
{kind: 1, offset: "autoregressive_slope", len: 0, typ: NTI104, name: "autoregressive_slope", sons: null}, 
{kind: 1, offset: "autoregressive_slope_variance", len: 0, typ: NTI104, name: "autoregressive_slope_variance", sons: null}, 
{kind: 1, offset: "autoregressive_slope_confidence_interval", len: 0, typ: NTI10101856, name: "autoregressive_slope_confidence_interval", sons: null}, 
{kind: 1, offset: "autoregressive_slope_width_confidence_interval", len: 0, typ: NTI104, name: "autoregressive_slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "autoregressive_slope_p_value", len: 0, typ: NTI104, name: "autoregressive_slope_p_value", sons: null}]};
NTI10101835.node = NNI10101835;
NTI10101871.base = NTI143;
NTI10101873.base = NTI104;
var NNI10101870 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "change_points", len: 0, typ: NTI10101871, name: "change_points", sons: null}, 
{kind: 1, offset: "loglikelihood", len: 0, typ: NTI10101873, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "best_loglikelihood", len: 0, typ: NTI104, name: "best_loglikelihood", sons: null}, 
{kind: 1, offset: "best_likelihood", len: 0, typ: NTI104, name: "best_likelihood", sons: null}, 
{kind: 1, offset: "best_time", len: 0, typ: NTI104, name: "best_time", sons: null}, 
{kind: 1, offset: "best_index", len: 0, typ: NTI143, name: "best_index", sons: null}]};
NTI10101870.node = NNI10101870;
var NNI10101880 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "before_change", len: 0, typ: NTI10101861, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI10101861, name: "after_change", sons: null}, 
{kind: 1, offset: "likelihood", len: 0, typ: NTI10101870, name: "likelihood", sons: null}, 
{kind: 1, offset: "parameter_differences", len: 0, typ: NTI10101835, name: "parameter_differences", sons: null}]};
NTI10101880.node = NNI10101880;
NTI9875009.base = NTI104;
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function nimMin(a_230803, b_230804) {
    var Tmp1;

  var result_230805 = 0;

  BeforeRet: do {
    if ((a_230803 <= b_230804)) {
    Tmp1 = a_230803;
    }
    else {
    Tmp1 = b_230804;
    }
    
    result_230805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230805;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    throw e_190218;

  
}
var ConstSet9 = setConstr(46, 44);
function nimCharToStr(x_156052) {
  var result_156053 = null;

    result_156053 = nimCopy(null, mnewString(1), NTI112);
    result_156053[0] = x_156052;

  return result_156053;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
    var table_ppf_10061211 = [1.0000000000000001e+050, 1.2710000000000001e+001, 4.3029999999999999e+000, 3.1819999999999999e+000, 2.7759999999999998e+000, 2.5710000000000002e+000, 2.4470000000000001e+000, 2.3650000000000002e+000, 2.3060000000000000e+000, 2.2620000000000000e+000, 2.2280000000000002e+000, 2.2010000000000001e+000, 2.1789999999999998e+000, 2.1600000000000001e+000, 2.1450000000000000e+000, 2.1309999999999998e+000, 2.1200000000000001e+000, 2.1099999999999999e+000, 2.1010000000000000e+000, 2.0930000000000000e+000, 2.0859999999999999e+000, 2.0800000000000001e+000, 2.0739999999999998e+000, 2.0690000000000000e+000, 2.0640000000000001e+000, 2.0600000000000001e+000, 2.0560000000000000e+000, 2.0520000000000000e+000, 2.0480000000000000e+000, 2.0449999999999999e+000, 2.0419999999999998e+000, 2.0209999999999999e+000, 2.0089999999999999e+000, 2.0000000000000000e+000, 1.9900000000000000e+000, 1.9840000000000000e+000, 1.9800000000000000e+000, 1.9600000000000000e+000];
var ConstSet12 = setConstr([65, 90]);
process.exitCode = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
function new_seq_225128(len_225131) {
  var result_225133 = null;

    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}
  return result_225133;

}
function abs_75247(x_75249) {
    var Tmp1;

  var result_75250 = 0.0;

    if ((x_75249 < 0.0)) {
    Tmp1 = -(x_75249);
    }
    else {
    Tmp1 = x_75249;
    }
    
    result_75250 = Tmp1;

  return result_75250;

}
function classify_880431(x_880433) {
  var result_880434 = 0;

  BeforeRet: do {
    if ((x_880433 == 0.0)) {
    if (((1.0000000000000000e+000 / x_880433) == Infinity)) {
    result_880434 = 2;
    break BeforeRet;
    }
    else {
      result_880434 = 3;
      break BeforeRet;
    }
    
    }
    
    if (((x_880433 * 5.0000000000000000e-001) == x_880433)) {
    if ((0.0 < x_880433)) {
    result_880434 = 5;
    break BeforeRet;
    }
    else {
      result_880434 = 6;
      break BeforeRet;
    }
    
    }
    
    if (!((x_880433 == x_880433))) {
    result_880434 = 4;
    break BeforeRet;
    }
    
    if ((abs_75247(x_880433) < 2.2250738585072009e-308)) {
    result_880434 = 1;
    break BeforeRet;
    }
    
    result_880434 = 0;
    break BeforeRet;
  } while (false);

  return result_880434;

}
function check_value_9861127(data_9861131, data_9861131_Idx, length_9861132, idx_9861133, w_9861134, w_idx_9861135) {
      var Tmp1;

    var v_9861136 = w_9861134[w_idx_9861135];
      if ((((classify_880431(v_9861136) == 4) || (classify_880431(v_9861136) == 5)) || (classify_880431(v_9861136) == 6))) Tmp1 = true; else {        Tmp1 = !((((v_9861136 * 1.0000000000000000e+001) / 1.0000000000000000e+001) == v_9861136));      }    if (Tmp1) {
    if ((idx_9861133 == 0)) {
    data_9861131[data_9861131_Idx][idx_9861133] = w_9861134[(w_idx_9861135 + 1)];
    }
    else {
    if ((idx_9861133 == (length_9861132 - 1))) {
    data_9861131[data_9861131_Idx][idx_9861133] = w_9861134[(w_idx_9861135 - 1)];
    }
    else {
      data_9861131[data_9861131_Idx][idx_9861133] = (5.0000000000000000e-001 * (w_9861134[(w_idx_9861135 - 1)] + w_9861134[(w_idx_9861135 + 1)]));
    }
    }
    }
    else {
      data_9861131[data_9861131_Idx][idx_9861133] = v_9861136;
    }
    

  
}
function fix_vector(v_9861090) {
  var result_9861092 = [null];

    var length_9861098 = (v_9861090 != null ? v_9861090.length : 0);
    rawEcho(cstrToNimstr((length_9861098)+""));
    result_9861092[0] = new Array(length_9861098); for (var i=0;i<length_9861098;++i) {result_9861092[0][i]=0.0;}    var i_9861108 = 0;
    L1: do {
      var k_9861126 = 0;
      var colontmp__9861224 = 0;
      colontmp__9861224 = (v_9861090 != null ? (v_9861090.length-1) : -1);
      var res_9861225 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_9861225 <= colontmp__9861224)) break L3;
            k_9861126 = res_9861225;
            check_value_9861127(result_9861092, 0, length_9861098, i_9861108, v_9861090, k_9861126);
            i_9861108 += 1;
            res_9861225 += 1;
          }
      } while(false);
    } while(false);

  return result_9861092[0];

}
function check_value_9861264(data_9861268, data_9861268_Idx, length_9861269, idx_9861270, w_9861271, w_idx_9861272) {
      var Tmp1;

    var v_9861273 = w_9861271[w_idx_9861272];
      if ((((classify_880431(v_9861273) == 4) || (classify_880431(v_9861273) == 5)) || (classify_880431(v_9861273) == 6))) Tmp1 = true; else {        Tmp1 = !((((v_9861273 * 1.0000000000000000e+001) / 1.0000000000000000e+001) == v_9861273));      }    if (Tmp1) {
    if ((idx_9861270 == 0)) {
    data_9861268[data_9861268_Idx][idx_9861270] = w_9861271[(w_idx_9861272 + 1)];
    }
    else {
    if ((idx_9861270 == (length_9861269 - 1))) {
    data_9861268[data_9861268_Idx][idx_9861270] = w_9861271[(w_idx_9861272 - 1)];
    }
    else {
      data_9861268[data_9861268_Idx][idx_9861270] = (5.0000000000000000e-001 * (w_9861271[(w_idx_9861272 - 1)] + w_9861271[(w_idx_9861272 + 1)]));
    }
    }
    }
    else {
      data_9861268[data_9861268_Idx][idx_9861270] = v_9861273;
    }
    

  
}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function vector_9861232(v_9861235) {
  var result_9861236 = ({length: 0, data: null});

    result_9861236.data = new Float32Array(LENGTH_VECTOR);
    result_9861236.length = (v_9861235 != null ? v_9861235.length : 0);
    var i_9861247 = 0;
    L1: do {
      var k_9861263 = 0;
      var colontmp__10101920 = 0;
      colontmp__10101920 = (v_9861235 != null ? (v_9861235.length-1) : -1);
      var res_10101921 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10101921 <= colontmp__10101920)) break L3;
            k_9861263 = res_10101921;
            check_value_9861264(result_9861236, "data", result_9861236.length, i_9861247, v_9861235, k_9861263);
            i_9861247 += 1;
            res_10101921 += 1;
          }
      } while(false);
    } while(false);
    result_9861236.length = i_9861247;
    nimCopy(result_9861236, result_9861236, NTI9861018);

  return result_9861236;

}
function new_seq_9875005(len_9875008) {
  var result_9875010 = null;

    result_9875010 = new Array(len_9875008); for (var i=0;i<len_9875008;++i) {result_9875010[i]=0.0;}
  return result_9875010;

}
function vector_9861382(v_9861385) {
  var result_9861386 = ({length: 0, data: null});

    L1: do {
      var iHEX60gensym9861389_9870003 = 0;
      var resultHEX60gensym9861390_9875046 = new_seq_9875005((v_9861385 != null ? v_9861385.length : 0));
      L2: do {
        var it_9880006 = 0;
        var i_10101917 = 0;
        L3: do {
            L4: while (true) {
            if (!(i_10101917 < (v_9861385 != null ? v_9861385.length : 0))) break L4;
              it_9880006 = v_9861385[i_10101917];
              resultHEX60gensym9861390_9875046[iHEX60gensym9861389_9870003] = it_9880006;
              iHEX60gensym9861389_9870003 += 1;
              i_10101917 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
    nimCopy(result_9861386, vector_9861232(resultHEX60gensym9861390_9875046), NTI9861018);

  return result_9861386;

}
function high_9885047(v_9885049) {
  var result_9885050 = 0;

    result_9885050 = (v_9885049.length - 1);

  return result_9885050;

}
function sum_10060940(x_10060944) {
  var result_10060945 = 0.0;

    L1: do {
      var i_10060976 = 0.0;
      var i_10101937 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10101937 < (x_10060944 != null ? x_10060944.length : 0))) break L3;
            i_10060976 = x_10060944[i_10101937];
            result_10060945 = (result_10060945 + i_10060976);
            i_10101937 += 1;
          }
      } while(false);
    } while(false);

  return result_10060945;

}
function sum_10060935(v_10060937) {
  var result_10060938 = 0.0;

    result_10060938 = sum_10060940(v_10060937.data);

  return result_10060938;

}
function len_9885030(v_9885032) {
  var result_9885033 = 0;

    result_9885033 = v_9885032.length;

  return result_9885033;

}
function mean_10061018(v_10061020) {
  var result_10061021 = 0.0;

    result_10061021 = (sum_10060935(v_10061020) / len_9885030(v_10061020));

  return result_10061021;

}
function low_9885064(v_9885066) {
  var result_9885067 = 0;

    result_9885067 = 0;

  return result_9885067;

}
function HEX5BHEX5DHEX3D_9935214(v_9935217, i_9935218, val_9935219) {
    if ((v_9935217.length <= i_9935218)) {
    v_9935217.length = (i_9935218 + 1);
    }
    
    v_9935217.data[i_9935218] = val_9935219;

  
}
function HEX5BHEX5D_9910053(v_9910055, i_9910056) {
  var result_9910057 = 0.0;

    result_9910057 = v_9910055.data[i_9910056];

  return result_9910057;

}
function HEX2EHEX2A_10060265(v_10060267, w_10060268) {
  var result_10060269 = [({length: 0, data: null})];

    result_10060269[0].data = new Float32Array(LENGTH_VECTOR);
    L1: do {
      var i_10060281 = 0;
      var colontmp__10101941 = 0;
      var colontmp__10101942 = 0;
      colontmp__10101941 = low_9885064(v_10060267);
      colontmp__10101942 = high_9885047(v_10060267);
      var res_10101943 = colontmp__10101941;
      L2: do {
          L3: while (true) {
          if (!(res_10101943 <= colontmp__10101942)) break L3;
            i_10060281 = res_10101943;
            HEX5BHEX5DHEX3D_9935214(result_10060269[0], i_10060281, (HEX5BHEX5D_9910053(v_10060267, i_10060281) * HEX5BHEX5D_9910053(w_10060268, i_10060281)));
            res_10101943 += 1;
          }
      } while(false);
    } while(false);

  return result_10060269[0];

}
function HEX2AHEX3D_9620001(x_9620005, x_9620005_Idx, y_9620006) {
    x_9620005[x_9620005_Idx] = (x_9620005[x_9620005_Idx] * y_9620006);

  
}
function HEX5E_10061056(x_10061059, y_10061060) {
  var result_10061061 = [0.0];

    switch (y_10061060) {
    case 0:
      result_10061061[0] = 1.0000000000000000e+000;
      break;
    case 1:
      result_10061061[0] = x_10061059;
      break;
    case 2:
      result_10061061[0] = (x_10061059 * x_10061059);
      break;
    case 3:
      result_10061061[0] = ((x_10061059 * x_10061059) * x_10061059);
      break;
    default: 
      var colontmp__10101949 = {Field0: x_10061059, Field1: nimCopy(null, y_10061060, NTI6004)};
      var x_10061063 = [colontmp__10101949["Field0"]];
      var y_10061064 = colontmp__10101949["Field1"];
      result_10061061[0] = 1.0000000000000000e+000;
      L1: do {
          L2: while (true) {
          if (!true) break L2;
            if (!(((y_10061064 & 1) == 0))) {
            HEX2AHEX3D_9620001(result_10061061, 0, x_10061063[0]);
            }
            
            y_10061064 = (y_10061064 >> 1);
            if ((y_10061064 == 0)) {
            break L1;
            }
            
            HEX2AHEX3D_9620001(x_10061063, 0, x_10061063[0]);
          }
      } while(false);
      break;
    }

  return result_10061061[0];

}
function variance_10061052(v_10061054) {
  var result_10061055 = 0.0;

    result_10061055 = ((sum_10060935(HEX2EHEX2A_10060265(v_10061054, v_10061054)) / len_9885030(v_10061054)) - HEX5E_10061056(mean_10061018(v_10061054), 2));

  return result_10061055;

}
function HEX5BHEX5D_9965014(v_9965016, idx_9965024) {
  var result_9965025 = ({length: 0, data: null});

    result_9965025.data = new Float32Array(LENGTH_VECTOR);
    var k_9965033 = 0;
    L1: do {
      var i_9965058 = 0;
      L2: do {
        var x_10101958 = 0;
        var res_10101959 = idx_9965024.a;
        L3: do {
            L4: while (true) {
            if (!(res_10101959 <= idx_9965024.b)) break L4;
              x_10101958 = res_10101959;
              i_9965058 = x_10101958;
              result_9965025.data[k_9965033] = v_9965016.data[i_9965058];
              k_9965033 += 1;
              res_10101959 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
    result_9965025.length = k_9965033;

  return result_9965025;

}
function HEX2EHEX2E_2080220(a_2080225, b_2080227) {
  var result_2080233 = ({a: 0, b: 0});

    nimCopy(result_2080233, {a: a_2080225, b: b_2080227}, NTI2080230);

  return result_2080233;

}
function HEX2D_10060167(v_10060169, k_10060170) {
  var result_10060171 = [({length: 0, data: null})];

    result_10060171[0].data = new Float32Array(LENGTH_VECTOR);
    L1: do {
      var i_10060183 = 0;
      var colontmp__10101967 = 0;
      var colontmp__10101968 = 0;
      colontmp__10101967 = low_9885064(v_10060169);
      colontmp__10101968 = high_9885047(v_10060169);
      var res_10101969 = colontmp__10101967;
      L2: do {
          L3: while (true) {
          if (!(res_10101969 <= colontmp__10101968)) break L3;
            i_10060183 = res_10101969;
            HEX5BHEX5DHEX3D_9935214(result_10060171[0], i_10060183, (HEX5BHEX5D_9910053(v_10060169, i_10060183) - k_10060170));
            res_10101969 += 1;
          }
      } while(false);
    } while(false);

  return result_10060171[0];

}
function acf_10065110(x_10065112, max_lag_10065113) {
  var result_10065114 = [({length: 0, data: null})];

    result_10065114[0].data = new Float32Array(LENGTH_VECTOR);
    var n_10065121 = high_9885047(x_10065112);
    var u_10065122 = mean_10061018(x_10065112);
    var s2_10065123 = variance_10061052(x_10065112);
    HEX5BHEX5DHEX3D_9935214(result_10065114[0], 0, 1.0000000000000000e+000);
    L1: do {
      var h_10065133 = 0;
      var colontmp__10101928 = 0;
      colontmp__10101928 = nimMin(max_lag_10065113, n_10065121);
      var res_10101929 = 1;
      L2: do {
          L3: while (true) {
          if (!(res_10101929 <= colontmp__10101928)) break L3;
            h_10065133 = res_10101929;
            var a_10065145 = HEX5BHEX5D_9965014(x_10065112, HEX2EHEX2E_2080220(0, (n_10065121 - h_10065133)));
            var b_10065155 = HEX5BHEX5D_9965014(x_10065112, HEX2EHEX2E_2080220(h_10065133, n_10065121));
            HEX5BHEX5DHEX3D_9935214(result_10065114[0], h_10065133, ((mean_10061018(HEX2EHEX2A_10060265(HEX2D_10060167(a_10065145, u_10065122), HEX2D_10060167(b_10065155, u_10065122))) + 1.0000000000000000e-010) / ((n_10065121 * s2_10065123) + 1.0000000000000000e-010)));
            res_10101929 += 1;
          }
      } while(false);
    } while(false);

  return result_10065114[0];

}
function parse_saturated_natural_1120017(s_1120019, b_1120021, b_1120021_Idx, start_1120022) {
      var Tmp1;
          var Tmp4;

  var result_1120024 = 0;

    var i_1120025 = start_1120022;
    if (((i_1120025 < (s_1120019 != null ? s_1120019.length : 0)) && (s_1120019[i_1120025] == 43))) {
    i_1120025 += 1;
    }
    
      if (!(i_1120025 < (s_1120019 != null ? s_1120019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1120019[i_1120025]] != undefined);      }    if (Tmp1) {
    b_1120021[b_1120021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_1120025 < (s_1120019 != null ? s_1120019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1120019[i_1120025]] != undefined);          }        if (!Tmp4) break L3;
          var c_1130016 = (s_1120019[i_1120025] - 48);
          if ((b_1120021[b_1120021_Idx] <= Math.trunc((2147483647 - c_1130016) / 10))) {
          b_1120021[b_1120021_Idx] = ((b_1120021[b_1120021_Idx] * 10) + c_1130016);
          }
          else {
            b_1120021[b_1120021_Idx] = 2147483647;
          }
          
          i_1120025 += 1;
          L5: do {
              L6: while (true) {
              if (!((i_1120025 < (s_1120019 != null ? s_1120019.length : 0)) && (s_1120019[i_1120025] == 95))) break L6;
                i_1120025 += 1;
              }
          } while(false);
        }
    } while(false);
    result_1120024 = (i_1120025 - start_1120022);
    }
    

  return result_1120024;

}
function HEX5BHEX5D_4530068(s_4530072, x_4530074) {
  var result_4530075 = null;

    var a_4530201 = x_4530074.a;
    var l_4530401 = ((((s_4530072 != null ? s_4530072.length : 0) - x_4530074.b) - a_4530201) + 1);
    result_4530075 = nimCopy(null, mnewString(l_4530401), NTI112);
    L1: do {
      var i_4530409 = 0;
      var i_10101987 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10101987 < l_4530401)) break L3;
            i_4530409 = i_10101987;
            result_4530075[i_4530409] = s_4530072[(i_4530409 + a_4530201)];
            i_10101987 += 1;
          }
      } while(false);
    } while(false);

  return result_4530075;

}
function HEX2EHEX2E_4530001(a_4530006, b_4530008) {
  var result_4530014 = ({a: 0, b: 0});

    nimCopy(result_4530014, {a: a_4530006, b: b_4530008}, NTI4530011);

  return result_4530014;

}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function parse_standard_format_specifier_9755322(s_9755324, start_9755325, ignore_unknown_suffix_9755327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9755328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_9755328.fill = 32;
    result_9755328.align = 0;
    result_9755328.sign = 45;
    var i_9755331 = start_9755325;
    if ((((i_9755331 + 1) < (s_9755324 != null ? s_9755324.length : 0)) && (ConstSet2[s_9755324[(i_9755331 + 1)]] != undefined))) {
    result_9755328.fill = s_9755324[i_9755331];
    result_9755328.align = s_9755324[(i_9755331 + 1)];
    i_9755331 += 2;
    }
    else {
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (ConstSet3[s_9755324[i_9755331]] != undefined))) {
    result_9755328.align = s_9755324[i_9755331];
    i_9755331 += 1;
    }
    }
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (ConstSet4[s_9755324[i_9755331]] != undefined))) {
    result_9755328.sign = s_9755324[i_9755331];
    i_9755331 += 1;
    }
    
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (s_9755324[i_9755331] == 35))) {
    result_9755328.alternateForm = true;
    i_9755331 += 1;
    }
    
      if (!(((i_9755331 + 1) < (s_9755324 != null ? s_9755324.length : 0)) && (s_9755324[i_9755331] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_9755324[(i_9755331 + 1)]] != undefined);      }    if (Tmp1) {
    result_9755328.padWithZero = true;
    i_9755331 += 1;
    }
    
    var parsed_length_9775015 = parse_saturated_natural_1120017(s_9755324, result_9755328, "minimumWidth", i_9755331);
    i_9755331 += parsed_length_9775015;
    if (((i_9755331 < (s_9755324 != null ? s_9755324.length : 0)) && (s_9755324[i_9755331] == 46))) {
    i_9755331 += 1;
    var parsed_length_b_9775029 = parse_saturated_natural_1120017(s_9755324, result_9755328, "precision", i_9755331);
    i_9755331 += parsed_length_b_9775029;
    }
    else {
      result_9755328.precision = -1;
    }
    
      if (!(i_9755331 < (s_9755324 != null ? s_9755324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_9755324[i_9755331]] != undefined);      }    if (Tmp2) {
    result_9755328.typ = s_9755324[i_9755331];
    i_9755331 += 1;
    }
    
    result_9755328.endPosition = i_9755331;
      if (!!((i_9755331 == (s_9755324 != null ? s_9755324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9755327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4530068(s_9755324, HEX2EHEX2E_4530001(i_9755331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    

  return result_9755328;

}
function nucruneLen(s_1201829) {
  var result_1201830 = 0;

    var i_1201832 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1201832 < (s_1201829 != null ? s_1201829.length : 0))) break L2;
          if ((s_1201829[i_1201832] <= 127)) {
          i_1201832 += 1;
          }
          else {
          if ((((s_1201829[i_1201832] >>> 0) >>> 5) == 6)) {
          i_1201832 += 2;
          }
          else {
          if ((((s_1201829[i_1201832] >>> 0) >>> 4) == 14)) {
          i_1201832 += 3;
          }
          else {
          if ((((s_1201829[i_1201832] >>> 0) >>> 3) == 30)) {
          i_1201832 += 4;
          }
          else {
          if ((((s_1201829[i_1201832] >>> 0) >>> 2) == 62)) {
          i_1201832 += 5;
          }
          else {
          if ((((s_1201829[i_1201832] >>> 0) >>> 1) == 126)) {
          i_1201832 += 6;
          }
          else {
          i_1201832 += 1;
          }
          }}}}}
          result_1201830 += 1;
        }
    } while(false);

  return result_1201830;

}
function rune_len_at_1201931(s_1201933, i_1201934) {
  var result_1201935 = 0;

    if ((s_1201933[i_1201934] <= 127)) {
    result_1201935 = 1;
    }
    else {
    if ((((s_1201933[i_1201934] >>> 0) >>> 5) == 6)) {
    result_1201935 = 2;
    }
    else {
    if ((((s_1201933[i_1201934] >>> 0) >>> 4) == 14)) {
    result_1201935 = 3;
    }
    else {
    if ((((s_1201933[i_1201934] >>> 0) >>> 3) == 30)) {
    result_1201935 = 4;
    }
    else {
    if ((((s_1201933[i_1201934] >>> 0) >>> 2) == 62)) {
    result_1201935 = 5;
    }
    else {
    if ((((s_1201933[i_1201934] >>> 0) >>> 1) == 126)) {
    result_1201935 = 6;
    }
    else {
      result_1201935 = 1;
    }
    }}}}}

  return result_1201935;

}
function rune_offset_1825244(s_1825246, pos_1825247, start_1825248) {
  var result_1825249 = 0;

  BeforeRet: do {
    var i_1825251 = 0;
    var o_1825252 = start_1825248;
    L1: do {
        L2: while (true) {
        if (!(i_1825251 < pos_1825247)) break L2;
          o_1825252 += rune_len_at_1201931(s_1825246, o_1825252);
          if (((s_1825246 != null ? s_1825246.length : 0) <= o_1825252)) {
          result_1825249 = -1;
          break BeforeRet;
          }
          
          i_1825251 += 1;
        }
    } while(false);
    result_1825249 = o_1825252;
    break BeforeRet;
  } while (false);

  return result_1825249;

}
function validate_utf8_1445229(s_1445231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1445232 = 0;

  BeforeRet: do {
    var i_1445234 = 0;
    var l_1445235 = (s_1445231 != null ? s_1445231.length : 0);
    L1: do {
        L2: while (true) {
        if (!(i_1445234 < l_1445235)) break L2;
          if ((s_1445231[i_1445234] <= 127)) {
          i_1445234 += 1;
          }
          else {
          if ((((s_1445231[i_1445234] >>> 0) >>> 5) == 6)) {
          if ((s_1445231[i_1445234] < 194)) {
          result_1445232 = i_1445234;
          break BeforeRet;
          }
          
            if (!((i_1445234 + 1) < l_1445235)) Tmp3 = false; else {              Tmp3 = (((s_1445231[(i_1445234 + 1)] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_1445234 += 2;
          }
          else {
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1445231[i_1445234] >>> 0) >>> 4) == 14)) {
            if (!((i_1445234 + 2) < l_1445235)) Tmp5 = false; else {              Tmp5 = (((s_1445231[(i_1445234 + 1)] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1445231[(i_1445234 + 2)] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_1445234 += 3;
          }
          else {
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1445231[i_1445234] >>> 0) >>> 3) == 30)) {
            if (!((i_1445234 + 3) < l_1445235)) Tmp8 = false; else {              Tmp8 = (((s_1445231[(i_1445234 + 1)] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1445231[(i_1445234 + 2)] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1445231[(i_1445234 + 3)] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_1445234 += 4;
          }
          else {
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          
          }
          else {
            result_1445232 = i_1445234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_1445232 = -1;
    break BeforeRet;
  } while (false);

  return result_1445232;

}
function nsuRepeatChar(c_9300048, count_9300049) {
  var result_9300050 = null;

    result_9300050 = nimCopy(null, mnewString(count_9300049), NTI112);
    L1: do {
      var i_9300059 = 0;
      var colontmp__10102018 = 0;
      colontmp__10102018 = (count_9300049 - 1);
      var res_10102019 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10102019 <= colontmp__10102018)) break L3;
            i_9300059 = res_10102019;
            result_9300050[i_9300059] = c_9300048;
            res_10102019 += 1;
          }
      } while(false);
    } while(false);

  return result_9300050;

}
function align_string_9755222(s_9755224, minimum_width_9755225, align_9755226, fill_9755227) {
      var Tmp1;

  var result_9755228 = null;

    if ((minimum_width_9755225 == 0)) {
    result_9755228 = nimCopy(null, s_9755224, NTI112);
    }
    else {
      if ((validate_utf8_1445229(s_9755224) == -1)) {
      Tmp1 = nucruneLen(s_9755224);
      }
      else {
      Tmp1 = (s_9755224 != null ? s_9755224.length : 0);
      }
      
      var s_rune_len_9755229 = Tmp1;
      var to_fill_9755230 = (minimum_width_9755225 - s_rune_len_9755229);
      if ((to_fill_9755230 <= 0)) {
      result_9755228 = nimCopy(null, s_9755224, NTI112);
      }
      else {
      if (((align_9755226 == 60) || (align_9755226 == 0))) {
      result_9755228 = nimCopy(null, (s_9755224 || []).concat(nsuRepeatChar(fill_9755227, to_fill_9755230) || []), NTI112);
      }
      else {
      if ((align_9755226 == 94)) {
      var half_9755231 = Math.trunc(to_fill_9755230 / 2);
      result_9755228 = nimCopy(null, (nsuRepeatChar(fill_9755227, half_9755231) || []).concat(s_9755224 || [],nsuRepeatChar(fill_9755227, (to_fill_9755230 - half_9755231)) || []), NTI112);
      }
      else {
        result_9755228 = nimCopy(null, (nsuRepeatChar(fill_9755227, to_fill_9755230) || []).concat(s_9755224 || []), NTI112);
      }
      }}
    }
    

  return result_9755228;

}
function format_value_9800080(result_9800083, result_9800083_Idx, value_9800084, specifier_9800085) {
    var spec_9800086 = parse_standard_format_specifier_9755322(specifier_9800085, 0, false);
    var value_9800087 = nimCopy(null, value_9800084, NTI112);
    switch (spec_9800086.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9800086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9800086.precision == -1))) {
    if ((spec_9800086.precision < nucruneLen(value_9800087))) {
    (value_9800087 == null ? value_9800087 = mnewString(rune_offset_1825244(value_9800087, spec_9800086.precision, 0)) : value_9800087.length = rune_offset_1825244(value_9800087, spec_9800086.precision, 0));
    }
    
    }
    
    if (result_9800083[result_9800083_Idx] != null) { result_9800083[result_9800083_Idx] = (result_9800083[result_9800083_Idx]).concat(align_string_9755222(value_9800087, spec_9800086.minimumWidth, spec_9800086.align, spec_9800086.fill)); } else { result_9800083[result_9800083_Idx] = align_string_9755222(value_9800087, spec_9800086.minimumWidth, spec_9800086.align, spec_9800086.fill).slice(); };

  
}
function nsuformatBiggestFloat(f_9585221, format_9585222, precision_9585227, decimal_sep_9585228) {
  var result_9585229 = null;

    var precision_9585401 = precision_9585227;
    if ((precision_9585401 == -1)) {
    precision_9585401 = 6;
    }
    
    var res_9585402 = null;
    switch (format_9585222) {
    case 0:
      res_9585402 = f_9585221.toString();
      break;
    case 1:
      res_9585402 = f_9585221.toFixed(precision_9585401);
      break;
    case 2:
      res_9585402 = f_9585221.toExponential(precision_9585401);
      break;
    }
    result_9585229 = nimCopy(null, cstrToNimstr(res_9585402), NTI112);
    if (((1.0000000000000000e+000 / f_9585221) == -Infinity)) {
    result_9585229 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_9585402) || []), NTI112);
    }
    
    L1: do {
      var i_9585410 = 0;
      var colontmp__10102035 = 0;
      colontmp__10102035 = (result_9585229 != null ? result_9585229.length : 0);
      var i_10102036 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10102036 < colontmp__10102035)) break L3;
            i_9585410 = i_10102036;
            if ((ConstSet9[result_9585229[i_9585410]] != undefined)) {
            result_9585229[i_9585410] = decimal_sep_9585228;
            }
            
            i_10102036 += 1;
          }
      } while(false);
    } while(false);

  return result_9585229;

}
function insert_335401(x_335404, x_335404_Idx, item_335405, i_335406) {
    var xl_335407 = (x_335404[x_335404_Idx] != null ? x_335404[x_335404_Idx].length : 0);
    (x_335404[x_335404_Idx] == null ? x_335404[x_335404_Idx] = mnewString((xl_335407 + (item_335405 != null ? item_335405.length : 0))) : x_335404[x_335404_Idx].length = (xl_335407 + (item_335405 != null ? item_335405.length : 0)));
    var j_335408 = (xl_335407 - 1);
    L1: do {
        L2: while (true) {
        if (!(i_335406 <= j_335408)) break L2;
          x_335404[x_335404_Idx][(j_335408 + (item_335405 != null ? item_335405.length : 0))] = x_335404[x_335404_Idx][j_335408];
          j_335408 -= 1;
        }
    } while(false);
    j_335408 = 0;
    L3: do {
        L4: while (true) {
        if (!(j_335408 < (item_335405 != null ? item_335405.length : 0))) break L4;
          x_335404[x_335404_Idx][(j_335408 + i_335406)] = item_335405[j_335408];
          j_335408 += 1;
        }
    } while(false);

  
}
function nsuToUpperAsciiChar(c_8815016) {
  var result_8815017 = 0;

    if ((ConstSet11[c_8815016] != undefined)) {
    result_8815017 = (c_8815016 - 32);
    }
    else {
      result_8815017 = c_8815016;
    }
    

  return result_8815017;

}
function nsuToUpperAsciiStr(s_8820037) {
  var result_8820038 = null;

    result_8820038 = nimCopy(null, mnewString((s_8820037 != null ? s_8820037.length : 0)), NTI112);
    L1: do {
      var iHEX60gensym8820039_8825009 = 0;
      var colontmp__10102041 = 0;
      colontmp__10102041 = ((s_8820037 != null ? s_8820037.length : 0) - 1);
      var res_10102042 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10102042 <= colontmp__10102041)) break L3;
            iHEX60gensym8820039_8825009 = res_10102042;
            result_8820038[iHEX60gensym8820039_8825009] = nsuToUpperAsciiChar(s_8820037[iHEX60gensym8820039_8825009]);
            res_10102042 += 1;
          }
      } while(false);
    } while(false);

  return result_8820038;

}
function format_value_9890001(result_9890004, result_9890004_Idx, value_9890005, specifier_9890006) {
    var Tmp1;

  BeforeRet: do {
    if (((specifier_9890006 != null ? specifier_9890006.length : 0) == 0)) {
    if (result_9890004[result_9890004_Idx] != null) { result_9890004[result_9890004_Idx] = (result_9890004[result_9890004_Idx]).concat(cstrToNimstr((value_9890005)+"")); } else { result_9890004[result_9890004_Idx] = cstrToNimstr((value_9890005)+"").slice(); };
    break BeforeRet;
    }
    
    var spec_9890007 = parse_standard_format_specifier_9755322(specifier_9890006, 0, false);
    var fmode_9890008 = 0;
    switch (spec_9890007.typ) {
    case 101:
    case 69:
      fmode_9890008 = 2;
      break;
    case 102:
    case 70:
      fmode_9890008 = 1;
      break;
    case 103:
    case 71:
      fmode_9890008 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_9890007.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    var f_9895002 = [nsuformatBiggestFloat(value_9890005, fmode_9890008, spec_9890007.precision, 46)];
    var sign_9895003 = false;
    if ((0.0 <= value_9890005)) {
    if (!((spec_9890007.sign == 45))) {
    sign_9895003 = true;
    if ((value_9890005 == 0.0)) {
    if (((1.0000000000000000e+000 / value_9890005) == Infinity)) {
    insert_335401(f_9895002, 0, nimCharToStr(spec_9890007.sign), 0);
    }
    
    }
    else {
    insert_335401(f_9895002, 0, nimCharToStr(spec_9890007.sign), 0);
    }
    
    }
    
    }
    else {
      sign_9895003 = true;
    }
    
    if (spec_9890007.padWithZero) {
    var sign_str_9895006 = [];
    if (sign_9895003) {
    sign_str_9895006 = nimCopy(null, nimCharToStr(f_9895002[0][0]), NTI112);
    f_9895002[0] = nimCopy(null, HEX5BHEX5D_4530068(f_9895002[0], HEX2EHEX2E_4530001(1, 1)), NTI112);
    }
    
    var to_fill_9905040 = ((spec_9890007.minimumWidth - (f_9895002[0] != null ? f_9895002[0].length : 0)) - (sign_9895003 ? 1:0));
    if ((0 < to_fill_9905040)) {
    f_9895002[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_9905040) || []).concat(f_9895002[0] || []), NTI112);
    }
    
    if (sign_9895003) {
    f_9895002[0] = nimCopy(null, (sign_str_9895006 || []).concat(f_9895002[0] || []), NTI112);
    }
    
    }
    
    if ((spec_9890007.align == 0)) {
    Tmp1 = 62;
    }
    else {
    Tmp1 = spec_9890007.align;
    }
    
    var align_9905041 = Tmp1;
    var res_9905042 = align_string_9755222(f_9895002[0], spec_9890007.minimumWidth, align_9905041, spec_9890007.fill);
    if ((ConstSet10[spec_9890007.typ] != undefined)) {
    if (result_9890004[result_9890004_Idx] != null) { result_9890004[result_9890004_Idx] = (result_9890004[result_9890004_Idx]).concat(nsuToUpperAsciiStr(res_9905042)); } else { result_9890004[result_9890004_Idx] = nsuToUpperAsciiStr(res_9905042).slice(); };
    }
    else {
    if (result_9890004[result_9890004_Idx] != null) { result_9890004[result_9890004_Idx] = (result_9890004[result_9890004_Idx]).concat(res_9905042); } else { result_9890004[result_9890004_Idx] = res_9905042.slice(); };
    }
    
  } while (false);

  
}
function HEX24_9885081(v_9885083) {
  var result_9885084 = null;

    result_9885084 = nimCopy(null, makeNimstrLit("["), NTI112);
    L1: do {
      var k_9885090 = 0;
      var colontmp__10102025 = 0;
      var colontmp__10102026 = 0;
      colontmp__10102025 = low_9885064(v_9885083);
      colontmp__10102026 = high_9885047(v_9885083);
      var res_10102027 = colontmp__10102025;
      L2: do {
          L3: while (true) {
          if (!(res_10102027 <= colontmp__10102026)) break L3;
            k_9885090 = res_10102027;
            var fmt_res_9885094 = [mnewString(0)];
            format_value_9890001(fmt_res_9885094, 0, v_9885083.data[k_9885090], makeNimstrLit(".04f"));
            if (result_9885084 != null) { result_9885084 = (result_9885084).concat(fmt_res_9885094[0]); } else { result_9885084 = fmt_res_9885094[0].slice(); };
            if (!((k_9885090 == high_9885047(v_9885083)))) {
            if (result_9885084 != null) { result_9885084 = (result_9885084).concat(makeNimstrLit(", ")); } else { result_9885084 = makeNimstrLit(", "); };
            }
            
            res_10102027 += 1;
          }
      } while(false);
    } while(false);
    if (result_9885084 != null) { result_9885084 = (result_9885084).concat(makeNimstrLit("]")); } else { result_9885084 = makeNimstrLit("]"); };

  return result_9885084;

}
function format_value_10070001(result_10070004, result_10070004_Idx, value_10070005, specifier_10070006) {
    format_value_9800080(result_10070004, result_10070004_Idx, HEX24_9885081(value_10070005), specifier_10070006);

  
}
function add_float_325219(result_325222, result_325222_Idx, x_325223) {
    if (result_325222[result_325222_Idx] != null) { result_325222[result_325222_Idx] = (result_325222[result_325222_Idx]).concat(cstrToNimstr((x_325223)+"")); } else { result_325222[result_325222_Idx] = cstrToNimstr((x_325223)+"").slice(); };

  
}
function add_quoted_10100401(s_10100404, s_10100404_Idx, x_10100405) {
    add_float_325219(s_10100404, s_10100404_Idx, x_10100405);

  
}
function collection_to_string_10091008(x_10091011, prefix_1009LENGTH_VECTOR, separator_10091013, suffix_10091014) {
  var result_10091015 = [null];

    result_10091015[0] = nimCopy(null, prefix_1009LENGTH_VECTOR, NTI112);
    var first_element_10091016 = true;
    L1: do {
      var value_10100214 = 0.0;
      var i_10102049 = 0;
      var l_10102050 = (x_10091011 != null ? x_10091011.length : 0);
      L2: do {
          L3: while (true) {
          if (!(i_10102049 < l_10102050)) break L3;
            value_10100214 = x_10091011[i_10102049];
            if (first_element_10091016) {
            first_element_10091016 = false;
            }
            else {
            if (result_10091015[0] != null) { result_10091015[0] = (result_10091015[0]).concat(separator_10091013); } else { result_10091015[0] = separator_10091013.slice(); };
            }
            
            add_quoted_10100401(result_10091015, 0, value_10100214);
            i_10102049 += 1;
          }
      } while(false);
    } while(false);
    if (result_10091015[0] != null) { result_10091015[0] = (result_10091015[0]).concat(suffix_10091014); } else { result_10091015[0] = suffix_10091014.slice(); };

  return result_10091015[0];

}
function HEX24_10091002(x_10091006) {
  var result_10091007 = null;

    result_10091007 = nimCopy(null, collection_to_string_10091008(x_10091006, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI112);

  return result_10091007;

}
function add_quoted_10090801(s_10090804, s_10090804_Idx, x_10090805) {
    if (s_10090804[s_10090804_Idx] != null) { s_10090804[s_10090804_Idx] = (s_10090804[s_10090804_Idx]).concat(HEX24_10091002(x_10090805)); } else { s_10090804[s_10090804_Idx] = HEX24_10091002(x_10090805).slice(); };

  
}
function HEX24_10080007(x_10080010) {
  var result_10080011 = [null];

    result_10080011[0] = nimCopy(null, makeNimstrLit("("), NTI112);
    var first_element_10080012 = true;
    if (!(first_element_10080012)) {
    if (result_10080011[0] != null) { result_10080011[0] = (result_10080011[0]).concat(makeNimstrLit(", ")); } else { result_10080011[0] = makeNimstrLit(", "); };
    }
    
    if (result_10080011[0] != null) { result_10080011[0] = (result_10080011[0]).concat(makeNimstrLit("autocorrelation")); } else { result_10080011[0] = makeNimstrLit("autocorrelation"); };
    if (result_10080011[0] != null) { result_10080011[0] = (result_10080011[0]).concat(makeNimstrLit(": ")); } else { result_10080011[0] = makeNimstrLit(": "); };
    add_quoted_10090801(result_10080011, 0, x_10080010.autocorrelation);
    first_element_10080012 = false;
    if (!(first_element_10080012)) {
    if (result_10080011[0] != null) { result_10080011[0] = (result_10080011[0]).concat(makeNimstrLit(", ")); } else { result_10080011[0] = makeNimstrLit(", "); };
    }
    
    if (result_10080011[0] != null) { result_10080011[0] = (result_10080011[0]).concat(makeNimstrLit("confidence_interval")); } else { result_10080011[0] = makeNimstrLit("confidence_interval"); };
    if (result_10080011[0] != null) { result_10080011[0] = (result_10080011[0]).concat(makeNimstrLit(": ")); } else { result_10080011[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_10080011, 0, x_10080010.confidence_interval);
    first_element_10080012 = false;
    if (result_10080011[0] != null) { result_10080011[0] = (result_10080011[0]).concat(makeNimstrLit(")")); } else { result_10080011[0] = makeNimstrLit(")"); };

  return result_10080011[0];

}
function format_value_10080001(result_10080004, result_10080004_Idx, value_10080005, specifier_10080006) {
    format_value_9800080(result_10080004, result_10080004_Idx, HEX24_10080007(value_10080005), specifier_10080006);

  
}
function vector_to_seq_9910014(v_9910016) {
  var result_9910018 = null;

    var length_9910019 = len_9885030(v_9910016);
    result_9910018 = new Array(length_9910019); for (var i=0;i<length_9910019;++i) {result_9910018[i]=0.0;}    var i_9910027 = 0;
    L1: do {
      var k_9910033 = 0;
      var colontmp__10102053 = 0;
      var colontmp__10102054 = 0;
      colontmp__10102053 = low_9885064(v_9910016);
      colontmp__10102054 = high_9885047(v_9910016);
      var res_10102055 = colontmp__10102053;
      L2: do {
          L3: while (true) {
          if (!(res_10102055 <= colontmp__10102054)) break L3;
            k_9910033 = res_10102055;
            result_9910018[i_9910027] = v_9910016.data[k_9910033];
            i_9910027 += 1;
            res_10102055 += 1;
          }
      } while(false);
    } while(false);

  return result_9910018;

}
function to_float_26459(i_26461) {
  var result_26462 = 0.0;

    result_26462 = i_26461;

  return result_26462;

}
function HEX2F_325648(x_325650, y_325651) {
  var result_325652 = 0.0;

    result_325652 = (to_float_26459(x_325650) / to_float_26459(y_325651));

  return result_325652;

}
function acf_confidence_interval_10065093(x_10065095) {
  var result_10065096 = 0.0;

    result_10065096 = (1.9600000000000000e+000 * Math.sqrt(HEX2F_325648(1, len_9885030(x_10065095))));

  return result_10065096;

}
function acf_information_10065170(x_10065172, max_lag_10065173) {
  var result_10065174 = ({autocorrelation: null, confidence_interval: 0.0});

    result_10065174.autocorrelation = nimCopy(null, vector_to_seq_9910014(acf_10065110(x_10065172, max_lag_10065173)), NTI9910017);
    result_10065174.confidence_interval = acf_confidence_interval_10065093(x_10065172);

  return result_10065174;

}
var x_10065191 = vector_9861382([3, 2, 1, 9, 4, 2, 5, 3, 3, 6, 8, 9, 10]);
var y_10065192 = acf_10065110(x_10065191, 10);
rawEcho(makeNimstrLit("AutocorrelationFunction"));
var fmt_res_10065197 = [mnewString(0)];
if (fmt_res_10065197[0] != null) { fmt_res_10065197[0] = (fmt_res_10065197[0]).concat(makeNimstrLit("  X: ")); } else { fmt_res_10065197[0] = makeNimstrLit("  X: "); };
format_value_10070001(fmt_res_10065197, 0, x_10065191, []);
rawEcho(fmt_res_10065197[0]);
var fmt_res_10070025 = [mnewString(0)];
if (fmt_res_10070025[0] != null) { fmt_res_10070025[0] = (fmt_res_10070025[0]).concat(makeNimstrLit("  ACF: ")); } else { fmt_res_10070025[0] = makeNimstrLit("  ACF: "); };
format_value_10070001(fmt_res_10070025, 0, y_10065192, []);
rawEcho(fmt_res_10070025[0]);
var fmt_res_10075012 = [mnewString(0)];
if (fmt_res_10075012[0] != null) { fmt_res_10075012[0] = (fmt_res_10075012[0]).concat(makeNimstrLit("  ACF-info: ")); } else { fmt_res_10075012[0] = makeNimstrLit("  ACF-info: "); };
format_value_10080001(fmt_res_10075012, 0, acf_information_10065170(x_10065191, 10), []);
rawEcho(fmt_res_10075012[0]);
rawEcho([]);
function student_t_ppf_95p_10061205(df_10061207) {
  var result_10061208 = 0.0;

  BeforeRet: do {
    if ((37 < df_10061207)) {
    result_10061208 = 1.9600000000000000e+000;
    break BeforeRet;
    }
    else {
    if ((df_10061207 <= 1)) {
    result_10061208 = 1.2710000000000001e+001;
    break BeforeRet;
    }
    }
    result_10061208 = table_ppf_10061211[df_10061207];
    break BeforeRet;
  } while (false);

  return result_10061208;

}
function student_t_ppf_95p_10065058(df_10065060) {
  var result_10065061 = 0.0;

    result_10065061 = student_t_ppf_95p_10061205(((df_10065060)|0));

  return result_10065061;

}
function HEX2D_10060136(v_10060138, w_10060139) {
  var result_10060140 = [({length: 0, data: null})];

    result_10060140[0].data = new Float32Array(LENGTH_VECTOR);
    L1: do {
      var i_10060152 = 0;
      var colontmp__LENGTH_VECTOR0214 = 0;
      var colontmp__LENGTH_VECTOR0215 = 0;
      colontmp__LENGTH_VECTOR0214 = low_9885064(v_10060138);
      colontmp__LENGTH_VECTOR0215 = high_9885047(v_10060138);
      var res_LENGTH_VECTOR0216 = colontmp__LENGTH_VECTOR0214;
      L2: do {
          L3: while (true) {
          if (!(res_LENGTH_VECTOR0216 <= colontmp__LENGTH_VECTOR0215)) break L3;
            i_10060152 = res_LENGTH_VECTOR0216;
            HEX5BHEX5DHEX3D_9935214(result_10060140[0], i_10060152, (HEX5BHEX5D_9910053(v_10060138, i_10060152) - HEX5BHEX5D_9910053(w_10060139, i_10060152)));
            res_LENGTH_VECTOR0216 += 1;
          }
      } while(false);
    } while(false);

  return result_10060140[0];

}
function HEX2B_10060051(v_10060053, k_10060054) {
  var result_10060055 = [({length: 0, data: null})];

    result_10060055[0].data = new Float32Array(LENGTH_VECTOR);
    L1: do {
      var i_10060067 = 0;
      var colontmp__LENGTH_VECTOR0222 = 0;
      var colontmp__LENGTH_VECTOR0223 = 0;
      colontmp__LENGTH_VECTOR0222 = low_9885064(v_10060053);
      colontmp__LENGTH_VECTOR0223 = high_9885047(v_10060053);
      var res_LENGTH_VECTOR0224 = colontmp__LENGTH_VECTOR0222;
      L2: do {
          L3: while (true) {
          if (!(res_LENGTH_VECTOR0224 <= colontmp__LENGTH_VECTOR0223)) break L3;
            i_10060067 = res_LENGTH_VECTOR0224;
            HEX5BHEX5DHEX3D_9935214(result_10060055[0], i_10060067, (HEX5BHEX5D_9910053(v_10060053, i_10060067) + k_10060054));
            res_LENGTH_VECTOR0224 += 1;
          }
      } while(false);
    } while(false);

  return result_10060055[0];

}
function HEX2B_10060082(k_10060084, v_10060085) {
  var result_10060086 = ({length: 0, data: null});

    nimCopy(result_10060086, HEX2B_10060051(v_10060085, k_10060084), NTI9861018);

  return result_10060086;

}
function HEX2EHEX2A_10060296(v_10060298, k_10060299) {
  var result_10060300 = [({length: 0, data: null})];

    result_10060300[0].data = new Float32Array(LENGTH_VECTOR);
    L1: do {
      var i_10060312 = 0;
      var colontmp__LENGTH_VECTOR0230 = 0;
      var colontmp__LENGTH_VECTOR0231 = 0;
      colontmp__LENGTH_VECTOR0230 = low_9885064(v_10060298);
      colontmp__LENGTH_VECTOR0231 = high_9885047(v_10060298);
      var res_LENGTH_VECTOR0232 = colontmp__LENGTH_VECTOR0230;
      L2: do {
          L3: while (true) {
          if (!(res_LENGTH_VECTOR0232 <= colontmp__LENGTH_VECTOR0231)) break L3;
            i_10060312 = res_LENGTH_VECTOR0232;
            HEX5BHEX5DHEX3D_9935214(result_10060300[0], i_10060312, (HEX5BHEX5D_9910053(v_10060298, i_10060312) * k_10060299));
            res_LENGTH_VECTOR0232 += 1;
          }
      } while(false);
    } while(false);

  return result_10060300[0];

}
function HEX2EHEX2A_10060327(k_10060329, v_10060330) {
  var result_10060331 = ({length: 0, data: null});

    nimCopy(result_10060331, HEX2EHEX2A_10060296(v_10060330, k_10060329), NTI9861018);

  return result_10060331;

}
function HEX2A_10060399(k_10060401, v_10060402) {
  var result_10060403 = ({length: 0, data: null});

    nimCopy(result_10060403, HEX2EHEX2A_10060327(k_10060401, v_10060402), NTI9861018);

  return result_10060403;

}
function HEX5E_10060654(v_10060656, w_10060657) {
  var result_10060658 = 0.0;

    result_10060658 = Math.pow(v_10060656, w_10060657);

  return result_10060658;

}
function HEX2EHEX5E_10060703(v_10060705, k_10060706) {
  var result_10060707 = [({length: 0, data: null})];

    result_10060707[0].data = new Float32Array(LENGTH_VECTOR);
    L1: do {
      var i_10060719 = 0;
      var colontmp__LENGTH_VECTOR0238 = 0;
      var colontmp__LENGTH_VECTOR0239 = 0;
      colontmp__LENGTH_VECTOR0238 = low_9885064(v_10060705);
      colontmp__LENGTH_VECTOR0239 = high_9885047(v_10060705);
      var res_LENGTH_VECTOR0240 = colontmp__LENGTH_VECTOR0238;
      L2: do {
          L3: while (true) {
          if (!(res_LENGTH_VECTOR0240 <= colontmp__LENGTH_VECTOR0239)) break L3;
            i_10060719 = res_LENGTH_VECTOR0240;
            HEX5BHEX5DHEX3D_9935214(result_10060707[0], i_10060719, HEX5E_10060654(HEX5BHEX5D_9910053(v_10060705, i_10060719), k_10060706));
            res_LENGTH_VECTOR0240 += 1;
          }
      } while(false);
    } while(false);

  return result_10060707[0];

}
function student_t_cdf_10061186(t_10061188, df_10061189) {
  var result_10061190 = 0.0;

  BeforeRet: do {
    var y_10061191 = (((df_10061189 + 1.0526315789473684e-001) / (df_10061189 + 3.0985915492957744e-001)) * Math.sqrt(((df_10061189 + 1.0526315789473684e-001) * Math.log((1.0000000000000000e+000 + ((t_10061188 * t_10061188) / (df_10061189 + 2.6000000000000001e-001)))))));
    result_10061190 = (1.0000000000000000e+000 / (1.0000000000000000e+000 + Math.exp(((-1.6000000000000001e+000 * y_10061191) - (((7.0000000000000007e-002 * y_10061191) * y_10061191) * y_10061191)))));
    break BeforeRet;
  } while (false);

  return result_10061190;

}
function p_value_of_t_distr_10102061(mean_10102063, variance_10102064, n_10102065) {
  var result_10102066 = 0.0;

    result_10102066 = (2.0000000000000000e+000 - (2.0000000000000000e+000 * student_t_cdf_10061186((mean_10102063 / Math.sqrt(variance_10102064)), (n_10102065 - 2))));

  return result_10102066;

}
function simple_linear_regression(x_LENGTH_VECTOR0128, y_LENGTH_VECTOR0129) {
  var result_LENGTH_VECTOR0130 = ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0});

    var n_LENGTH_VECTOR0131 = len_9885030(x_LENGTH_VECTOR0128);
    var sx_LENGTH_VECTOR0132 = sum_10060935(x_LENGTH_VECTOR0128);
    var sxx_LENGTH_VECTOR0133 = sum_10060935(HEX2EHEX2A_10060265(x_LENGTH_VECTOR0128, x_LENGTH_VECTOR0128));
    var sy_LENGTH_VECTOR0134 = sum_10060935(y_LENGTH_VECTOR0129);
    var sxy_LENGTH_VECTOR0135 = sum_10060935(HEX2EHEX2A_10060265(x_LENGTH_VECTOR0128, y_LENGTH_VECTOR0129));
    var syy_LENGTH_VECTOR0136 = sum_10060935(HEX2EHEX2A_10060265(y_LENGTH_VECTOR0129, y_LENGTH_VECTOR0129));
    var t_value_LENGTH_VECTOR0137 = student_t_ppf_95p_10065058((n_LENGTH_VECTOR0131 - 2.0000000000000000e+000));
    result_LENGTH_VECTOR0130.n = ((n_LENGTH_VECTOR0131)|0);
    result_LENGTH_VECTOR0130.slope = (((n_LENGTH_VECTOR0131 * sxy_LENGTH_VECTOR0135) - (sx_LENGTH_VECTOR0132 * sy_LENGTH_VECTOR0134)) / (((n_LENGTH_VECTOR0131 * sxx_LENGTH_VECTOR0133) - HEX5E_10061056(sx_LENGTH_VECTOR0132, 2)) + 1.0000000000000000e-010));
    result_LENGTH_VECTOR0130.intercept = ((sy_LENGTH_VECTOR0134 / n_LENGTH_VECTOR0131) - ((result_LENGTH_VECTOR0130.slope * sx_LENGTH_VECTOR0132) / n_LENGTH_VECTOR0131));
    result_LENGTH_VECTOR0130.R2 = ((HEX5E_10061056(((n_LENGTH_VECTOR0131 * sxy_LENGTH_VECTOR0135) - (sx_LENGTH_VECTOR0132 * sy_LENGTH_VECTOR0134)), 2) / ((n_LENGTH_VECTOR0131 * sxx_LENGTH_VECTOR0133) - HEX5E_10061056(sx_LENGTH_VECTOR0132, 2))) / (((n_LENGTH_VECTOR0131 * syy_LENGTH_VECTOR0136) - HEX5E_10061056(sy_LENGTH_VECTOR0134, 2)) + 1.0000000000000000e-010));
    var residual_LENGTH_VECTOR0158 = HEX2D_10060136(y_LENGTH_VECTOR0129, HEX2B_10060082(result_LENGTH_VECTOR0130.intercept, HEX2A_10060399(result_LENGTH_VECTOR0130.slope, x_LENGTH_VECTOR0128)));
    result_LENGTH_VECTOR0130.residual = nimCopy(null, vector_to_seq_9910014(residual_LENGTH_VECTOR0158), NTI9910017);
    result_LENGTH_VECTOR0130.residual_sum_squares = sum_10060935(HEX2EHEX5E_10060703(residual_LENGTH_VECTOR0158, 2.0000000000000000e+000));
    result_LENGTH_VECTOR0130.residual_variance = ((((n_LENGTH_VECTOR0131 * syy_LENGTH_VECTOR0136) - HEX5E_10061056(sy_LENGTH_VECTOR0134, 2)) - (HEX5E_10061056(result_LENGTH_VECTOR0130.slope, 2) * ((n_LENGTH_VECTOR0131 * sxx_LENGTH_VECTOR0133) - HEX5E_10061056(sx_LENGTH_VECTOR0132, 2)))) / (((n_LENGTH_VECTOR0131 * n_LENGTH_VECTOR0131) - (2.0000000000000000e+000 * n_LENGTH_VECTOR0131)) + 1.0000000000000000e-010));
    nimCopy(result_LENGTH_VECTOR0130.autocorrelation_function, acf_information_10065170(residual_LENGTH_VECTOR0158, 100), NTI10065076);
    result_LENGTH_VECTOR0130.slope_variance = ((n_LENGTH_VECTOR0131 * result_LENGTH_VECTOR0130.residual_variance) / (((n_LENGTH_VECTOR0131 * sxx_LENGTH_VECTOR0133) - HEX5E_10061056(sx_LENGTH_VECTOR0132, 2)) + 1.0000000000000000e-010));
    result_LENGTH_VECTOR0130.intercept_variance = ((result_LENGTH_VECTOR0130.slope_variance * sxx_LENGTH_VECTOR0133) / n_LENGTH_VECTOR0131);
    result_LENGTH_VECTOR0130.slope_p_value = p_value_of_t_distr_10102061(result_LENGTH_VECTOR0130.slope, result_LENGTH_VECTOR0130.slope_variance, ((n_LENGTH_VECTOR0131)|0));
    result_LENGTH_VECTOR0130.intercept_p_value = p_value_of_t_distr_10102061(result_LENGTH_VECTOR0130.intercept, result_LENGTH_VECTOR0130.intercept_variance, ((n_LENGTH_VECTOR0131)|0));
    result_LENGTH_VECTOR0130.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_LENGTH_VECTOR0130.slope_variance)) * t_value_LENGTH_VECTOR0137);
    result_LENGTH_VECTOR0130.slope_confidence_interval[0] = (result_LENGTH_VECTOR0130.slope - (5.0000000000000000e-001 * result_LENGTH_VECTOR0130.slope_width_confidence_interval));
    result_LENGTH_VECTOR0130.slope_confidence_interval[1] = (result_LENGTH_VECTOR0130.slope + (5.0000000000000000e-001 * result_LENGTH_VECTOR0130.slope_width_confidence_interval));
    result_LENGTH_VECTOR0130.intercept_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_LENGTH_VECTOR0130.intercept_variance)) * t_value_LENGTH_VECTOR0137);
    result_LENGTH_VECTOR0130.intercept_confidence_interval[0] = (result_LENGTH_VECTOR0130.intercept - (5.0000000000000000e-001 * result_LENGTH_VECTOR0130.intercept_width_confidence_interval));
    result_LENGTH_VECTOR0130.intercept_confidence_interval[1] = (result_LENGTH_VECTOR0130.intercept + (5.0000000000000000e-001 * result_LENGTH_VECTOR0130.intercept_width_confidence_interval));

  return result_LENGTH_VECTOR0130;

}
function simple_linear_regression_wo_intercept(x_LENGTH_VECTOR0252, y_LENGTH_VECTOR0253) {
  var result_LENGTH_VECTOR0254 = ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0});

    var n_LENGTH_VECTOR0255 = len_9885030(x_LENGTH_VECTOR0252);
    var sx_LENGTH_VECTOR0256 = sum_10060935(x_LENGTH_VECTOR0252);
    var sxx_LENGTH_VECTOR0257 = sum_10060935(HEX2EHEX2A_10060265(x_LENGTH_VECTOR0252, x_LENGTH_VECTOR0252));
    var sy_LENGTH_VECTOR0258 = sum_10060935(y_LENGTH_VECTOR0253);
    var sxy_LENGTH_VECTOR0259 = sum_10060935(HEX2EHEX2A_10060265(x_LENGTH_VECTOR0252, y_LENGTH_VECTOR0253));
    var sxxyy_LENGTH_VECTOR0260 = sum_10060935(HEX2EHEX2A_10060265(HEX2EHEX2A_10060265(x_LENGTH_VECTOR0252, y_LENGTH_VECTOR0253), HEX2EHEX2A_10060265(x_LENGTH_VECTOR0252, y_LENGTH_VECTOR0253)));
    var syy_LENGTH_VECTOR0261 = sum_10060935(HEX2EHEX2A_10060265(y_LENGTH_VECTOR0253, y_LENGTH_VECTOR0253));
    result_LENGTH_VECTOR0254.n = ((n_LENGTH_VECTOR0255)|0);
    result_LENGTH_VECTOR0254.slope = ((((n_LENGTH_VECTOR0255 * sxy_LENGTH_VECTOR0259) - (sx_LENGTH_VECTOR0256 * sy_LENGTH_VECTOR0258)) + (sx_LENGTH_VECTOR0256 * sy_LENGTH_VECTOR0258)) / ((((n_LENGTH_VECTOR0255 * sxx_LENGTH_VECTOR0257) - HEX5E_10061056(sx_LENGTH_VECTOR0256, 2)) + (sx_LENGTH_VECTOR0256 * sx_LENGTH_VECTOR0256)) + 1.0000000000000000e-010));
    result_LENGTH_VECTOR0254.intercept = 0.0;
    result_LENGTH_VECTOR0254.R2 = ((HEX5E_10061056(sxy_LENGTH_VECTOR0259, 2) + 1.0000000000000000e-010) / ((sxx_LENGTH_VECTOR0257 * syy_LENGTH_VECTOR0261) + 1.0000000000000000e-010));
    var residual_LENGTH_VECTOR0272 = HEX2D_10060136(y_LENGTH_VECTOR0253, HEX2B_10060082(result_LENGTH_VECTOR0254.intercept, HEX2A_10060399(result_LENGTH_VECTOR0254.slope, x_LENGTH_VECTOR0252)));
    result_LENGTH_VECTOR0254.residual = nimCopy(null, vector_to_seq_9910014(residual_LENGTH_VECTOR0272), NTI9910017);
    result_LENGTH_VECTOR0254.residual_sum_squares = sum_10060935(HEX2EHEX5E_10060703(residual_LENGTH_VECTOR0272, 2.0000000000000000e+000));
    result_LENGTH_VECTOR0254.residual_variance = (result_LENGTH_VECTOR0254.residual_sum_squares / ((n_LENGTH_VECTOR0255 - 1.0000000000000000e+000) + 1.0000000000000000e-010));
    nimCopy(result_LENGTH_VECTOR0254.autocorrelation_function, acf_information_10065170(residual_LENGTH_VECTOR0272, 100), NTI10065076);
    result_LENGTH_VECTOR0254.slope_variance = (result_LENGTH_VECTOR0254.residual_variance / (sxx_LENGTH_VECTOR0257 + 1.0000000000000000e-010));
    result_LENGTH_VECTOR0254.intercept_variance = 0.0;
    result_LENGTH_VECTOR0254.slope_p_value = p_value_of_t_distr_10102061(result_LENGTH_VECTOR0254.slope, result_LENGTH_VECTOR0254.slope_variance, ((n_LENGTH_VECTOR0255)|0));
    result_LENGTH_VECTOR0254.intercept_p_value = 0.0;
    result_LENGTH_VECTOR0254.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_LENGTH_VECTOR0254.slope_variance)) * student_t_ppf_95p_10065058((n_LENGTH_VECTOR0255 - 1.0000000000000000e+000)));
    result_LENGTH_VECTOR0254.slope_confidence_interval[0] = (result_LENGTH_VECTOR0254.slope - (5.0000000000000000e-001 * result_LENGTH_VECTOR0254.slope_width_confidence_interval));
    result_LENGTH_VECTOR0254.slope_confidence_interval[1] = (result_LENGTH_VECTOR0254.slope + (5.0000000000000000e-001 * result_LENGTH_VECTOR0254.slope_width_confidence_interval));
    result_LENGTH_VECTOR0254.intercept_width_confidence_interval = 0.0;
    result_LENGTH_VECTOR0254.intercept_confidence_interval[0] = 0.0;
    result_LENGTH_VECTOR0254.intercept_confidence_interval[1] = 0.0;

  return result_LENGTH_VECTOR0254;

}
function arma(x_10130031, y_10130032) {
  var result_10130033 = ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})});

    nimCopy(result_10130033.mean_structure, simple_linear_regression(x_10130031, y_10130032), NTI10101810);
    var residuals_10130034 = HEX2D_10060136(y_10130032, HEX2B_10060082(result_10130033.mean_structure.intercept, HEX2A_10060399(result_10130033.mean_structure.slope, x_10130031)));
    nimCopy(result_10130033.autoregressive_structure, simple_linear_regression_wo_intercept(HEX5BHEX5D_9965014(residuals_10130034, HEX2EHEX2E_2080220(0, (high_9885047(residuals_10130034) - 1))), HEX5BHEX5D_9965014(residuals_10130034, HEX2EHEX2E_2080220(1, high_9885047(residuals_10130034)))), NTI10101810);

  return result_10130033;

}
function HEX2BHEX3D_940001(x_940005, x_940005_Idx, y_940006) {
    x_940005[x_940005_Idx] = (x_940005[x_940005_Idx] + y_940006);

  
}
function HEX2DHEX3D_10130094(x_10130098, x_10130098_Idx, y_10130099) {
    x_10130098[x_10130098_Idx] = (x_10130098[x_10130098_Idx] - y_10130099);

  
}
function HEX2EHEX5E_10060765(v_10060767, k_10060768) {
  var result_10060769 = ({length: 0, data: null});

    nimCopy(result_10060769, HEX2EHEX5E_10060703(v_10060767, k_10060768), NTI9861018);

  return result_10060769;

}
function normal_loglikelihood_10130085(x_10130087, y_10130088, slope_10130089, intercept_10130090, sigma2_10130091) {
  var result_10130092 = [0.0];

    var n_10130093 = len_9885030(x_10130087);
    result_10130092[0] = ((-5.0000000000000000e-001 * n_10130093) * Math.log(((6.2831853071795862e+000 * sigma2_10130091) + 1.0000000000000000e-010)));
    HEX2DHEX3D_10130094(result_10130092, 0, (sum_10060935(HEX2EHEX5E_10060765(HEX2D_10060136(y_10130088, HEX2B_10060082(intercept_10130090, HEX2A_10060399(slope_10130089, x_10130087))), 2)) / ((2.0000000000000000e+000 * sigma2_10130091) + 1.0000000000000000e-010)));

  return result_10130092[0];

}
function analysis_at_point_t_10130127(x_10130129, y_10130130, change_point_10130131) {
  var result_10130132 = ({loglikelihood: 0.0, before_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), after_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})})});

    var n_10130133 = len_9885030(x_10130129);
    var x_before_10130145 = HEX5BHEX5D_9965014(x_10130129, HEX2EHEX2E_2080220(0, (change_point_10130131 - 1)));
    var y_before_10130157 = HEX5BHEX5D_9965014(y_10130130, HEX2EHEX2E_2080220(0, (change_point_10130131 - 1)));
    var x_after_10130167 = HEX5BHEX5D_9965014(x_10130129, HEX2EHEX2E_2080220(change_point_10130131, high_9885047(x_10130129)));
    var y_after_10130177 = HEX5BHEX5D_9965014(y_10130130, HEX2EHEX2E_2080220(change_point_10130131, high_9885047(y_10130130)));
    nimCopy(result_10130132.before_change, arma(x_before_10130145, y_before_10130157), NTI10101861);
    HEX2BHEX3D_940001(result_10130132, "loglikelihood", normal_loglikelihood_10130085(x_before_10130145, y_before_10130157, result_10130132.before_change.mean_structure.slope, result_10130132.before_change.mean_structure.intercept, result_10130132.before_change.autoregressive_structure.residual_variance));
    nimCopy(result_10130132.after_change, arma(x_after_10130167, y_after_10130177), NTI10101861);
    HEX2BHEX3D_940001(result_10130132, "loglikelihood", normal_loglikelihood_10130085(x_after_10130167, y_after_10130177, result_10130132.after_change.mean_structure.slope, result_10130132.after_change.mean_structure.intercept, result_10130132.after_change.autoregressive_structure.residual_variance));

  return result_10130132;

}
function model_differences_10102080(before_change_10102082, after_change_10102083) {
  var result_10102084 = ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0});

    result_10102084.intercept = (after_change_10102083.mean_structure.intercept - before_change_10102082.mean_structure.intercept);
    result_10102084.slope = (after_change_10102083.mean_structure.slope - before_change_10102082.mean_structure.slope);
    result_10102084.autoregressive_slope = (after_change_10102083.autoregressive_structure.slope - before_change_10102082.autoregressive_structure.slope);
    var intercept_dof_10102085 = ((after_change_10102083.mean_structure.n + before_change_10102082.mean_structure.n) - 4);
    var slope_dof_10102086 = ((after_change_10102083.mean_structure.n + before_change_10102082.mean_structure.n) - 4);
    var autoregressive_slope_dof_10102087 = ((after_change_10102083.autoregressive_structure.n + before_change_10102082.autoregressive_structure.n) - 4);
    result_10102084.intercept_variance = (after_change_10102083.mean_structure.intercept_variance + before_change_10102082.mean_structure.intercept_variance);
    result_10102084.slope_variance = (after_change_10102083.mean_structure.slope_variance + before_change_10102082.mean_structure.slope_variance);
    result_10102084.autoregressive_slope_variance = (after_change_10102083.autoregressive_structure.slope_variance + before_change_10102082.autoregressive_structure.slope_variance);
    result_10102084.intercept_p_value = p_value_of_t_distr_10102061(result_10102084.intercept, result_10102084.intercept_variance, (intercept_dof_10102085 + 2));
    result_10102084.slope_p_value = p_value_of_t_distr_10102061(result_10102084.slope, result_10102084.slope_variance, (slope_dof_10102086 + 2));
    result_10102084.autoregressive_slope_p_value = p_value_of_t_distr_10102061(result_10102084.autoregressive_slope, result_10102084.autoregressive_slope_variance, (autoregressive_slope_dof_10102087 + 2));
    result_10102084.intercept_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_10102084.intercept_variance)) * student_t_ppf_95p_10061205(intercept_dof_10102085));
    result_10102084.slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_10102084.slope_variance)) * student_t_ppf_95p_10061205(slope_dof_10102086));
    result_10102084.autoregressive_slope_width_confidence_interval = ((2.0000000000000000e+000 * Math.sqrt(result_10102084.autoregressive_slope_variance)) * student_t_ppf_95p_10061205(autoregressive_slope_dof_10102087));
    nimCopy(result_10102084.intercept_confidence_interval, [(result_10102084.intercept - (5.0000000000000000e-001 * result_10102084.intercept_width_confidence_interval)), (result_10102084.intercept + (5.0000000000000000e-001 * result_10102084.intercept_width_confidence_interval))], NTI10102088);
    nimCopy(result_10102084.slope_confidence_interval, [(result_10102084.slope - (5.0000000000000000e-001 * result_10102084.slope_width_confidence_interval)), (result_10102084.slope + (5.0000000000000000e-001 * result_10102084.slope_width_confidence_interval))], NTI10102090);
    nimCopy(result_10102084.autoregressive_slope_confidence_interval, [(result_10102084.autoregressive_slope - (5.0000000000000000e-001 * result_10102084.autoregressive_slope_width_confidence_interval)), (result_10102084.autoregressive_slope + (5.0000000000000000e-001 * result_10102084.autoregressive_slope_width_confidence_interval))], NTI10102092);

  return result_10102084;

}
function robust_interrupted_time_series_model_10130220(x_10130222, y_10130223, change_point_10130224, candidates_before_10130225, candidates_after_10130226) {
                var Tmp5;

  var result_10130227 = ({before_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), after_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), likelihood: ({change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}), parameter_differences: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0})});

    var ll_result_10130228 = ({loglikelihood: 0.0, before_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), after_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})})});
    result_10130227.likelihood.best_loglikelihood = -1.0000000000000000e+100;
    L1: do {
      var t_10130234 = 0;
      var colontmp__10140084 = 0;
      var colontmp__10140085 = 0;
      colontmp__10140084 = (change_point_10130224 - candidates_before_10130225);
      colontmp__10140085 = (change_point_10130224 + candidates_after_10130226);
      var res_10140086 = colontmp__10140084;
      L2: do {
          L3: while (true) {
          if (!(res_10140086 <= colontmp__10140085)) break L3;
            t_10130234 = res_10140086;
            L4: do {
                if ((t_10130234 < 3)) Tmp5 = true; else {                  Tmp5 = (high_9885047(x_10130222) < t_10130234);                }              if (Tmp5) {
              break L4;
              }
              
              nimCopy(ll_result_10130228, analysis_at_point_t_10130127(x_10130222, y_10130223, t_10130234), NTI10101865);
              if (result_10130227.likelihood.change_points != null) { result_10130227.likelihood.change_points.push(t_10130234); } else { result_10130227.likelihood.change_points = [t_10130234]; };
              if (result_10130227.likelihood.loglikelihood != null) { result_10130227.likelihood.loglikelihood.push(ll_result_10130228.loglikelihood); } else { result_10130227.likelihood.loglikelihood = [ll_result_10130228.loglikelihood]; };
              if ((result_10130227.likelihood.best_loglikelihood < ll_result_10130228.loglikelihood)) {
              result_10130227.likelihood.best_loglikelihood = ll_result_10130228.loglikelihood;
              result_10130227.likelihood.best_likelihood = Math.exp(ll_result_10130228.loglikelihood);
              result_10130227.likelihood.best_index = t_10130234;
              result_10130227.likelihood.best_time = HEX5BHEX5D_9910053(x_10130222, t_10130234);
              nimCopy(result_10130227.before_change, ll_result_10130228.before_change, NTI10101861);
              nimCopy(result_10130227.after_change, ll_result_10130228.after_change, NTI10101861);
              nimCopy(result_10130227.parameter_differences, model_differences_10102080(result_10130227.before_change, result_10130227.after_change), NTI10101835);
              }
              
            } while(false);
            res_10140086 += 1;
          }
      } while(false);
    } while(false);

  return result_10130227;

}
function robust_interrupted_time_series(x_10140047, y_10140049, change_point_10140050, candidates_before_10140051, candidates_after_10140052) {
  var result_10140053 = ({before_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), after_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), likelihood: ({change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}), parameter_differences: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0})});

    nimCopy(result_10140053, robust_interrupted_time_series_model_10130220(vector_9861232(x_10140047), vector_9861232(y_10140049), change_point_10140050, candidates_before_10140051, candidates_after_10140052), NTI10101880);

  return result_10140053;

}
function vector_reduced_9880028(v_9880031, sampling_9880032) {
  var result_9880033 = ({length: 0, data: null});

    result_9880033.data = new Float32Array(LENGTH_VECTOR);
    result_9880033.length = (v_9880031 != null ? v_9880031.length : 0);
    var i_9880044 = 0;
    L1: do {
      var k_9880060 = 0;
      var colontmp__10140128 = 0;
      colontmp__10140128 = (v_9880031 != null ? (v_9880031.length-1) : -1);
      var res_10140129 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10140129 <= colontmp__10140128)) break L3;
            k_9880060 = res_10140129;
            L4: do {
              if (!((Math.trunc(k_9880060 % sampling_9880032) == 0))) {
              break L4;
              }
              
              check_value_9861264(result_9880033, "data", result_9880033.length, i_9880044, v_9880031, k_9880060);
              i_9880044 += 1;
            } while(false);
            res_10140129 += 1;
          }
      } while(false);
    } while(false);
    result_9880033.length = i_9880044;
    nimCopy(result_9880033, result_9880033, NTI9861018);

  return result_9880033;

}
function robust_interrupted_time_series_approximated(sampling_10140095, x_10140097, y_10140099, change_point_10140100, candidates_before_10140101, candidates_after_10140102) {
  var result_10140103 = ({before_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), after_change: ({mean_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0}), autoregressive_structure: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: ({autocorrelation: null, confidence_interval: 0.0}), n: 0})}), likelihood: ({change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}), parameter_differences: ({intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0})});

    nimCopy(result_10140103, robust_interrupted_time_series_model_10130220(vector_reduced_9880028(x_10140097, sampling_10140095), vector_reduced_9880028(y_10140099, sampling_10140095), (((change_point_10140100 / sampling_10140095))|0), (((candidates_before_10140101 / sampling_10140095))|0), (((candidates_after_10140102 / sampling_10140095))|0)), NTI10101880);

  return result_10140103;

}
var state_10141005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_10480231 = [null];
var local_instance_10480232 = [null];
function rotl_10141230(x_10141232, k_10141233) {
  var result_10141234 = 0;

    result_10141234 = ((x_10141232 << k_10141233) | ((x_10141232 >>> 0) >>> ((64 - k_10141233) >>> 0)));

  return result_10141234;

}
function next_10141258(r_10141261) {
  var result_10141262 = 0;

    var s0_10141263 = r_10141261.a0;
    var s1_10141264 = r_10141261.a1;
    result_10141262 = ((s0_10141263 + s1_10141264) >>> 0);
    s1_10141264 = (s1_10141264 ^ s0_10141263);
    r_10141261.a0 = ((rotl_10141230(s0_10141263, 55) ^ s1_10141264) ^ (s1_10141264 << 14));
    r_10141261.a1 = rotl_10141230(s1_10141264, 36);

  return result_10141262;

}
function rand_10145243(r_10145246, max_10145247) {
  var result_10145248 = 0;

  BeforeRet: do {
    if ((max_10145247 == 0)) {
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var x_10145249 = next_10141258(r_10145246);
          if ((x_10145249 <= ((4294967295 - (4294967295 % max_10145247)) >>> 0))) {
          result_10145248 = (x_10145249 % ((max_10145247 + 1) ));
          break BeforeRet;
          }
          
        }
    } while(false);
  } while (false);

  return result_10145248;

}
function rand_10145263(max_10145265) {
  var result_10145266 = 0;

    result_10145266 = rand_10145243(state_10141005[0], max_10145265);

  return result_10145266;

}
function format_value_11060001(result_11060004, result_11060004_Idx, value_11060005, specifier_11060006) {
    format_value_9800080(result_11060004, result_11060004_Idx, HEX24_10091002(value_11060005), specifier_11060006);

  
}
function format_value_10105002(result_10105005, result_10105005_Idx, value_10105006, specifier_10105007) {
    var Tmp1;

  BeforeRet: do {
    if (((specifier_10105007 != null ? specifier_10105007.length : 0) == 0)) {
    if (result_10105005[result_10105005_Idx] != null) { result_10105005[result_10105005_Idx] = (result_10105005[result_10105005_Idx]).concat(cstrToNimstr((value_10105006)+"")); } else { result_10105005[result_10105005_Idx] = cstrToNimstr((value_10105006)+"").slice(); };
    break BeforeRet;
    }
    
    var spec_10105008 = parse_standard_format_specifier_9755322(specifier_10105007, 0, false);
    var fmode_10105009 = 0;
    switch (spec_10105008.typ) {
    case 101:
    case 69:
      fmode_10105009 = 2;
      break;
    case 102:
    case 70:
      fmode_10105009 = 1;
      break;
    case 103:
    case 71:
      fmode_10105009 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_10105008.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    var f_10110002 = [nsuformatBiggestFloat(value_10105006, fmode_10105009, spec_10105008.precision, 46)];
    var sign_10110003 = false;
    if ((0.0 <= value_10105006)) {
    if (!((spec_10105008.sign == 45))) {
    sign_10110003 = true;
    if ((value_10105006 == 0.0)) {
    if (((1.0000000000000000e+000 / value_10105006) == Infinity)) {
    insert_335401(f_10110002, 0, nimCharToStr(spec_10105008.sign), 0);
    }
    
    }
    else {
    insert_335401(f_10110002, 0, nimCharToStr(spec_10105008.sign), 0);
    }
    
    }
    
    }
    else {
      sign_10110003 = true;
    }
    
    if (spec_10105008.padWithZero) {
    var sign_str_10110006 = [];
    if (sign_10110003) {
    sign_str_10110006 = nimCopy(null, nimCharToStr(f_10110002[0][0]), NTI112);
    f_10110002[0] = nimCopy(null, HEX5BHEX5D_4530068(f_10110002[0], HEX2EHEX2E_4530001(1, 1)), NTI112);
    }
    
    var to_fill_LENGTH_VECTOR0040 = ((spec_10105008.minimumWidth - (f_10110002[0] != null ? f_10110002[0].length : 0)) - (sign_10110003 ? 1:0));
    if ((0 < to_fill_LENGTH_VECTOR0040)) {
    f_10110002[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_LENGTH_VECTOR0040) || []).concat(f_10110002[0] || []), NTI112);
    }
    
    if (sign_10110003) {
    f_10110002[0] = nimCopy(null, (sign_str_10110006 || []).concat(f_10110002[0] || []), NTI112);
    }
    
    }
    
    if ((spec_10105008.align == 0)) {
    Tmp1 = 62;
    }
    else {
    Tmp1 = spec_10105008.align;
    }
    
    var align_LENGTH_VECTOR0041 = Tmp1;
    var res_LENGTH_VECTOR0042 = align_string_9755222(f_10110002[0], spec_10105008.minimumWidth, align_LENGTH_VECTOR0041, spec_10105008.fill);
    if ((ConstSet12[spec_10105008.typ] != undefined)) {
    if (result_10105005[result_10105005_Idx] != null) { result_10105005[result_10105005_Idx] = (result_10105005[result_10105005_Idx]).concat(nsuToUpperAsciiStr(res_LENGTH_VECTOR0042)); } else { result_10105005[result_10105005_Idx] = nsuToUpperAsciiStr(res_LENGTH_VECTOR0042).slice(); };
    }
    else {
    if (result_10105005[result_10105005_Idx] != null) { result_10105005[result_10105005_Idx] = (result_10105005[result_10105005_Idx]).concat(res_LENGTH_VECTOR0042); } else { result_10105005[result_10105005_Idx] = res_LENGTH_VECTOR0042.slice(); };
    }
    
  } while (false);

  
}
function HEX24_10102122(params_10102124) {
  var result_10102125 = null;

    var fmt_res_10102126 = [mnewString(0)];
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit("    slope: ")); } else { fmt_res_10102126[0] = makeNimstrLit("    slope: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.slope, makeNimstrLit(".3f"));
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_10102126[0] = makeNimstrLit(" (var: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.slope_variance, makeNimstrLit(".3f"));
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_10102126[0] = makeNimstrLit(", CI width: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.slope_width_confidence_interval, makeNimstrLit(".3f"));
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit(")\x0A    intercept: ")); } else { fmt_res_10102126[0] = makeNimstrLit(")\x0A    intercept: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.intercept, makeNimstrLit(".3f"));
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_10102126[0] = makeNimstrLit(" (var: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.intercept_variance, makeNimstrLit(".3f"));
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_10102126[0] = makeNimstrLit(", CI width: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.intercept_width_confidence_interval, makeNimstrLit(".3f"));
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit(")\x0A    R2: ")); } else { fmt_res_10102126[0] = makeNimstrLit(")\x0A    R2: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.R2, makeNimstrLit(".3f"));
    if (fmt_res_10102126[0] != null) { fmt_res_10102126[0] = (fmt_res_10102126[0]).concat(makeNimstrLit("\x0A    SSE: ")); } else { fmt_res_10102126[0] = makeNimstrLit("\x0A    SSE: "); };
    format_value_10105002(fmt_res_10102126, 0, params_10102124.residual_sum_squares, makeNimstrLit(".3f"));
    result_10102125 = nimCopy(null, fmt_res_10102126[0], NTI112);

  return result_10102125;

}
function add_quoted_11087801(s_11087804, s_11087804_Idx, x_11087805) {
    if (s_11087804[s_11087804_Idx] != null) { s_11087804[s_11087804_Idx] = (s_11087804[s_11087804_Idx]).concat(HEX24_10102122(x_11087805)); } else { s_11087804[s_11087804_Idx] = HEX24_10102122(x_11087805).slice(); };

  
}
function HEX24_11087201(x_11087204) {
  var result_11087205 = [null];

    result_11087205[0] = nimCopy(null, makeNimstrLit("("), NTI112);
    var first_element_11087206 = true;
    if (!(first_element_11087206)) {
    if (result_11087205[0] != null) { result_11087205[0] = (result_11087205[0]).concat(makeNimstrLit(", ")); } else { result_11087205[0] = makeNimstrLit(", "); };
    }
    
    if (result_11087205[0] != null) { result_11087205[0] = (result_11087205[0]).concat(makeNimstrLit("mean_structure")); } else { result_11087205[0] = makeNimstrLit("mean_structure"); };
    if (result_11087205[0] != null) { result_11087205[0] = (result_11087205[0]).concat(makeNimstrLit(": ")); } else { result_11087205[0] = makeNimstrLit(": "); };
    add_quoted_11087801(result_11087205, 0, x_11087204.mean_structure);
    first_element_11087206 = false;
    if (!(first_element_11087206)) {
    if (result_11087205[0] != null) { result_11087205[0] = (result_11087205[0]).concat(makeNimstrLit(", ")); } else { result_11087205[0] = makeNimstrLit(", "); };
    }
    
    if (result_11087205[0] != null) { result_11087205[0] = (result_11087205[0]).concat(makeNimstrLit("autoregressive_structure")); } else { result_11087205[0] = makeNimstrLit("autoregressive_structure"); };
    if (result_11087205[0] != null) { result_11087205[0] = (result_11087205[0]).concat(makeNimstrLit(": ")); } else { result_11087205[0] = makeNimstrLit(": "); };
    add_quoted_11087801(result_11087205, 0, x_11087204.autoregressive_structure);
    first_element_11087206 = false;
    if (result_11087205[0] != null) { result_11087205[0] = (result_11087205[0]).concat(makeNimstrLit(")")); } else { result_11087205[0] = makeNimstrLit(")"); };

  return result_11087205[0];

}
function add_quoted_11087001(s_11087004, s_11087004_Idx, x_11087005) {
    if (s_11087004[s_11087004_Idx] != null) { s_11087004[s_11087004_Idx] = (s_11087004[s_11087004_Idx]).concat(HEX24_11087201(x_11087005)); } else { s_11087004[s_11087004_Idx] = HEX24_11087201(x_11087005).slice(); };

  
}
function add_int_325201(result_325204, result_325204_Idx, x_325205) {
    if (result_325204[result_325204_Idx] != null) { result_325204[result_325204_Idx] = (result_325204[result_325204_Idx]).concat(cstrToNimstr((x_325205)+"")); } else { result_325204[result_325204_Idx] = cstrToNimstr((x_325205)+"").slice(); };

  
}
function add_quoted_11096401(s_11096404, s_11096404_Idx, x_11096405) {
    add_int_325201(s_11096404, s_11096404_Idx, x_11096405);

  
}
function collection_to_string_11096208(x_11096211, prefix_11096212, separator_11096213, suffix_11096214) {
  var result_11096215 = [null];

    result_11096215[0] = nimCopy(null, prefix_11096212, NTI112);
    var first_element_11096216 = true;
    L1: do {
      var value_11096223 = 0;
      var i_11121242 = 0;
      var l_11121243 = (x_11096211 != null ? x_11096211.length : 0);
      L2: do {
          L3: while (true) {
          if (!(i_11121242 < l_11121243)) break L3;
            value_11096223 = x_11096211[i_11121242];
            if (first_element_11096216) {
            first_element_11096216 = false;
            }
            else {
            if (result_11096215[0] != null) { result_11096215[0] = (result_11096215[0]).concat(separator_11096213); } else { result_11096215[0] = separator_11096213.slice(); };
            }
            
            add_quoted_11096401(result_11096215, 0, value_11096223);
            i_11121242 += 1;
          }
      } while(false);
    } while(false);
    if (result_11096215[0] != null) { result_11096215[0] = (result_11096215[0]).concat(suffix_11096214); } else { result_11096215[0] = suffix_11096214.slice(); };

  return result_11096215[0];

}
function HEX24_11096202(x_11096206) {
  var result_11096207 = null;

    result_11096207 = nimCopy(null, collection_to_string_11096208(x_11096206, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI112);

  return result_11096207;

}
function add_quoted_11096001(s_11096004, s_11096004_Idx, x_11096005) {
    if (s_11096004[s_11096004_Idx] != null) { s_11096004[s_11096004_Idx] = (s_11096004[s_11096004_Idx]).concat(HEX24_11096202(x_11096005)); } else { s_11096004[s_11096004_Idx] = HEX24_11096202(x_11096005).slice(); };

  
}
function HEX24_11095001(x_11095004) {
  var result_11095005 = [null];

    result_11095005[0] = nimCopy(null, makeNimstrLit("("), NTI112);
    var first_element_11095006 = true;
    if (!(first_element_11095006)) {
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(", ")); } else { result_11095005[0] = makeNimstrLit(", "); };
    }
    
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit("change_points")); } else { result_11095005[0] = makeNimstrLit("change_points"); };
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(": ")); } else { result_11095005[0] = makeNimstrLit(": "); };
    add_quoted_11096001(result_11095005, 0, x_11095004.change_points);
    first_element_11095006 = false;
    if (!(first_element_11095006)) {
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(", ")); } else { result_11095005[0] = makeNimstrLit(", "); };
    }
    
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit("loglikelihood")); } else { result_11095005[0] = makeNimstrLit("loglikelihood"); };
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(": ")); } else { result_11095005[0] = makeNimstrLit(": "); };
    add_quoted_10090801(result_11095005, 0, x_11095004.loglikelihood);
    first_element_11095006 = false;
    if (!(first_element_11095006)) {
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(", ")); } else { result_11095005[0] = makeNimstrLit(", "); };
    }
    
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit("best_loglikelihood")); } else { result_11095005[0] = makeNimstrLit("best_loglikelihood"); };
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(": ")); } else { result_11095005[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11095005, 0, x_11095004.best_loglikelihood);
    first_element_11095006 = false;
    if (!(first_element_11095006)) {
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(", ")); } else { result_11095005[0] = makeNimstrLit(", "); };
    }
    
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit("best_likelihood")); } else { result_11095005[0] = makeNimstrLit("best_likelihood"); };
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(": ")); } else { result_11095005[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11095005, 0, x_11095004.best_likelihood);
    first_element_11095006 = false;
    if (!(first_element_11095006)) {
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(", ")); } else { result_11095005[0] = makeNimstrLit(", "); };
    }
    
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit("best_time")); } else { result_11095005[0] = makeNimstrLit("best_time"); };
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(": ")); } else { result_11095005[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11095005, 0, x_11095004.best_time);
    first_element_11095006 = false;
    if (!(first_element_11095006)) {
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(", ")); } else { result_11095005[0] = makeNimstrLit(", "); };
    }
    
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit("best_index")); } else { result_11095005[0] = makeNimstrLit("best_index"); };
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(": ")); } else { result_11095005[0] = makeNimstrLit(": "); };
    add_quoted_11096401(result_11095005, 0, x_11095004.best_index);
    first_element_11095006 = false;
    if (result_11095005[0] != null) { result_11095005[0] = (result_11095005[0]).concat(makeNimstrLit(")")); } else { result_11095005[0] = makeNimstrLit(")"); };

  return result_11095005[0];

}
function add_quoted_11094801(s_11094804, s_11094804_Idx, x_11094805) {
    if (s_11094804[s_11094804_Idx] != null) { s_11094804[s_11094804_Idx] = (s_11094804[s_11094804_Idx]).concat(HEX24_11095001(x_11094805)); } else { s_11094804[s_11094804_Idx] = HEX24_11095001(x_11094805).slice(); };

  
}
function collection_to_string_11112816(x_11112819, prefix_11112820, separator_11112821, suffix_11112822) {
  var result_11112823 = [null];

    result_11112823[0] = nimCopy(null, prefix_11112820, NTI112);
    var first_element_11112824 = true;
    L1: do {
      var value_11112870 = 0.0;
      var i_11121250 = 0;
      if ((i_11121250 <= 1)) {
      L2: do {
          L3: while (true) {
          if (!true) break L3;
            value_11112870 = x_11112819[i_11121250];
            if (first_element_11112824) {
            first_element_11112824 = false;
            }
            else {
            if (result_11112823[0] != null) { result_11112823[0] = (result_11112823[0]).concat(separator_11112821); } else { result_11112823[0] = separator_11112821.slice(); };
            }
            
            add_quoted_10100401(result_11112823, 0, value_11112870);
            if ((1 <= i_11121250)) {
            break L2;
            }
            
            i_11121250 += 1;
          }
      } while(false);
      }
      
    } while(false);
    if (result_11112823[0] != null) { result_11112823[0] = (result_11112823[0]).concat(suffix_11112822); } else { result_11112823[0] = suffix_11112822.slice(); };

  return result_11112823[0];

}
function HEX24_11112809(x_11112814) {
  var result_11112815 = null;

    result_11112815 = nimCopy(null, collection_to_string_11112816(x_11112814, makeNimstrLit("["), makeNimstrLit(", "), makeNimstrLit("]")), NTI112);

  return result_11112815;

}
function add_quoted_11112601(s_11112604, s_11112604_Idx, x_11112605) {
    if (s_11112604[s_11112604_Idx] != null) { s_11112604[s_11112604_Idx] = (s_11112604[s_11112604_Idx]).concat(HEX24_11112809(x_11112605)); } else { s_11112604[s_11112604_Idx] = HEX24_11112809(x_11112605).slice(); };

  
}
function HEX24_11110601(x_11110604) {
  var result_11110605 = [null];

    result_11110605[0] = nimCopy(null, makeNimstrLit("("), NTI112);
    var first_element_11110606 = true;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("intercept")); } else { result_11110605[0] = makeNimstrLit("intercept"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.intercept);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("intercept_variance")); } else { result_11110605[0] = makeNimstrLit("intercept_variance"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.intercept_variance);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("intercept_confidence_interval")); } else { result_11110605[0] = makeNimstrLit("intercept_confidence_interval"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_11112601(result_11110605, 0, x_11110604.intercept_confidence_interval);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("intercept_width_confidence_interval")); } else { result_11110605[0] = makeNimstrLit("intercept_width_confidence_interval"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.intercept_width_confidence_interval);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("intercept_p_value")); } else { result_11110605[0] = makeNimstrLit("intercept_p_value"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.intercept_p_value);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("slope")); } else { result_11110605[0] = makeNimstrLit("slope"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.slope);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("slope_variance")); } else { result_11110605[0] = makeNimstrLit("slope_variance"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.slope_variance);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("slope_confidence_interval")); } else { result_11110605[0] = makeNimstrLit("slope_confidence_interval"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_11112601(result_11110605, 0, x_11110604.slope_confidence_interval);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("slope_width_confidence_interval")); } else { result_11110605[0] = makeNimstrLit("slope_width_confidence_interval"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.slope_width_confidence_interval);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("slope_p_value")); } else { result_11110605[0] = makeNimstrLit("slope_p_value"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.slope_p_value);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("autoregressive_slope")); } else { result_11110605[0] = makeNimstrLit("autoregressive_slope"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.autoregressive_slope);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("autoregressive_slope_variance")); } else { result_11110605[0] = makeNimstrLit("autoregressive_slope_variance"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.autoregressive_slope_variance);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("autoregressive_slope_confidence_interval")); } else { result_11110605[0] = makeNimstrLit("autoregressive_slope_confidence_interval"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_11112601(result_11110605, 0, x_11110604.autoregressive_slope_confidence_interval);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("autoregressive_slope_width_confidence_interval")); } else { result_11110605[0] = makeNimstrLit("autoregressive_slope_width_confidence_interval"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.autoregressive_slope_width_confidence_interval);
    first_element_11110606 = false;
    if (!(first_element_11110606)) {
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(", ")); } else { result_11110605[0] = makeNimstrLit(", "); };
    }
    
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit("autoregressive_slope_p_value")); } else { result_11110605[0] = makeNimstrLit("autoregressive_slope_p_value"); };
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(": ")); } else { result_11110605[0] = makeNimstrLit(": "); };
    add_quoted_10100401(result_11110605, 0, x_11110604.autoregressive_slope_p_value);
    first_element_11110606 = false;
    if (result_11110605[0] != null) { result_11110605[0] = (result_11110605[0]).concat(makeNimstrLit(")")); } else { result_11110605[0] = makeNimstrLit(")"); };

  return result_11110605[0];

}
function add_quoted_11110401(s_11110404, s_11110404_Idx, x_11110405) {
    if (s_11110404[s_11110404_Idx] != null) { s_11110404[s_11110404_Idx] = (s_11110404[s_11110404_Idx]).concat(HEX24_11110601(x_11110405)); } else { s_11110404[s_11110404_Idx] = HEX24_11110601(x_11110405).slice(); };

  
}
function HEX24_11084614(x_11084617) {
  var result_11084618 = [null];

    result_11084618[0] = nimCopy(null, makeNimstrLit("("), NTI112);
    var first_element_11084619 = true;
    if (!(first_element_11084619)) {
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(", ")); } else { result_11084618[0] = makeNimstrLit(", "); };
    }
    
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit("before_change")); } else { result_11084618[0] = makeNimstrLit("before_change"); };
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(": ")); } else { result_11084618[0] = makeNimstrLit(": "); };
    add_quoted_11087001(result_11084618, 0, x_11084617.before_change);
    first_element_11084619 = false;
    if (!(first_element_11084619)) {
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(", ")); } else { result_11084618[0] = makeNimstrLit(", "); };
    }
    
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit("after_change")); } else { result_11084618[0] = makeNimstrLit("after_change"); };
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(": ")); } else { result_11084618[0] = makeNimstrLit(": "); };
    add_quoted_11087001(result_11084618, 0, x_11084617.after_change);
    first_element_11084619 = false;
    if (!(first_element_11084619)) {
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(", ")); } else { result_11084618[0] = makeNimstrLit(", "); };
    }
    
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit("likelihood")); } else { result_11084618[0] = makeNimstrLit("likelihood"); };
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(": ")); } else { result_11084618[0] = makeNimstrLit(": "); };
    add_quoted_11094801(result_11084618, 0, x_11084617.likelihood);
    first_element_11084619 = false;
    if (!(first_element_11084619)) {
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(", ")); } else { result_11084618[0] = makeNimstrLit(", "); };
    }
    
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit("parameter_differences")); } else { result_11084618[0] = makeNimstrLit("parameter_differences"); };
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(": ")); } else { result_11084618[0] = makeNimstrLit(": "); };
    add_quoted_11110401(result_11084618, 0, x_11084617.parameter_differences);
    first_element_11084619 = false;
    if (result_11084618[0] != null) { result_11084618[0] = (result_11084618[0]).concat(makeNimstrLit(")")); } else { result_11084618[0] = makeNimstrLit(")"); };

  return result_11084618[0];

}
function test_model_change_point_11008040(change_point_11008042, candidates_11008043, verbose_11008044) {
    rawEcho(makeNimstrLit("Robust Interrupted Time Series Model v3.0\x0A"));
    rawEcho(makeNimstrLit("Boot sample test"));
    L1: do {
      var HEX3Atmp_11010417 = [1.0000000000000000e+000, 2.0000000000000000e+000, 3.0000000000000000e+000, 4.0000000000000000e+000, 5.0000000000000000e+000, 6.0000000000000000e+000, 7.0000000000000000e+000, 8.0000000000000000e+000, 9.0000000000000000e+000, 1.0000000000000000e+001, 1.1000000000000000e+001, 1.2000000000000000e+001, 1.3000000000000000e+001, 1.4000000000000000e+001, 1.5000000000000000e+001, 1.6000000000000000e+001, 1.7000000000000000e+001, 1.8000000000000000e+001, 1.9000000000000000e+001, 2.0000000000000000e+001];
      var iHEX60gensym11008066_11015003 = 0;
      var resultHEX60gensym11008067_11020011 = new_seq_9875005((HEX3Atmp_11010417 != null ? HEX3Atmp_11010417.length : 0));
      L2: do {
        var it_11025007 = 0.0;
        var i_11121217 = 0;
        var l_11121218 = (HEX3Atmp_11010417 != null ? HEX3Atmp_11010417.length : 0);
        L3: do {
            L4: while (true) {
            if (!(i_11121217 < l_11121218)) break L4;
              it_11025007 = HEX3Atmp_11010417[i_11121217];
              resultHEX60gensym11008067_11020011[iHEX60gensym11008066_11015003] = it_11025007;
              iHEX60gensym11008066_11015003 += 1;
              i_11121217 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
    var x_11025016 = nimCopy(null, resultHEX60gensym11008067_11020011, NTI9875009);
    L5: do {
      var HEX3Atmp_11040432 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200];
      var iHEX60gensym11025041_11045003 = 0;
      var resultHEX60gensym11025042_11050011 = new_seq_9875005((HEX3Atmp_11040432 != null ? HEX3Atmp_11040432.length : 0));
      L6: do {
        var it_11055007 = 0;
        var i_11121224 = 0;
        var l_11121225 = (HEX3Atmp_11040432 != null ? HEX3Atmp_11040432.length : 0);
        L7: do {
            L8: while (true) {
            if (!(i_11121224 < l_11121225)) break L8;
              it_11055007 = HEX3Atmp_11040432[i_11121224];
              resultHEX60gensym11025042_11050011[iHEX60gensym11025041_11045003] = it_11055007;
              iHEX60gensym11025041_11045003 += 1;
              i_11121224 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
    var y_11055016 = nimCopy(null, resultHEX60gensym11025042_11050011, NTI9875009);
    L9: do {
      var t_11055031 = 0;
      var colontmp__11121230 = 0;
      colontmp__11121230 = (x_11025016 != null ? (x_11025016.length-1) : -1);
      var res_11121231 = 0;
      L10: do {
          L11: while (true) {
          if (!(res_11121231 <= colontmp__11121230)) break L11;
            t_11055031 = res_11121231;
            y_11055016[t_11055031] = (y_11055016[t_11055031] + ((0.0 * rand_10145263(1000)) / 1.0000000000000000e+003));
            res_11121231 += 1;
          }
      } while(false);
    } while(false);
    if (verbose_11008044) {
    var fmt_res_11055033 = [mnewString(0)];
    if (fmt_res_11055033[0] != null) { fmt_res_11055033[0] = (fmt_res_11055033[0]).concat(makeNimstrLit("X: ")); } else { fmt_res_11055033[0] = makeNimstrLit("X: "); };
    format_value_11060001(fmt_res_11055033, 0, x_11025016, []);
    rawEcho(fmt_res_11055033[0]);
    var fmt_res_11060031 = [mnewString(0)];
    if (fmt_res_11060031[0] != null) { fmt_res_11060031[0] = (fmt_res_11060031[0]).concat(makeNimstrLit("Y: ")); } else { fmt_res_11060031[0] = makeNimstrLit("Y: "); };
    format_value_11060001(fmt_res_11060031, 0, y_11055016, []);
    rawEcho(fmt_res_11060031[0]);
    }
    
    var candidates_after_11065012 = candidates_11008043;
    var candidates_before_11065013 = candidates_11008043;
    var model_11065014 = robust_interrupted_time_series(x_11025016, y_11055016, change_point_11008042, candidates_before_11065013, candidates_after_11065012);
    if (verbose_11008044) {
    rawEcho(HEX24_11084614(model_11065014));
    }
    

  
}
test_model_change_point_11008040(7, 5, true);
exports.robust_interrupted_time_series = (X, Y, change_point, candidates_before, candidates_after) => {LENGTH_VECTOR = X.length; return robust_interrupted_time_series(X, Y, change_point, candidates_before, candidates_after)}; 
exports.robust_interrupted_time_series_approximated = (sampling, X, Y, change_point, candidates_before, candidates_after) => {LENGTH_VECTOR = X.length; return robust_interrupted_time_series_approximated(sampling, X, Y, change_point, candidates_before, candidates_after)}; 
exports.fix_vector = (X) => {LENGTH_VECTOR = X.length; return fix_vector(X)}
