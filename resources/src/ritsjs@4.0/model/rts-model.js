var LENGTH_VECTOR = 1012;
/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI184263 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI184274 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148624 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI184062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI168878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI168816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI168818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI169020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156673 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI156671 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI156670 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156680 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156656 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156648 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156640 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156635 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156731 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156729 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156727 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI17403 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI156665 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156661 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI156628 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI156623 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156615 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI156610 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI153612 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI153611 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI153559 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI149541 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI3896 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3804 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI153401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI126 = {size: 0,kind: 37,base: null,node: null,finalizer: null};
var NTI148022 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI148023 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148018 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI148022.base = NTI126;
NTI148023.base = NTI148022;
var NNI148018 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "length", len: 0, typ: NTI104, name: "length", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI148023, name: "data", sons: null}]};
NTI148018.node = NNI148018;
NTI3804.base = NTI3896;
var NNI153401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI124, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3804, name: "Field1", sons: null}]};
NTI153401.node = NNI153401;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3852.base = NTI3828;
NTI149541.base = NTI124;
NTI153559.base = NTI128;
NTI153612.base = NTI124;
var NNI153611 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "autocorrelation", len: 0, typ: NTI153612, name: "autocorrelation", sons: null}, 
{kind: 1, offset: "confidence_interval", len: 0, typ: NTI124, name: "confidence_interval", sons: null}]};
NTI153611.node = NNI153611;
NTI156615.base = NTI124;
NTI156623.base = NTI124;
NTI156628.base = NTI124;
var NNI156610 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI124, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI124, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI156615, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI124, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_p_value", len: 0, typ: NTI124, name: "intercept_p_value", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI124, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI124, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI156623, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI124, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_p_value", len: 0, typ: NTI124, name: "slope_p_value", sons: null}, 
{kind: 1, offset: "R2", len: 0, typ: NTI124, name: "R2", sons: null}, 
{kind: 1, offset: "residual", len: 0, typ: NTI156628, name: "residual", sons: null}, 
{kind: 1, offset: "residual_sum_squares", len: 0, typ: NTI124, name: "residual_sum_squares", sons: null}, 
{kind: 1, offset: "residual_variance", len: 0, typ: NTI124, name: "residual_variance", sons: null}, 
{kind: 1, offset: "autocorrelation_function", len: 0, typ: NTI153611, name: "autocorrelation_function", sons: null}, 
{kind: 1, offset: "n", len: 0, typ: NTI104, name: "n", sons: null}]};
NTI156610.node = NNI156610;
var NNI156661 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "mean_structure", len: 0, typ: NTI156610, name: "mean_structure", sons: null}, 
{kind: 1, offset: "autoregressive_structure", len: 0, typ: NTI156610, name: "autoregressive_structure", sons: null}]};
NTI156661.node = NNI156661;
var NNI156665 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "loglikelihood", len: 0, typ: NTI124, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "before_change", len: 0, typ: NTI156661, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI156661, name: "after_change", sons: null}]};
NTI156665.node = NNI156665;
NTI156727.base = NTI124;
NTI156729.base = NTI124;
NTI156731.base = NTI124;
NTI156640.base = NTI124;
NTI156648.base = NTI124;
NTI156656.base = NTI124;
var NNI156635 = {kind: 2, len: 15, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "intercept", len: 0, typ: NTI124, name: "intercept", sons: null}, 
{kind: 1, offset: "intercept_variance", len: 0, typ: NTI124, name: "intercept_variance", sons: null}, 
{kind: 1, offset: "intercept_confidence_interval", len: 0, typ: NTI156640, name: "intercept_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_width_confidence_interval", len: 0, typ: NTI124, name: "intercept_width_confidence_interval", sons: null}, 
{kind: 1, offset: "intercept_p_value", len: 0, typ: NTI124, name: "intercept_p_value", sons: null}, 
{kind: 1, offset: "slope", len: 0, typ: NTI124, name: "slope", sons: null}, 
{kind: 1, offset: "slope_variance", len: 0, typ: NTI124, name: "slope_variance", sons: null}, 
{kind: 1, offset: "slope_confidence_interval", len: 0, typ: NTI156648, name: "slope_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_width_confidence_interval", len: 0, typ: NTI124, name: "slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "slope_p_value", len: 0, typ: NTI124, name: "slope_p_value", sons: null}, 
{kind: 1, offset: "autoregressive_slope", len: 0, typ: NTI124, name: "autoregressive_slope", sons: null}, 
{kind: 1, offset: "autoregressive_slope_variance", len: 0, typ: NTI124, name: "autoregressive_slope_variance", sons: null}, 
{kind: 1, offset: "autoregressive_slope_confidence_interval", len: 0, typ: NTI156656, name: "autoregressive_slope_confidence_interval", sons: null}, 
{kind: 1, offset: "autoregressive_slope_width_confidence_interval", len: 0, typ: NTI124, name: "autoregressive_slope_width_confidence_interval", sons: null}, 
{kind: 1, offset: "autoregressive_slope_p_value", len: 0, typ: NTI124, name: "autoregressive_slope_p_value", sons: null}]};
NTI156635.node = NNI156635;
NTI156671.base = NTI104;
NTI156673.base = NTI124;
var NNI156670 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "change_points", len: 0, typ: NTI156671, name: "change_points", sons: null}, 
{kind: 1, offset: "loglikelihood", len: 0, typ: NTI156673, name: "loglikelihood", sons: null}, 
{kind: 1, offset: "best_loglikelihood", len: 0, typ: NTI124, name: "best_loglikelihood", sons: null}, 
{kind: 1, offset: "best_likelihood", len: 0, typ: NTI124, name: "best_likelihood", sons: null}, 
{kind: 1, offset: "best_time", len: 0, typ: NTI124, name: "best_time", sons: null}, 
{kind: 1, offset: "best_index", len: 0, typ: NTI104, name: "best_index", sons: null}]};
NTI156670.node = NNI156670;
var NNI156680 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "before_change", len: 0, typ: NTI156661, name: "before_change", sons: null}, 
{kind: 1, offset: "after_change", len: 0, typ: NTI156661, name: "after_change", sons: null}, 
{kind: 1, offset: "likelihood", len: 0, typ: NTI156670, name: "likelihood", sons: null}, 
{kind: 1, offset: "parameter_differences", len: 0, typ: NTI156635, name: "parameter_differences", sons: null}]};
NTI156680.node = NNI156680;
NTI169020.base = NTI112;
NTI168816.base = NTI168878;
var NNI168818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI168816, name: "nanosecond", sons: null}]};
NTI168818.node = NNI168818;
NTI184062.base = NTI128;
NTI148624.base = NTI124;
NTI184274.base = NTI184263;

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		throw e_15818;

	
}
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
		var table_ppf_153558 = nimCopy(null, [1.0000000000000001e+50, 1.2710000000000001e+01, 4.3029999999999999e+00, 3.1819999999999999e+00, 2.7759999999999998e+00, 2.5710000000000002e+00, 2.4470000000000001e+00, 2.3650000000000002e+00, 2.3060000000000000e+00, 2.2620000000000000e+00, 2.2280000000000002e+00, 2.2010000000000001e+00, 2.1789999999999998e+00, 2.1600000000000001e+00, 2.1450000000000000e+00, 2.1309999999999998e+00, 2.1200000000000001e+00, 2.1099999999999999e+00, 2.1010000000000000e+00, 2.0930000000000000e+00, 2.0859999999999999e+00, 2.0800000000000001e+00, 2.0739999999999998e+00, 2.0690000000000000e+00, 2.0640000000000001e+00, 2.0600000000000001e+00, 2.0560000000000000e+00, 2.0520000000000000e+00, 2.0480000000000000e+00, 2.0449999999999999e+00, 2.0419999999999998e+00, 2.0209999999999999e+00, 2.0089999999999999e+00, 2.0000000000000000e+00, 1.9900000000000000e+00, 1.9840000000000000e+00, 1.9800000000000000e+00, 1.9600000000000000e+00], NTI153559);
		var unit_weights_169017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI169020);
var ConstSet12 = setConstr([65, 90]);
var nimvm_7173 = false;
process.exitCode = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];

function classify_29030(x_29032) {
	var result_29033 = 0;

	BeforeRet: do {
		if ((x_29032 == 0.0)) {
		if (((1.0000000000000000e+00 / x_29032) == Infinity)) {
		result_29033 = 2;
		break BeforeRet;
		}
		else {
			result_29033 = 3;
			break BeforeRet;
		}
		
		}
		
		if (((x_29032 * 5.0000000000000000e-01) == x_29032)) {
		if ((0.0 < x_29032)) {
		result_29033 = 5;
		break BeforeRet;
		}
		else {
			result_29033 = 6;
			break BeforeRet;
		}
		
		}
		
		if (!((x_29032 == x_29032))) {
		result_29033 = 4;
		break BeforeRet;
		}
		
		result_29033 = 0;
		break BeforeRet;
	} while (false);

	return result_29033;

}

function check_value_148145(data_148150, data_148150_Idx, length_148152, idx_148154, w_148156, w_idx_148158) {
			var Tmp1;

		var v_148159 = w_148156[w_idx_148158];
			if ((((classify_29030(v_148159) == 4) || (classify_29030(v_148159) == 5)) || (classify_29030(v_148159) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_148159 * 1.0000000000000000e+01) / 1.0000000000000000e+01) == v_148159));			}		if (Tmp1) {
		if ((idx_148154 == 0)) {
		data_148150[data_148150_Idx][idx_148154] = w_148156[(w_idx_148158 + 1)];
		}
		else {
		if ((idx_148154 == (length_148152 - 1))) {
		data_148150[data_148150_Idx][idx_148154] = w_148156[(w_idx_148158 - 1)];
		}
		else {
			data_148150[data_148150_Idx][idx_148154] = (5.0000000000000000e-01 * (w_148156[(w_idx_148158 - 1)] + w_148156[(w_idx_148158 + 1)]));
		}
		}
		}
		else {
			data_148150[data_148150_Idx][idx_148154] = v_148159;
		}
		

	
}

function fix_vector(v_148096) {
	var result_148098 = [null];

		var length_148106 = (v_148096 != null ? v_148096.length : 0);
		rawEcho(cstrToNimstr((length_148106)+""));
		result_148098[0] = new Array(length_148106); for (var i=0;i<length_148106;++i) {result_148098[0][i]=0.0;}		var i_148119 = 0;
		L1: do {
			var k_148143 = 0;
			var colontmp__148216 = 0;
			colontmp__148216 = (v_148096 != null ? (v_148096.length-1) : -1);
			var res_148219 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_148219 <= colontmp__148216)) break L3;
						k_148143 = res_148219;
						check_value_148145(result_148098, 0, length_148106, i_148119, v_148096, k_148143);
						i_148119 += 1;
						res_148219 += 1;
					}
			} while(false);
		} while(false);

	return result_148098[0];

}

function check_value_148280(data_148285, data_148285_Idx, length_148287, idx_148289, w_148291, w_idx_148293) {
			var Tmp1;

		var v_148294 = w_148291[w_idx_148293];
			if ((((classify_29030(v_148294) == 4) || (classify_29030(v_148294) == 5)) || (classify_29030(v_148294) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_148294 * 1.0000000000000000e+01) / 1.0000000000000000e+01) == v_148294));			}		if (Tmp1) {
		if ((idx_148289 == 0)) {
		data_148285[data_148285_Idx][idx_148289] = w_148291[(w_idx_148293 + 1)];
		}
		else {
		if ((idx_148289 == (length_148287 - 1))) {
		data_148285[data_148285_Idx][idx_148289] = w_148291[(w_idx_148293 - 1)];
		}
		else {
			data_148285[data_148285_Idx][idx_148289] = (5.0000000000000000e-01 * (w_148291[(w_idx_148293 - 1)] + w_148291[(w_idx_148293 + 1)]));
		}
		}
		}
		else {
			data_148285[data_148285_Idx][idx_148289] = v_148294;
		}
		

	
}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function vector_148236(v_148239) {
	var result_148240 = {length: 0, data: null};

		result_148240.data = new Float32Array(LENGTH_VECTOR);
		result_148240.length = (v_148239 != null ? v_148239.length : 0);
		var i_148255 = 0;
		L1: do {
			var k_148278 = 0;
			var colontmp__148343 = 0;
			colontmp__148343 = (v_148239 != null ? (v_148239.length-1) : -1);
			var res_148346 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_148346 <= colontmp__148343)) break L3;
						k_148278 = res_148346;
						check_value_148280(result_148240, "data", result_148240.length, i_148255, v_148239, k_148278);
						i_148255 += 1;
						res_148346 += 1;
					}
			} while(false);
		} while(false);
		result_148240.length = i_148255;
		nimCopy(result_148240, result_148240, NTI148018);

	return result_148240;

}

function new_seq_148619(len_148623) {
	var result_148625 = null;

		result_148625 = new Array(len_148623); for (var i=0;i<len_148623;++i) {result_148625[i]=0.0;}
	return result_148625;

}

function vector_148363(v_148366) {
	var result_148367 = {length: 0, data: null};

		L1: do {
			var i_148610 = 0;
			var result_148650 = new_seq_148619((v_148366 != null ? v_148366.length : 0));
			L2: do {
				var it_148658 = 0;
				var i_148675 = 0;
				L3: do {
						L4: while (true) {
						if (!(i_148675 < (v_148366 != null ? v_148366.length : 0))) break L4;
							it_148658 = v_148366[i_148675];
							result_148650[i_148610] = it_148658;
							i_148610 += 1;
							i_148675 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		nimCopy(result_148367, vector_148236(result_148650), NTI148018);

	return result_148367;

}

function high_148797(v_148799) {
	var result_148800 = 0;

		result_148800 = (v_148799.length - 1);

	return result_148800;

}

function sum_152965(x_152970) {
	var result_152971 = 0.0;

		L1: do {
			var i_153010 = 0.0;
			var i_153014 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_153014 < (x_152970 != null ? x_152970.length : 0))) break L3;
						i_153010 = x_152970[i_153014];
						result_152971 = (result_152971 + i_153010);
						i_153014 += 1;
					}
			} while(false);
		} while(false);

	return result_152971;

}

function sum_152959(v_152961) {
	var result_152962 = 0.0;

		result_152962 = sum_152965(v_152961.data);

	return result_152962;

}

function len_148780(v_148782) {
	var result_148783 = 0;

		result_148783 = v_148782.length;

	return result_148783;

}

function mean_153041(v_153043) {
	var result_153044 = 0.0;

		result_153044 = (sum_152959(v_153043) / len_148780(v_153043));

	return result_153044;

}

function low_148814(v_148816) {
	var result_148817 = 0;

		result_148817 = 0;

	return result_148817;

}

function HEX5BHEX5DHEX3D_150014(v_150017, i_150018, val_150019) {
		if ((v_150017.length <= i_150018)) {
		v_150017.length = (i_150018 + 1);
		}
		
		v_150017.data[i_150018] = val_150019;

	
}

function HEX5BHEX5D_149595(v_149597, i_149598) {
	var result_149599 = 0.0;

		result_149599 = v_149597.data[i_149598];

	return result_149599;

}

function HEX2EHEX2A_152156(v_152158, w_152159) {
	var result_152160 = [{length: 0, data: null}];

		result_152160[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_152177 = 0;
			var colontmp__152180 = 0;
			var colontmp__152181 = 0;
			colontmp__152180 = low_148814(v_152158);
			colontmp__152181 = high_148797(v_152158);
			var res_152184 = colontmp__152180;
			L2: do {
					L3: while (true) {
					if (!(res_152184 <= colontmp__152181)) break L3;
						i_152177 = res_152184;
						HEX5BHEX5DHEX3D_150014(result_152160[0], i_152177, (HEX5BHEX5D_149595(v_152158, i_152177) * HEX5BHEX5D_149595(w_152159, i_152177)));
						res_152184 += 1;
					}
			} while(false);
		} while(false);

	return result_152160[0];

}

function HEX2AHEX3D_144887(x_144892, x_144892_Idx, y_144894) {
		x_144892[x_144892_Idx] = (x_144892[x_144892_Idx] * y_144894);

	
}

function HEX5E_153081(x_153085, y_153087) {
	var result_153088 = [0.0];

		var colontmp__156698 = {Field0: 0.0, Field1: 0};
		var x_153402 = [0.0];
		var y_153403 = 0;
		nimCopy(colontmp__156698, {Field0: x_153085, Field1: y_153087}, NTI153401);
		x_153402[0] = colontmp__156698["Field0"];
		y_153403 = colontmp__156698["Field1"];
		result_153088[0] = 1.0000000000000000e+00;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_153403 & 1) == 0))) {
					HEX2AHEX3D_144887(result_153088, 0, x_153402[0]);
					}
					
					y_153403 = ((y_153403 >>> 0) >>> 1);
					if ((y_153403 == 0)) {
					break L1;
					}
					
					HEX2AHEX3D_144887(x_153402, 0, x_153402[0]);
				}
		} while(false);

	return result_153088[0];

}

function variance_153076(v_153078) {
	var result_153079 = 0.0;

		result_153079 = ((sum_152959(HEX2EHEX2A_152156(v_153078, v_153078)) / len_148780(v_153078)) - HEX5E_153081(mean_153041(v_153078), 2));

	return result_153079;

}

function HEX5BHEX5D_150414(v_150416, idx_150424) {
	var result_150425 = {length: 0, data: null};

		result_150425.data = new Float32Array(LENGTH_VECTOR);
		var k_150435 = 0;
		L1: do {
			var i_150474 = 0;
			L2: do {
				var x_150814 = 0;
				var colontmp__150816 = 0;
				var colontmp__150818 = 0;
				colontmp__150816 = idx_150424.a;
				colontmp__150818 = idx_150424.b;
				var res_150820 = colontmp__150816;
				L3: do {
						L4: while (true) {
						if (!(res_150820 <= colontmp__150818)) break L4;
							x_150814 = res_150820;
							i_150474 = x_150814;
							result_150425.data[k_150435] = v_150416.data[i_150474];
							k_150435 += 1;
							res_150820 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_150425.length = k_150435;

	return result_150425;

}

function HEX2EHEX2E_57828(a_57833, b_57835) {
	var result_57843 = {a: 0, b: 0};

		result_57843.a = a_57833;
		result_57843.b = b_57835;

	return result_57843;

}

function HEX2D_152028(v_152030, k_152031) {
	var result_152032 = [{length: 0, data: null}];

		result_152032[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_152049 = 0;
			var colontmp__152052 = 0;
			var colontmp__152053 = 0;
			colontmp__152052 = low_148814(v_152030);
			colontmp__152053 = high_148797(v_152030);
			var res_152056 = colontmp__152052;
			L2: do {
					L3: while (true) {
					if (!(res_152056 <= colontmp__152053)) break L3;
						i_152049 = res_152056;
						HEX5BHEX5DHEX3D_150014(result_152032[0], i_152049, (HEX5BHEX5D_149595(v_152030, i_152049) - k_152031));
						res_152056 += 1;
					}
			} while(false);
		} while(false);

	return result_152032[0];

}

function acf_153645(x_153647, max_lag_153648) {
	var result_153649 = [{length: 0, data: null}];

		result_153649[0].data = new Float32Array(LENGTH_VECTOR);
		var n_153658 = high_148797(x_153647);
		var u_153659 = mean_153041(x_153647);
		var s2_153660 = variance_153076(x_153647);
		HEX5BHEX5DHEX3D_150014(result_153649[0], 0, 1.0000000000000000e+00);
		L1: do {
			var h_153673 = 0;
			var colontmp__153701 = 0;
			colontmp__153701 = nimMin(max_lag_153648, n_153658);
			var res_153704 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_153704 <= colontmp__153701)) break L3;
						h_153673 = res_153704;
						var a_153686 = HEX5BHEX5D_150414(x_153647, HEX2EHEX2E_57828(0, (n_153658 - h_153673)));
						var b_153697 = HEX5BHEX5D_150414(x_153647, HEX2EHEX2E_57828(h_153673, n_153658));
						HEX5BHEX5DHEX3D_150014(result_153649[0], h_153673, ((mean_153041(HEX2EHEX2A_152156(HEX2D_152028(a_153686, u_153659), HEX2D_152028(b_153697, u_153659))) + 1.0000000000000000e-10) / ((n_153658 * s2_153660) + 1.0000000000000000e-10)));
						res_153704 += 1;
					}
			} while(false);
		} while(false);

	return result_153649[0];

}

function parse_saturated_natural_47485(s_47487, b_47489, b_47489_Idx, start_47490) {
			var Tmp1;
					var Tmp4;

	var result_47492 = 0;

		var i_47493 = start_47490;
		if (((i_47493 < (s_47487 != null ? s_47487.length : 0)) && (s_47487[i_47493] == 43))) {
		i_47493 += 1;
		}
		
			if (!(i_47493 < (s_47487 != null ? s_47487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_47487[i_47493]] != undefined);			}		if (Tmp1) {
		b_47489[b_47489_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_47493 < (s_47487 != null ? s_47487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_47487[i_47493]] != undefined);					}				if (!Tmp4) break L3;
					var c_47535 = (s_47487[i_47493] - 48);
					if ((b_47489[b_47489_Idx] <= Math.trunc((2147483647 - c_47535) / 10))) {
					b_47489[b_47489_Idx] = ((b_47489[b_47489_Idx] * 10) + c_47535);
					}
					else {
						b_47489[b_47489_Idx] = 2147483647;
					}
					
					i_47493 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_47493 < (s_47487 != null ? s_47487.length : 0)) && (s_47487[i_47493] == 95))) break L6;
								i_47493 += 1;
							}
					} while(false);
				}
		} while(false);
		result_47492 = (i_47493 - start_47490);
		}
		

	return result_47492;

}

function HEX5BHEX5D_90105(s_90110, x_90113) {
	var result_90114 = null;

		var a_90201 = x_90113.a;
		var l_90401 = ((((s_90110 != null ? s_90110.length : 0) - x_90113.b) - a_90201) + 1);
		result_90114 = nimCopy(null, mnewString(l_90401), NTI138);
		L1: do {
			var i_90411 = 0;
			var i_90423 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_90423 < l_90401)) break L3;
						i_90411 = i_90423;
						result_90114[i_90411] = s_90110[(i_90411 + a_90201)];
						i_90423 += 1;
					}
			} while(false);
		} while(false);

	return result_90114;

}

function HEX2EHEX2E_90053(a_90058, b_90060) {
	var result_90068 = {a: 0, b: 0};

		result_90068.a = a_90058;
		result_90068.b = b_90060;

	return result_90068;

}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function parse_standard_format_specifier_146928(s_146930, start_146931, ignore_unknown_suffix_146933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_146934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_146934.fill = 32;
		result_146934.align = 0;
		result_146934.sign = 45;
		var i_146937 = start_146931;
		if ((((i_146937 + 1) < (s_146930 != null ? s_146930.length : 0)) && (ConstSet2[s_146930[(i_146937 + 1)]] != undefined))) {
		result_146934.fill = s_146930[i_146937];
		result_146934.align = s_146930[(i_146937 + 1)];
		i_146937 += 2;
		}
		else {
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (ConstSet3[s_146930[i_146937]] != undefined))) {
		result_146934.align = s_146930[i_146937];
		i_146937 += 1;
		}
		}
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (ConstSet4[s_146930[i_146937]] != undefined))) {
		result_146934.sign = s_146930[i_146937];
		i_146937 += 1;
		}
		
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 35))) {
		result_146934.alternateForm = true;
		i_146937 += 1;
		}
		
			if (!(((i_146937 + 1) < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_146930[(i_146937 + 1)]] != undefined);			}		if (Tmp1) {
		result_146934.padWithZero = true;
		i_146937 += 1;
		}
		
		var parsed_length_147022 = parse_saturated_natural_47485(s_146930, result_146934, "minimumWidth", i_146937);
		i_146937 += parsed_length_147022;
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 46))) {
		i_146937 += 1;
		var parsed_length_b_147042 = parse_saturated_natural_47485(s_146930, result_146934, "precision", i_146937);
		i_146937 += parsed_length_b_147042;
		}
		else {
			result_146934.precision = -1;
		}
		
			if (!(i_146937 < (s_146930 != null ? s_146930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_146930[i_146937]] != undefined);			}		if (Tmp2) {
		result_146934.typ = s_146930[i_146937];
		i_146937 += 1;
		}
		
		result_146934.endPosition = i_146937;
			if (!!((i_146937 == (s_146930 != null ? s_146930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_146933);			}		if (Tmp3) {
		var e_147120 = null;
		e_147120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_147120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_90105(s_146930, HEX2EHEX2E_90053(i_146937, 1))), NTI138);
		e_147120.parent = null;
		raiseException(e_147120, "ValueError");
		}
		

	return result_146934;

}

function nsuformatBiggestFloat(f_144223, format_144224, precision_144230, decimal_sep_144231) {
	var result_144232 = null;

		var precision_144401 = precision_144230;
		if ((precision_144401 == -1)) {
		precision_144401 = 6;
		}
		
		var res_144403 = null;
		switch (format_144224) {
		case 0:
			res_144403 = f_144223.toString();
			break;
		case 1:
			res_144403 = f_144223.toFixed(precision_144401);
			break;
		case 2:
			res_144403 = f_144223.toExponential(precision_144401);
			break;
		}
		result_144232 = nimCopy(null, cstrToNimstr(res_144403), NTI138);
		if (((1.0000000000000000e+00 / f_144223) == -Infinity)) {
		result_144232 = nimCopy(null, (makeNimstrLit("-")).concat(cstrToNimstr(res_144403)), NTI138);
		}
		
		L1: do {
			var i_144413 = 0;
			var colontmp__144425 = 0;
			colontmp__144425 = (result_144232 != null ? result_144232.length : 0);
			var i_144428 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_144428 < colontmp__144425)) break L3;
						i_144413 = i_144428;
						if ((ConstSet9[result_144232[i_144413]] != undefined)) {
						result_144232[i_144413] = decimal_sep_144231;
						}
						
						i_144428 += 1;
					}
			} while(false);
		} while(false);

	return result_144232;

}

function insert_21601(x_21604, x_21604_Idx, item_21605, i_21606) {
		var xl_21607 = (x_21604[x_21604_Idx] != null ? x_21604[x_21604_Idx].length : 0);
		x_21604[x_21604_Idx].length = (xl_21607 + (item_21605 != null ? item_21605.length : 0));
		var j_21608 = (xl_21607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_21606 <= j_21608)) break L2;
					x_21604[x_21604_Idx][(j_21608 + (item_21605 != null ? item_21605.length : 0))] = x_21604[x_21604_Idx][j_21608];
					j_21608 -= 1;
				}
		} while(false);
		j_21608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_21608 < (item_21605 != null ? item_21605.length : 0))) break L4;
					x_21604[x_21604_Idx][(j_21608 + i_21606)] = item_21605[j_21608];
					j_21608 += 1;
				}
		} while(false);

	
}

function nsuRepeatChar(c_139984, count_139985) {
	var result_139986 = null;

		result_139986 = nimCopy(null, mnewString(count_139985), NTI138);
		L1: do {
			var i_139998 = 0;
			var colontmp__140000 = 0;
			colontmp__140000 = (count_139985 - 1);
			var res_140003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_140003 <= colontmp__140000)) break L3;
						i_139998 = res_140003;
						result_139986[i_139998] = c_139984;
						res_140003 += 1;
					}
			} while(false);
		} while(false);

	return result_139986;

}

function validate_utf8_50955(s_50957) {
	var result_50958 = 0;

	BeforeRet: do {
		var i_50960 = 0;
		var l_50961 = (s_50957 != null ? s_50957.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_50960 < l_50961)) break L2;
					if ((s_50957[i_50960] <= 127)) {
					i_50960 += 1;
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 5) == 6)) {
					if ((s_50957[i_50960] < 194)) {
					result_50958 = i_50960;
					break BeforeRet;
					}
					
					if ((((i_50960 + 1) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2))) {
					i_50960 += 2;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 4) == 14)) {
					if (((((i_50960 + 2) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 2)] >>> 0) >>> 6) == 2))) {
					i_50960 += 3;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 3) == 30)) {
					if ((((((i_50960 + 3) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 2)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 3)] >>> 0) >>> 6) == 2))) {
					i_50960 += 4;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_50958 = -1;
		break BeforeRet;
	} while (false);

	return result_50958;

}

function nucruneLen(s_50507) {
	var result_50508 = 0;

		var i_50510 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_50510 < (s_50507 != null ? s_50507.length : 0))) break L2;
					if ((s_50507[i_50510] <= 127)) {
					i_50510 += 1;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 5) == 6)) {
					i_50510 += 2;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 4) == 14)) {
					i_50510 += 3;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 3) == 30)) {
					i_50510 += 4;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 2) == 62)) {
					i_50510 += 5;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 1) == 126)) {
					i_50510 += 6;
					}
					else {
					i_50510 += 1;
					}
					}}}}}
					result_50508 += 1;
				}
		} while(false);

	return result_50508;

}

function align_string_146827(s_146829, minimum_width_146830, align_146831, fill_146832) {
			var Tmp1;

	var result_146833 = null;

		if ((minimum_width_146830 == 0)) {
		result_146833 = nimCopy(null, s_146829, NTI138);
		}
		else {
			if ((validate_utf8_50955(s_146829) == -1)) {
			Tmp1 = nucruneLen(s_146829);
			}
			else {
			Tmp1 = (s_146829 != null ? s_146829.length : 0);
			}
			
			var s_rune_len_146835 = Tmp1;
			var to_fill_146836 = (minimum_width_146830 - s_rune_len_146835);
			if ((to_fill_146836 <= 0)) {
			result_146833 = nimCopy(null, s_146829, NTI138);
			}
			else {
			if (((align_146831 == 60) || (align_146831 == 0))) {
			result_146833 = nimCopy(null, (s_146829).concat(nsuRepeatChar(fill_146832, to_fill_146836)), NTI138);
			}
			else {
			if ((align_146831 == 94)) {
			var half_146837 = Math.trunc(to_fill_146836 / 2);
			result_146833 = nimCopy(null, (nsuRepeatChar(fill_146832, half_146837)).concat(s_146829,nsuRepeatChar(fill_146832, (to_fill_146836 - half_146837))), NTI138);
			}
			else {
				result_146833 = nimCopy(null, (nsuRepeatChar(fill_146832, to_fill_146836)).concat(s_146829), NTI138);
			}
			}}
		}
		

	return result_146833;

}

function nsuToUpperAsciiChar(c_137319) {
	var result_137320 = 0;

		if ((ConstSet11[c_137319] != undefined)) {
		result_137320 = (c_137319 - 32);
		}
		else {
			result_137320 = c_137319;
		}
		

	return result_137320;

}

function nsuToUpperAsciiStr(s_137367) {
	var result_137368 = null;

		result_137368 = nimCopy(null, mnewString((s_137367 != null ? s_137367.length : 0)), NTI138);
		L1: do {
			var i_137383 = 0;
			var colontmp__137391 = 0;
			colontmp__137391 = ((s_137367 != null ? s_137367.length : 0) - 1);
			var res_137394 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_137394 <= colontmp__137391)) break L3;
						i_137383 = res_137394;
						result_137368[i_137383] = nsuToUpperAsciiChar(s_137367[i_137383]);
						res_137394 += 1;
					}
			} while(false);
		} while(false);

	return result_137368;

}

function format_149402(value_149406, specifier_149408, res_149410, res_149410_Idx) {
		var Tmp1;

		var spec_149411 = parse_standard_format_specifier_146928(specifier_149408, 0, false);
		var fmode_149412 = 0;
		switch (spec_149411.typ) {
		case 101:
		case 69:
			fmode_149412 = 2;
			break;
		case 102:
		case 70:
			fmode_149412 = 1;
			break;
		case 103:
		case 71:
			fmode_149412 = 0;
			break;
		case 0:
			break;
		default: 
			var e_149418 = null;
			e_149418 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_149418.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_149411.typ]), NTI138);
			e_149418.parent = null;
			raiseException(e_149418, "ValueError");
			break;
		}
		var f_149427 = [nsuformatBiggestFloat(value_149406, fmode_149412, spec_149411.precision, 46)];
		var sign_149428 = false;
		if ((0.0 <= value_149406)) {
		if (!((spec_149411.sign == 45))) {
		sign_149428 = true;
		if ((value_149406 == 0.0)) {
		if (((1.0000000000000000e+00 / value_149406) == Infinity)) {
		insert_21601(f_149427, 0, nimCharToStr(spec_149411.sign), 0);
		}
		
		}
		else {
		insert_21601(f_149427, 0, nimCharToStr(spec_149411.sign), 0);
		}
		
		}
		
		}
		else {
			sign_149428 = true;
		}
		
		if (spec_149411.padWithZero) {
		var sign_str_149431 = [];
		if (sign_149428) {
		sign_str_149431 = nimCopy(null, nimCharToStr(f_149427[0][0]), NTI138);
		f_149427[0] = nimCopy(null, HEX5BHEX5D_90105(f_149427[0], HEX2EHEX2E_90053(1, 1)), NTI138);
		}
		
		var to_fill_149486 = ((spec_149411.minimumWidth - (f_149427[0] != null ? f_149427[0].length : 0)) - (sign_149428 ? 1:0));
		if ((0 < to_fill_149486)) {
		f_149427[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_149486)).concat(f_149427[0]), NTI138);
		}
		
		if (sign_149428) {
		f_149427[0] = nimCopy(null, (sign_str_149431).concat(f_149427[0]), NTI138);
		}
		
		}
		
		if ((spec_149411.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_149411.align;
		}
		
		var align_149489 = Tmp1;
		var result_149490 = align_string_146827(f_149427[0], spec_149411.minimumWidth, align_149489, spec_149411.fill);
		if ((ConstSet10[spec_149411.typ] != undefined)) {
		if (res_149410[res_149410_Idx] != null) { res_149410[res_149410_Idx] = (res_149410[res_149410_Idx]).concat(nsuToUpperAsciiStr(result_149490)); } else { res_149410[res_149410_Idx] = nsuToUpperAsciiStr(result_149490).slice(); };
		}
		else {
		if (res_149410[res_149410_Idx] != null) { res_149410[res_149410_Idx] = (res_149410[res_149410_Idx]).concat(result_149490); } else { res_149410[res_149410_Idx] = result_149490.slice(); };
		}
		

	
}

function HEX24_148831(v_148833) {
	var result_148834 = null;

		result_148834 = nimCopy(null, makeNimstrLit("["), NTI138);
		L1: do {
			var k_148843 = 0;
			var colontmp__149517 = 0;
			var colontmp__149518 = 0;
			colontmp__149517 = low_148814(v_148833);
			colontmp__149518 = high_148797(v_148833);
			var res_149521 = colontmp__149517;
			L2: do {
					L3: while (true) {
					if (!(res_149521 <= colontmp__149518)) break L3;
						k_148843 = res_149521;
						var fmt_res_148846 = [mnewString(0)];
						format_149402(v_148833.data[k_148843], makeNimstrLit(".04f"), fmt_res_148846, 0);
						if (result_148834 != null) { result_148834 = (result_148834).concat(fmt_res_148846[0]); } else { result_148834 = fmt_res_148846[0].slice(); };
						if (!((k_148843 == high_148797(v_148833)))) {
						if (result_148834 != null) { result_148834 = (result_148834).concat(makeNimstrLit(", ")); } else { result_148834 = makeNimstrLit(", "); };
						}
						
						res_149521 += 1;
					}
			} while(false);
		} while(false);
		if (result_148834 != null) { result_148834 = (result_148834).concat(makeNimstrLit("]")); } else { result_148834 = makeNimstrLit("]"); };

	return result_148834;

}

function add_quoted_155602(s_155606, s_155606_Idx, x_155608) {
		if (s_155606[s_155606_Idx] != null) { s_155606[s_155606_Idx] = (s_155606[s_155606_Idx]).concat(cstrToNimstr((x_155608)+"")); } else { s_155606[s_155606_Idx] = cstrToNimstr((x_155608)+"").slice(); };

	
}

function collection_to_string_155211(x_155215, prefix_155217, separator_155219, suffix_155221) {
	var result_155222 = [null];

		result_155222[0] = nimCopy(null, prefix_155217, NTI138);
		var first_element_155223 = true;
		L1: do {
			var value_155415 = 0.0;
			var i_155818 = 0;
			var l_155820 = (x_155215 != null ? x_155215.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_155818 < l_155820)) break L3;
						value_155415 = x_155215[i_155818];
						if (first_element_155223) {
						first_element_155223 = false;
						}
						else {
						if (result_155222[0] != null) { result_155222[0] = (result_155222[0]).concat(separator_155219); } else { result_155222[0] = separator_155219.slice(); };
						}
						
						add_quoted_155602(result_155222, 0, value_155415);
						i_155818 += 1;
					}
			} while(false);
		} while(false);
		if (result_155222[0] != null) { result_155222[0] = (result_155222[0]).concat(suffix_155221); } else { result_155222[0] = suffix_155221.slice(); };

	return result_155222[0];

}

function HEX24_155203(x_155208) {
	var result_155209 = null;

		result_155209 = nimCopy(null, collection_to_string_155211(x_155208, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_155209;

}

function add_quoted_155002(s_155006, s_155006_Idx, x_155008) {
		if (s_155006[s_155006_Idx] != null) { s_155006[s_155006_Idx] = (s_155006[s_155006_Idx]).concat(HEX24_155203(x_155008)); } else { s_155006[s_155006_Idx] = HEX24_155203(x_155008).slice(); };

	
}

function HEX24_154202(x_154206) {
	var result_154207 = [null];

		result_154207[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_154208 = true;
		if (!(first_element_154208)) {
		if (result_154207[0] != null) { result_154207[0] = (result_154207[0]).concat(makeNimstrLit(", ")); } else { result_154207[0] = makeNimstrLit(", "); };
		}
		
		if (result_154207[0] != null) { result_154207[0] = (result_154207[0]).concat(makeNimstrLit("autocorrelation")); } else { result_154207[0] = makeNimstrLit("autocorrelation"); };
		if (result_154207[0] != null) { result_154207[0] = (result_154207[0]).concat(makeNimstrLit(": ")); } else { result_154207[0] = makeNimstrLit(": "); };
		add_quoted_155002(result_154207, 0, x_154206.autocorrelation);
		first_element_154208 = false;
		if (!(first_element_154208)) {
		if (result_154207[0] != null) { result_154207[0] = (result_154207[0]).concat(makeNimstrLit(", ")); } else { result_154207[0] = makeNimstrLit(", "); };
		}
		
		if (result_154207[0] != null) { result_154207[0] = (result_154207[0]).concat(makeNimstrLit("confidence_interval")); } else { result_154207[0] = makeNimstrLit("confidence_interval"); };
		if (result_154207[0] != null) { result_154207[0] = (result_154207[0]).concat(makeNimstrLit(": ")); } else { result_154207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_154207, 0, x_154206.confidence_interval);
		first_element_154208 = false;
		if (result_154207[0] != null) { result_154207[0] = (result_154207[0]).concat(makeNimstrLit(")")); } else { result_154207[0] = makeNimstrLit(")"); };

	return result_154207[0];

}

function vector_to_seq_149538(v_149540) {
	var result_149542 = null;

		var length_149543 = len_148780(v_149540);
		result_149542 = new Array(length_149543); for (var i=0;i<length_149543;++i) {result_149542[i]=0.0;}		var i_149554 = 0;
		L1: do {
			var k_149563 = 0;
			var colontmp__149574 = 0;
			var colontmp__149575 = 0;
			colontmp__149574 = low_148814(v_149540);
			colontmp__149575 = high_148797(v_149540);
			var res_149578 = colontmp__149574;
			L2: do {
					L3: while (true) {
					if (!(res_149578 <= colontmp__149575)) break L3;
						k_149563 = res_149578;
						result_149542[i_149554] = v_149540.data[k_149563];
						i_149554 += 1;
						res_149578 += 1;
					}
			} while(false);
		} while(false);

	return result_149542;

}

function HEX2F_19442(x_19444, y_19445) {
	var result_19446 = 0.0;

		result_19446 = (x_19444 / y_19445);

	return result_19446;

}

function acf_confidence_interval_153628(x_153630) {
	var result_153631 = 0.0;

		result_153631 = (1.9600000000000000e+00 * Math.sqrt(HEX2F_19442(1, len_148780(x_153630))));

	return result_153631;

}

function acf_information_153721(x_153723, max_lag_153724) {
	var result_153725 = {autocorrelation: null, confidence_interval: 0.0};

		result_153725.autocorrelation = nimCopy(null, vector_to_seq_149538(acf_153645(x_153723, max_lag_153724)), NTI149541);
		result_153725.confidence_interval = acf_confidence_interval_153628(x_153723);

	return result_153725;

}
var x_153742 = vector_148363([3, 2, 1, 9, 4, 2, 5, 3, 3, 6, 8, 9, 10]);
var y_153743 = acf_153645(x_153742, 10);
rawEcho(makeNimstrLit("AutocorrelationFunction"));
var fmt_res_153749 = [mnewString(0)];
if (fmt_res_153749[0] != null) { fmt_res_153749[0] = (fmt_res_153749[0]).concat(makeNimstrLit("  X: ")); } else { fmt_res_153749[0] = makeNimstrLit("  X: "); };
if (fmt_res_153749[0] != null) { fmt_res_153749[0] = (fmt_res_153749[0]).concat(HEX24_148831(x_153742)); } else { fmt_res_153749[0] = HEX24_148831(x_153742).slice(); };
rawEcho(fmt_res_153749[0]);
var fmt_res_153806 = [mnewString(0)];
if (fmt_res_153806[0] != null) { fmt_res_153806[0] = (fmt_res_153806[0]).concat(makeNimstrLit("  ACF: ")); } else { fmt_res_153806[0] = makeNimstrLit("  ACF: "); };
if (fmt_res_153806[0] != null) { fmt_res_153806[0] = (fmt_res_153806[0]).concat(HEX24_148831(y_153743)); } else { fmt_res_153806[0] = HEX24_148831(y_153743).slice(); };
rawEcho(fmt_res_153806[0]);
var fmt_res_154006 = [mnewString(0)];
if (fmt_res_154006[0] != null) { fmt_res_154006[0] = (fmt_res_154006[0]).concat(makeNimstrLit("  ACF-info: ")); } else { fmt_res_154006[0] = makeNimstrLit("  ACF-info: "); };
if (fmt_res_154006[0] != null) { fmt_res_154006[0] = (fmt_res_154006[0]).concat(HEX24_154202(acf_information_153721(x_153742, 10))); } else { fmt_res_154006[0] = HEX24_154202(acf_information_153721(x_153742, 10)).slice(); };
rawEcho(fmt_res_154006[0]);
rawEcho([]);

function student_t_ppf_95p_153554(df_153556) {
	var result_153557 = 0.0;

	BeforeRet: do {
		if ((37 < df_153556)) {
		result_153557 = 1.9600000000000000e+00;
		break BeforeRet;
		}
		else {
		if ((df_153556 <= 1)) {
		result_153557 = 1.2710000000000001e+01;
		break BeforeRet;
		}
		}
		result_153557 = table_ppf_153558[df_153556];
		break BeforeRet;
	} while (false);

	return result_153557;

}

function student_t_ppf_95p_153592(df_153594) {
	var result_153595 = 0.0;

		result_153595 = student_t_ppf_95p_153554(((df_153594)|0));

	return result_153595;

}

function HEX2D_151983(v_151985, w_151986) {
	var result_151987 = [{length: 0, data: null}];

		result_151987[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_152004 = 0;
			var colontmp__152007 = 0;
			var colontmp__152008 = 0;
			colontmp__152007 = low_148814(v_151985);
			colontmp__152008 = high_148797(v_151985);
			var res_152011 = colontmp__152007;
			L2: do {
					L3: while (true) {
					if (!(res_152011 <= colontmp__152008)) break L3;
						i_152004 = res_152011;
						HEX5BHEX5DHEX3D_150014(result_151987[0], i_152004, (HEX5BHEX5D_149595(v_151985, i_152004) - HEX5BHEX5D_149595(w_151986, i_152004)));
						res_152011 += 1;
					}
			} while(false);
		} while(false);

	return result_151987[0];

}

function HEX2B_151882(v_151884, k_151885) {
	var result_151886 = [{length: 0, data: null}];

		result_151886[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_151903 = 0;
			var colontmp__151906 = 0;
			var colontmp__151907 = 0;
			colontmp__151906 = low_148814(v_151884);
			colontmp__151907 = high_148797(v_151884);
			var res_151910 = colontmp__151906;
			L2: do {
					L3: while (true) {
					if (!(res_151910 <= colontmp__151907)) break L3;
						i_151903 = res_151910;
						HEX5BHEX5DHEX3D_150014(result_151886[0], i_151903, (HEX5BHEX5D_149595(v_151884, i_151903) + k_151885));
						res_151910 += 1;
					}
			} while(false);
		} while(false);

	return result_151886[0];

}

function HEX2B_151927(k_151929, v_151930) {
	var result_151931 = {length: 0, data: null};

		nimCopy(result_151931, HEX2B_151882(v_151930, k_151929), NTI148018);

	return result_151931;

}

function HEX2EHEX2A_152201(v_152203, k_152204) {
	var result_152205 = [{length: 0, data: null}];

		result_152205[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_152222 = 0;
			var colontmp__152225 = 0;
			var colontmp__152226 = 0;
			colontmp__152225 = low_148814(v_152203);
			colontmp__152226 = high_148797(v_152203);
			var res_152229 = colontmp__152225;
			L2: do {
					L3: while (true) {
					if (!(res_152229 <= colontmp__152226)) break L3;
						i_152222 = res_152229;
						HEX5BHEX5DHEX3D_150014(result_152205[0], i_152222, (HEX5BHEX5D_149595(v_152203, i_152222) * k_152204));
						res_152229 += 1;
					}
			} while(false);
		} while(false);

	return result_152205[0];

}

function HEX2EHEX2A_152246(k_152248, v_152249) {
	var result_152250 = {length: 0, data: null};

		nimCopy(result_152250, HEX2EHEX2A_152201(v_152249, k_152248), NTI148018);

	return result_152250;

}

function HEX2A_152320(k_152322, v_152323) {
	var result_152324 = {length: 0, data: null};

		nimCopy(result_152324, HEX2EHEX2A_152246(k_152322, v_152323), NTI148018);

	return result_152324;

}

function HEX5E_152619(v_152621, w_152622) {
	var result_152623 = 0.0;

		result_152623 = Math.pow(v_152621, w_152622);

	return result_152623;

}

function HEX2EHEX5E_152682(v_152684, k_152685) {
	var result_152686 = [{length: 0, data: null}];

		result_152686[0].data = new Float32Array(LENGTH_VECTOR);
		L1: do {
			var i_152703 = 0;
			var colontmp__152706 = 0;
			var colontmp__152707 = 0;
			colontmp__152706 = low_148814(v_152684);
			colontmp__152707 = high_148797(v_152684);
			var res_152710 = colontmp__152706;
			L2: do {
					L3: while (true) {
					if (!(res_152710 <= colontmp__152707)) break L3;
						i_152703 = res_152710;
						HEX5BHEX5DHEX3D_150014(result_152686[0], i_152703, HEX5E_152619(HEX5BHEX5D_149595(v_152684, i_152703), k_152685));
						res_152710 += 1;
					}
			} while(false);
		} while(false);

	return result_152686[0];

}

function student_t_cdf_153531(t_153533, df_153534) {
	var result_153535 = 0.0;

	BeforeRet: do {
		var y_153536 = (((df_153534 + 1.0526315789473684e-01) / (df_153534 + 3.0985915492957744e-01)) * Math.sqrt(((df_153534 + 1.0526315789473684e-01) * Math.log((1.0000000000000000e+00 + ((t_153533 * t_153533) / (df_153534 + 2.6000000000000001e-01)))))));
		result_153535 = (1.0000000000000000e+00 / (1.0000000000000000e+00 + Math.exp(((-1.6000000000000001e+00 * y_153536) - (((7.0000000000000007e-02 * y_153536) * y_153536) * y_153536)))));
		break BeforeRet;
	} while (false);

	return result_153535;

}

function p_value_of_t_distr_156699(mean_156701, variance_156702, n_156703) {
	var result_156704 = 0.0;

		result_156704 = (2.0000000000000000e+00 - (2.0000000000000000e+00 * student_t_cdf_153531((mean_156701 / Math.sqrt(variance_156702)), (n_156703 - 2))));

	return result_156704;

}

function simple_linear_regression(x_161827, y_161828) {
	var result_161829 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0};

		var n_161830 = len_148780(x_161827);
		var sx_161831 = sum_152959(x_161827);
		var sxx_161832 = sum_152959(HEX2EHEX2A_152156(x_161827, x_161827));
		var sy_161833 = sum_152959(y_161828);
		var sxy_161834 = sum_152959(HEX2EHEX2A_152156(x_161827, y_161828));
		var syy_161835 = sum_152959(HEX2EHEX2A_152156(y_161828, y_161828));
		var t_value_161836 = student_t_ppf_95p_153592((n_161830 - 2.0000000000000000e+00));
		result_161829.n = ((n_161830)|0);
		result_161829.slope = (((n_161830 * sxy_161834) - (sx_161831 * sy_161833)) / (((n_161830 * sxx_161832) - HEX5E_153081(sx_161831, 2)) + 1.0000000000000000e-10));
		result_161829.intercept = ((sy_161833 / n_161830) - ((result_161829.slope * sx_161831) / n_161830));
		result_161829.R2 = ((HEX5E_153081(((n_161830 * sxy_161834) - (sx_161831 * sy_161833)), 2) / ((n_161830 * sxx_161832) - HEX5E_153081(sx_161831, 2))) / (((n_161830 * syy_161835) - HEX5E_153081(sy_161833, 2)) + 1.0000000000000000e-10));
		var residual_161869 = HEX2D_151983(y_161828, HEX2B_151927(result_161829.intercept, HEX2A_152320(result_161829.slope, x_161827)));
		result_161829.residual = nimCopy(null, vector_to_seq_149538(residual_161869), NTI149541);
		result_161829.residual_sum_squares = sum_152959(HEX2EHEX5E_152682(residual_161869, 2.0000000000000000e+00));
		result_161829.residual_variance = ((((n_161830 * syy_161835) - HEX5E_153081(sy_161833, 2)) - (HEX5E_153081(result_161829.slope, 2) * ((n_161830 * sxx_161832) - HEX5E_153081(sx_161831, 2)))) / (((n_161830 * n_161830) - (2.0000000000000000e+00 * n_161830)) + 1.0000000000000000e-10));
		nimCopy(result_161829.autocorrelation_function, acf_information_153721(residual_161869, 100), NTI153611);
		result_161829.slope_variance = ((n_161830 * result_161829.residual_variance) / (((n_161830 * sxx_161832) - HEX5E_153081(sx_161831, 2)) + 1.0000000000000000e-10));
		result_161829.intercept_variance = ((result_161829.slope_variance * sxx_161832) / n_161830);
		result_161829.slope_p_value = p_value_of_t_distr_156699(result_161829.slope, result_161829.slope_variance, ((n_161830)|0));
		result_161829.intercept_p_value = p_value_of_t_distr_156699(result_161829.intercept, result_161829.intercept_variance, ((n_161830)|0));
		result_161829.slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_161829.slope_variance)) * t_value_161836);
		result_161829.slope_confidence_interval[0] = (result_161829.slope - (5.0000000000000000e-01 * result_161829.slope_width_confidence_interval));
		result_161829.slope_confidence_interval[1] = (result_161829.slope + (5.0000000000000000e-01 * result_161829.slope_width_confidence_interval));
		result_161829.intercept_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_161829.intercept_variance)) * t_value_161836);
		result_161829.intercept_confidence_interval[0] = (result_161829.intercept - (5.0000000000000000e-01 * result_161829.intercept_width_confidence_interval));
		result_161829.intercept_confidence_interval[1] = (result_161829.intercept + (5.0000000000000000e-01 * result_161829.intercept_width_confidence_interval));

	return result_161829;

}

function simple_linear_regression_wo_intercept(x_161923, y_161924) {
	var result_161925 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0};

		var n_161926 = len_148780(x_161923);
		var sx_161927 = sum_152959(x_161923);
		var sxx_161928 = sum_152959(HEX2EHEX2A_152156(x_161923, x_161923));
		var sy_161929 = sum_152959(y_161924);
		var sxy_161930 = sum_152959(HEX2EHEX2A_152156(x_161923, y_161924));
		var sxxyy_161931 = sum_152959(HEX2EHEX2A_152156(HEX2EHEX2A_152156(x_161923, y_161924), HEX2EHEX2A_152156(x_161923, y_161924)));
		var syy_161932 = sum_152959(HEX2EHEX2A_152156(y_161924, y_161924));
		result_161925.n = ((n_161926)|0);
		result_161925.slope = ((((n_161926 * sxy_161930) - (sx_161927 * sy_161929)) + (sx_161927 * sy_161929)) / ((((n_161926 * sxx_161928) - HEX5E_153081(sx_161927, 2)) + (sx_161927 * sx_161927)) + 1.0000000000000000e-10));
		result_161925.intercept = 0.0;
		result_161925.R2 = ((HEX5E_153081(sxy_161930, 2) + 1.0000000000000000e-10) / ((sxx_161928 * syy_161932) + 1.0000000000000000e-10));
		var residual_161949 = HEX2D_151983(y_161924, HEX2B_151927(result_161925.intercept, HEX2A_152320(result_161925.slope, x_161923)));
		result_161925.residual = nimCopy(null, vector_to_seq_149538(residual_161949), NTI149541);
		result_161925.residual_sum_squares = sum_152959(HEX2EHEX5E_152682(residual_161949, 2.0000000000000000e+00));
		result_161925.residual_variance = (result_161925.residual_sum_squares / ((n_161926 - 1.0000000000000000e+00) + 1.0000000000000000e-10));
		nimCopy(result_161925.autocorrelation_function, acf_information_153721(residual_161949, 100), NTI153611);
		result_161925.slope_variance = (result_161925.residual_variance / (sxx_161928 + 1.0000000000000000e-10));
		result_161925.intercept_variance = 0.0;
		result_161925.slope_p_value = p_value_of_t_distr_156699(result_161925.slope, result_161925.slope_variance, ((n_161926)|0));
		result_161925.intercept_p_value = 0.0;
		result_161925.slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_161925.slope_variance)) * student_t_ppf_95p_153592((n_161926 - 1.0000000000000000e+00)));
		result_161925.slope_confidence_interval[0] = (result_161925.slope - (5.0000000000000000e-01 * result_161925.slope_width_confidence_interval));
		result_161925.slope_confidence_interval[1] = (result_161925.slope + (5.0000000000000000e-01 * result_161925.slope_width_confidence_interval));
		result_161925.intercept_width_confidence_interval = 0.0;
		result_161925.intercept_confidence_interval[0] = 0.0;
		result_161925.intercept_confidence_interval[1] = 0.0;

	return result_161925;

}

function arma(x_162057, y_162058) {
	var result_162059 = {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}};

		nimCopy(result_162059.mean_structure, simple_linear_regression(x_162057, y_162058), NTI156610);
		var residuals_162060 = HEX2D_151983(y_162058, HEX2B_151927(result_162059.mean_structure.intercept, HEX2A_152320(result_162059.mean_structure.slope, x_162057)));
		nimCopy(result_162059.autoregressive_structure, simple_linear_regression_wo_intercept(HEX5BHEX5D_150414(residuals_162060, HEX2EHEX2E_57828(0, (high_148797(residuals_162060) - 1))), HEX5BHEX5D_150414(residuals_162060, HEX2EHEX2E_57828(1, high_148797(residuals_162060)))), NTI156610);

	return result_162059;

}

function HEX2BHEX3D_31099(x_31104, x_31104_Idx, y_31106) {
		x_31104[x_31104_Idx] = (x_31104[x_31104_Idx] + y_31106);

	
}

function HEX2DHEX3D_162110(x_162115, x_162115_Idx, y_162117) {
		x_162115[x_162115_Idx] = (x_162115[x_162115_Idx] - y_162117);

	
}

function HEX2EHEX5E_152772(v_152774, k_152775) {
	var result_152776 = {length: 0, data: null};

		nimCopy(result_152776, HEX2EHEX5E_152682(v_152774, k_152775), NTI148018);

	return result_152776;

}

function normal_loglikelihood_162098(x_162100, y_162101, slope_162102, intercept_162103, sigma2_162104) {
	var result_162105 = [0.0];

		var n_162106 = len_148780(x_162100);
		result_162105[0] = ((-5.0000000000000000e-01 * n_162106) * Math.log(((6.2831853071795862e+00 * sigma2_162104) + 1.0000000000000000e-10)));
		HEX2DHEX3D_162110(result_162105, 0, (sum_152959(HEX2EHEX5E_152772(HEX2D_151983(y_162101, HEX2B_151927(intercept_162103, HEX2A_152320(slope_162102, x_162100))), 2)) / ((2.0000000000000000e+00 * sigma2_162104) + 1.0000000000000000e-10)));

	return result_162105[0];

}

function analysis_at_point_t_162146(x_162148, y_162149, change_point_162150) {
	var result_162151 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}};

		var n_162152 = len_148780(x_162148);
		var x_before_162165 = HEX5BHEX5D_150414(x_162148, HEX2EHEX2E_57828(0, (change_point_162150 - 1)));
		var y_before_162178 = HEX5BHEX5D_150414(y_162149, HEX2EHEX2E_57828(0, (change_point_162150 - 1)));
		var x_after_162189 = HEX5BHEX5D_150414(x_162148, HEX2EHEX2E_57828(change_point_162150, high_148797(x_162148)));
		var y_after_162200 = HEX5BHEX5D_150414(y_162149, HEX2EHEX2E_57828(change_point_162150, high_148797(y_162149)));
		nimCopy(result_162151.before_change, arma(x_before_162165, y_before_162178), NTI156661);
		HEX2BHEX3D_31099(result_162151, "loglikelihood", normal_loglikelihood_162098(x_before_162165, y_before_162178, result_162151.before_change.mean_structure.slope, result_162151.before_change.mean_structure.intercept, result_162151.before_change.autoregressive_structure.residual_variance));
		nimCopy(result_162151.after_change, arma(x_after_162189, y_after_162200), NTI156661);
		HEX2BHEX3D_31099(result_162151, "loglikelihood", normal_loglikelihood_162098(x_after_162189, y_after_162200, result_162151.after_change.mean_structure.slope, result_162151.after_change.mean_structure.intercept, result_162151.after_change.autoregressive_structure.residual_variance));

	return result_162151;

}

function model_differences_156719(before_change_156721, after_change_156722) {
	var result_156723 = {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0};

		result_156723.intercept = (after_change_156722.mean_structure.intercept - before_change_156721.mean_structure.intercept);
		result_156723.slope = (after_change_156722.mean_structure.slope - before_change_156721.mean_structure.slope);
		result_156723.autoregressive_slope = (after_change_156722.autoregressive_structure.slope - before_change_156721.autoregressive_structure.slope);
		var intercept_dof_156724 = ((after_change_156722.mean_structure.n + before_change_156721.mean_structure.n) - 4);
		var slope_dof_156725 = ((after_change_156722.mean_structure.n + before_change_156721.mean_structure.n) - 4);
		var autoregressive_slope_dof_156726 = ((after_change_156722.autoregressive_structure.n + before_change_156721.autoregressive_structure.n) - 4);
		result_156723.intercept_variance = (after_change_156722.mean_structure.intercept_variance + before_change_156721.mean_structure.intercept_variance);
		result_156723.slope_variance = (after_change_156722.mean_structure.slope_variance + before_change_156721.mean_structure.slope_variance);
		result_156723.autoregressive_slope_variance = (after_change_156722.autoregressive_structure.slope_variance + before_change_156721.autoregressive_structure.slope_variance);
		result_156723.intercept_p_value = p_value_of_t_distr_156699(result_156723.intercept, result_156723.intercept_variance, (intercept_dof_156724 + 2));
		result_156723.slope_p_value = p_value_of_t_distr_156699(result_156723.slope, result_156723.slope_variance, (slope_dof_156725 + 2));
		result_156723.autoregressive_slope_p_value = p_value_of_t_distr_156699(result_156723.autoregressive_slope, result_156723.autoregressive_slope_variance, (autoregressive_slope_dof_156726 + 2));
		result_156723.intercept_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_156723.intercept_variance)) * student_t_ppf_95p_153554(intercept_dof_156724));
		result_156723.slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_156723.slope_variance)) * student_t_ppf_95p_153554(slope_dof_156725));
		result_156723.autoregressive_slope_width_confidence_interval = ((2.0000000000000000e+00 * Math.sqrt(result_156723.autoregressive_slope_variance)) * student_t_ppf_95p_153554(autoregressive_slope_dof_156726));
		nimCopy(result_156723.intercept_confidence_interval, [(result_156723.intercept - (5.0000000000000000e-01 * result_156723.intercept_width_confidence_interval)), (result_156723.intercept + (5.0000000000000000e-01 * result_156723.intercept_width_confidence_interval))], NTI156727);
		nimCopy(result_156723.slope_confidence_interval, [(result_156723.slope - (5.0000000000000000e-01 * result_156723.slope_width_confidence_interval)), (result_156723.slope + (5.0000000000000000e-01 * result_156723.slope_width_confidence_interval))], NTI156729);
		nimCopy(result_156723.autoregressive_slope_confidence_interval, [(result_156723.autoregressive_slope - (5.0000000000000000e-01 * result_156723.autoregressive_slope_width_confidence_interval)), (result_156723.autoregressive_slope + (5.0000000000000000e-01 * result_156723.autoregressive_slope_width_confidence_interval))], NTI156731);

	return result_156723;

}

function robust_interrupted_time_series_model_162234(x_162236, y_162237, change_point_162238, candidates_before_162239, candidates_after_162240) {
								var Tmp5;

	var result_162241 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}, parameter_differences: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0}};

		var ll_result_162242 = {loglikelihood: 0.0, before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}};
		result_162241.likelihood.best_loglikelihood = -1.0000000000000000e+100;
		L1: do {
			var t_162251 = 0;
			var colontmp__162274 = 0;
			var colontmp__162275 = 0;
			colontmp__162274 = (change_point_162238 - candidates_before_162239);
			colontmp__162275 = (change_point_162238 + candidates_after_162240);
			var res_162278 = colontmp__162274;
			L2: do {
					L3: while (true) {
					if (!(res_162278 <= colontmp__162275)) break L3;
						t_162251 = res_162278;
						L4: do {
								if ((t_162251 < 3)) Tmp5 = true; else {									Tmp5 = (high_148797(x_162236) < t_162251);								}							if (Tmp5) {
							break L4;
							}
							
							nimCopy(ll_result_162242, analysis_at_point_t_162146(x_162236, y_162237, t_162251), NTI156665);
							var Tmp6 = nimCopy(null, t_162251, NTI17403);
							if (result_162241.likelihood.change_points != null) { result_162241.likelihood.change_points.push(Tmp6); } else { result_162241.likelihood.change_points = [Tmp6]; };
							var Tmp7 = nimCopy(null, ll_result_162242.loglikelihood, NTI124);
							if (result_162241.likelihood.loglikelihood != null) { result_162241.likelihood.loglikelihood.push(Tmp7); } else { result_162241.likelihood.loglikelihood = [Tmp7]; };
							if ((result_162241.likelihood.best_loglikelihood < ll_result_162242.loglikelihood)) {
							result_162241.likelihood.best_loglikelihood = ll_result_162242.loglikelihood;
							result_162241.likelihood.best_likelihood = Math.exp(ll_result_162242.loglikelihood);
							result_162241.likelihood.best_index = t_162251;
							result_162241.likelihood.best_time = HEX5BHEX5D_149595(x_162236, t_162251);
							nimCopy(result_162241.before_change, ll_result_162242.before_change, NTI156661);
							nimCopy(result_162241.after_change, ll_result_162242.after_change, NTI156661);
							nimCopy(result_162241.parameter_differences, model_differences_156719(result_162241.before_change, result_162241.after_change), NTI156635);
							}
							
						} while(false);
						res_162278 += 1;
					}
			} while(false);
		} while(false);

	return result_162241;

}

function robust_interrupted_time_series(x_162298, y_162300, change_point_162301, candidates_before_162302, candidates_after_162303) {
	var result_162304 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}, parameter_differences: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0}};

		nimCopy(result_162304, robust_interrupted_time_series_model_162234(vector_148236(x_162298), vector_148236(y_162300), change_point_162301, candidates_before_162302, candidates_after_162303), NTI156680);

	return result_162304;

}

function vector_reduced_148689(v_148692, sampling_148693) {
	var result_148694 = {length: 0, data: null};

		result_148694.data = new Float32Array(LENGTH_VECTOR);
		result_148694.length = (v_148692 != null ? v_148692.length : 0);
		var i_148709 = 0;
		L1: do {
			var k_148732 = 0;
			var colontmp__148760 = 0;
			colontmp__148760 = (v_148692 != null ? (v_148692.length-1) : -1);
			var res_148763 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_148763 <= colontmp__148760)) break L3;
						k_148732 = res_148763;
						L4: do {
							if (!((Math.trunc(k_148732 % sampling_148693) == 0))) {
							break L4;
							}
							
							check_value_148280(result_148694, "data", result_148694.length, i_148709, v_148692, k_148732);
							i_148709 += 1;
						} while(false);
						res_148763 += 1;
					}
			} while(false);
		} while(false);
		result_148694.length = i_148709;
		nimCopy(result_148694, result_148694, NTI148018);

	return result_148694;

}

function robust_interrupted_time_series_approximated(sampling_162320, x_162322, y_162324, change_point_162325, candidates_before_162326, candidates_after_162327) {
	var result_162328 = {before_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, after_change: {mean_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}, autoregressive_structure: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, R2: 0.0, residual: null, residual_sum_squares: 0.0, residual_variance: 0.0, autocorrelation_function: {autocorrelation: null, confidence_interval: 0.0}, n: 0}}, likelihood: {change_points: null, loglikelihood: null, best_loglikelihood: 0.0, best_likelihood: 0.0, best_time: 0.0, best_index: 0}, parameter_differences: {intercept: 0.0, intercept_variance: 0.0, intercept_confidence_interval: new Float64Array(2), intercept_width_confidence_interval: 0.0, intercept_p_value: 0.0, slope: 0.0, slope_variance: 0.0, slope_confidence_interval: new Float64Array(2), slope_width_confidence_interval: 0.0, slope_p_value: 0.0, autoregressive_slope: 0.0, autoregressive_slope_variance: 0.0, autoregressive_slope_confidence_interval: new Float64Array(2), autoregressive_slope_width_confidence_interval: 0.0, autoregressive_slope_p_value: 0.0}};

		nimCopy(result_162328, robust_interrupted_time_series_model_162234(vector_reduced_148689(x_162322, sampling_162320), vector_reduced_148689(y_162324, sampling_162320), (((change_point_162325 / sampling_162320))|0), (((candidates_before_162326 / sampling_162320))|0), (((candidates_after_162327 / sampling_162320))|0)), NTI156680);

	return result_162328;

}
var state_163805 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_171832 = [null];
var local_instance_171833 = [null];

function HEX2A_168401(a_168403, b_168404) {
	var result_168405 = 0;

		result_168405 = (a_168403 * b_168404);

	return result_168405;

}

function convert_169448(unit_from_169452, unit_to_169454, quantity_169456) {
		var Tmp1;

	var result_169457 = 0;

		if ((unit_from_169452 < unit_to_169454)) {
		Tmp1 = Math.trunc(quantity_169456 / Math.trunc(unit_weights_169017[unit_to_169454] / unit_weights_169017[unit_from_169452]));
		}
		else {
		Tmp1 = HEX2A_168401(Math.trunc(unit_weights_169017[unit_from_169452] / unit_weights_169017[unit_to_169454]), quantity_169456);
		}
		
		result_169457 = Tmp1;

	return result_169457;

}

function init_time_169085(unix_169087, nanosecond_169088) {
	var result_171018 = {seconds: 0, nanosecond: 0};

		result_171018.seconds = unix_169087;
		result_171018.nanosecond = nanosecond_169088;

	return result_171018;

}

function get_time_171961() {
	var result_171963 = {seconds: 0, nanosecond: 0};

		var millis_172001 = new Date().getTime();
		var seconds_172012 = convert_169448(2, 3, millis_172001);
		var nanos_172034 = convert_169448(2, 0, Math.trunc(millis_172001 % convert_169448(3, 2, 1)));
		nimCopy(result_171963, init_time_169085(seconds_172012, nanos_172034), NTI168818);

	return result_171963;

}
var start_181831 = [get_time_171961()];

function rotl_164015(x_164017, k_164018) {
	var result_164019 = 0;

		result_164019 = ((x_164017 << k_164018) | ((x_164017 >>> 0) >>> ((64 - k_164018) >>> 0)));

	return result_164019;

}

function next_164067(r_164070) {
	var result_164071 = 0;

		var s0_164072 = r_164070.a0;
		var s1_164073 = r_164070.a1;
		result_164071 = ((s0_164072 + s1_164073) >>> 0);
		s1_164073 = (s1_164073 ^ s0_164072);
		r_164070.a0 = ((rotl_164015(s0_164072, 55) ^ s1_164073) ^ (s1_164073 << 14));
		r_164070.a1 = rotl_164015(s1_164073, 36);

	return result_164071;

}

function rand_164448(r_164451, max_164452) {
	var result_164453 = 0;

	BeforeRet: do {
		if ((max_164452 == 0)) {
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var x_164454 = next_164067(r_164451);
					if ((x_164454 <= ((4294967295 - (4294967295 % max_164452)) >>> 0))) {
					result_164453 = (((x_164454 % ((max_164452 + 1) )))|0);
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);

	return result_164453;

}

function rand_164512(max_164514) {
	var result_164515 = 0;

		result_164515 = rand_164448(state_163805[0], max_164514);

	return result_164515;

}

function format_157402(value_157406, specifier_157408, res_157410, res_157410_Idx) {
		var Tmp1;

		var spec_157411 = parse_standard_format_specifier_146928(specifier_157408, 0, false);
		var fmode_157412 = 0;
		switch (spec_157411.typ) {
		case 101:
		case 69:
			fmode_157412 = 2;
			break;
		case 102:
		case 70:
			fmode_157412 = 1;
			break;
		case 103:
		case 71:
			fmode_157412 = 0;
			break;
		case 0:
			break;
		default: 
			var e_157418 = null;
			e_157418 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_157418.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_157411.typ]), NTI138);
			e_157418.parent = null;
			raiseException(e_157418, "ValueError");
			break;
		}
		var f_157427 = [nsuformatBiggestFloat(value_157406, fmode_157412, spec_157411.precision, 46)];
		var sign_157428 = false;
		if ((0.0 <= value_157406)) {
		if (!((spec_157411.sign == 45))) {
		sign_157428 = true;
		if ((value_157406 == 0.0)) {
		if (((1.0000000000000000e+00 / value_157406) == Infinity)) {
		insert_21601(f_157427, 0, nimCharToStr(spec_157411.sign), 0);
		}
		
		}
		else {
		insert_21601(f_157427, 0, nimCharToStr(spec_157411.sign), 0);
		}
		
		}
		
		}
		else {
			sign_157428 = true;
		}
		
		if (spec_157411.padWithZero) {
		var sign_str_157431 = [];
		if (sign_157428) {
		sign_str_157431 = nimCopy(null, nimCharToStr(f_157427[0][0]), NTI138);
		f_157427[0] = nimCopy(null, HEX5BHEX5D_90105(f_157427[0], HEX2EHEX2E_90053(1, 1)), NTI138);
		}
		
		var to_fill_157486 = ((spec_157411.minimumWidth - (f_157427[0] != null ? f_157427[0].length : 0)) - (sign_157428 ? 1:0));
		if ((0 < to_fill_157486)) {
		f_157427[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_157486)).concat(f_157427[0]), NTI138);
		}
		
		if (sign_157428) {
		f_157427[0] = nimCopy(null, (sign_str_157431).concat(f_157427[0]), NTI138);
		}
		
		}
		
		if ((spec_157411.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_157411.align;
		}
		
		var align_157489 = Tmp1;
		var result_157490 = align_string_146827(f_157427[0], spec_157411.minimumWidth, align_157489, spec_157411.fill);
		if ((ConstSet12[spec_157411.typ] != undefined)) {
		if (res_157410[res_157410_Idx] != null) { res_157410[res_157410_Idx] = (res_157410[res_157410_Idx]).concat(nsuToUpperAsciiStr(result_157490)); } else { res_157410[res_157410_Idx] = nsuToUpperAsciiStr(result_157490).slice(); };
		}
		else {
		if (res_157410[res_157410_Idx] != null) { res_157410[res_157410_Idx] = (res_157410[res_157410_Idx]).concat(result_157490); } else { res_157410[res_157410_Idx] = result_157490.slice(); };
		}
		

	
}

function HEX24_156746(params_156748) {
	var result_156749 = null;

		var fmt_res_156753 = [mnewString(0)];
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit("    slope: ")); } else { fmt_res_156753[0] = makeNimstrLit("    slope: "); };
		format_157402(params_156748.slope, makeNimstrLit(".3f"), fmt_res_156753, 0);
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_156753[0] = makeNimstrLit(" (var: "); };
		format_157402(params_156748.slope_variance, makeNimstrLit(".3f"), fmt_res_156753, 0);
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_156753[0] = makeNimstrLit(", CI width: "); };
		format_157402(params_156748.slope_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_156753, 0);
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit(")\x0A    intercept: ")); } else { fmt_res_156753[0] = makeNimstrLit(")\x0A    intercept: "); };
		format_157402(params_156748.intercept, makeNimstrLit(".3f"), fmt_res_156753, 0);
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit(" (var: ")); } else { fmt_res_156753[0] = makeNimstrLit(" (var: "); };
		format_157402(params_156748.intercept_variance, makeNimstrLit(".3f"), fmt_res_156753, 0);
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit(", CI width: ")); } else { fmt_res_156753[0] = makeNimstrLit(", CI width: "); };
		format_157402(params_156748.intercept_width_confidence_interval, makeNimstrLit(".3f"), fmt_res_156753, 0);
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit(")\x0A    R2: ")); } else { fmt_res_156753[0] = makeNimstrLit(")\x0A    R2: "); };
		format_157402(params_156748.R2, makeNimstrLit(".3f"), fmt_res_156753, 0);
		if (fmt_res_156753[0] != null) { fmt_res_156753[0] = (fmt_res_156753[0]).concat(makeNimstrLit("\x0A    SSE: ")); } else { fmt_res_156753[0] = makeNimstrLit("\x0A    SSE: "); };
		format_157402(params_156748.residual_sum_squares, makeNimstrLit(".3f"), fmt_res_156753, 0);
		result_156749 = nimCopy(null, fmt_res_156753[0], NTI138);

	return result_156749;

}

function add_quoted_186602(s_186606, s_186606_Idx, x_186608) {
		if (s_186606[s_186606_Idx] != null) { s_186606[s_186606_Idx] = (s_186606[s_186606_Idx]).concat(HEX24_156746(x_186608)); } else { s_186606[s_186606_Idx] = HEX24_156746(x_186608).slice(); };

	
}

function HEX24_186402(x_186406) {
	var result_186407 = [null];

		result_186407[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_186408 = true;
		if (!(first_element_186408)) {
		if (result_186407[0] != null) { result_186407[0] = (result_186407[0]).concat(makeNimstrLit(", ")); } else { result_186407[0] = makeNimstrLit(", "); };
		}
		
		if (result_186407[0] != null) { result_186407[0] = (result_186407[0]).concat(makeNimstrLit("mean_structure")); } else { result_186407[0] = makeNimstrLit("mean_structure"); };
		if (result_186407[0] != null) { result_186407[0] = (result_186407[0]).concat(makeNimstrLit(": ")); } else { result_186407[0] = makeNimstrLit(": "); };
		add_quoted_186602(result_186407, 0, x_186406.mean_structure);
		first_element_186408 = false;
		if (!(first_element_186408)) {
		if (result_186407[0] != null) { result_186407[0] = (result_186407[0]).concat(makeNimstrLit(", ")); } else { result_186407[0] = makeNimstrLit(", "); };
		}
		
		if (result_186407[0] != null) { result_186407[0] = (result_186407[0]).concat(makeNimstrLit("autoregressive_structure")); } else { result_186407[0] = makeNimstrLit("autoregressive_structure"); };
		if (result_186407[0] != null) { result_186407[0] = (result_186407[0]).concat(makeNimstrLit(": ")); } else { result_186407[0] = makeNimstrLit(": "); };
		add_quoted_186602(result_186407, 0, x_186406.autoregressive_structure);
		first_element_186408 = false;
		if (result_186407[0] != null) { result_186407[0] = (result_186407[0]).concat(makeNimstrLit(")")); } else { result_186407[0] = makeNimstrLit(")"); };

	return result_186407[0];

}

function add_quoted_186202(s_186206, s_186206_Idx, x_186208) {
		if (s_186206[s_186206_Idx] != null) { s_186206[s_186206_Idx] = (s_186206[s_186206_Idx]).concat(HEX24_186402(x_186208)); } else { s_186206[s_186206_Idx] = HEX24_186402(x_186208).slice(); };

	
}

function add_quoted_195802(s_195806, s_195806_Idx, x_195808) {
		if (s_195806[s_195806_Idx] != null) { s_195806[s_195806_Idx] = (s_195806[s_195806_Idx]).concat(cstrToNimstr((x_195808)+"")); } else { s_195806[s_195806_Idx] = cstrToNimstr((x_195808)+"").slice(); };

	
}

function collection_to_string_195611(x_195615, prefix_195617, separator_195619, suffix_195621) {
	var result_195622 = [null];

		result_195622[0] = nimCopy(null, prefix_195617, NTI138);
		var first_element_195623 = true;
		L1: do {
			var value_195632 = 0;
			var i_196018 = 0;
			var l_196020 = (x_195615 != null ? x_195615.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_196018 < l_196020)) break L3;
						value_195632 = x_195615[i_196018];
						if (first_element_195623) {
						first_element_195623 = false;
						}
						else {
						if (result_195622[0] != null) { result_195622[0] = (result_195622[0]).concat(separator_195619); } else { result_195622[0] = separator_195619.slice(); };
						}
						
						add_quoted_195802(result_195622, 0, value_195632);
						i_196018 += 1;
					}
			} while(false);
		} while(false);
		if (result_195622[0] != null) { result_195622[0] = (result_195622[0]).concat(suffix_195621); } else { result_195622[0] = suffix_195621.slice(); };

	return result_195622[0];

}

function HEX24_195603(x_195608) {
	var result_195609 = null;

		result_195609 = nimCopy(null, collection_to_string_195611(x_195608, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_195609;

}

function add_quoted_195402(s_195406, s_195406_Idx, x_195408) {
		if (s_195406[s_195406_Idx] != null) { s_195406[s_195406_Idx] = (s_195406[s_195406_Idx]).concat(HEX24_195603(x_195408)); } else { s_195406[s_195406_Idx] = HEX24_195603(x_195408).slice(); };

	
}

function HEX24_194602(x_194606) {
	var result_194607 = [null];

		result_194607[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_194608 = true;
		if (!(first_element_194608)) {
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(", ")); } else { result_194607[0] = makeNimstrLit(", "); };
		}
		
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit("change_points")); } else { result_194607[0] = makeNimstrLit("change_points"); };
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(": ")); } else { result_194607[0] = makeNimstrLit(": "); };
		add_quoted_195402(result_194607, 0, x_194606.change_points);
		first_element_194608 = false;
		if (!(first_element_194608)) {
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(", ")); } else { result_194607[0] = makeNimstrLit(", "); };
		}
		
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit("loglikelihood")); } else { result_194607[0] = makeNimstrLit("loglikelihood"); };
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(": ")); } else { result_194607[0] = makeNimstrLit(": "); };
		add_quoted_155002(result_194607, 0, x_194606.loglikelihood);
		first_element_194608 = false;
		if (!(first_element_194608)) {
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(", ")); } else { result_194607[0] = makeNimstrLit(", "); };
		}
		
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit("best_loglikelihood")); } else { result_194607[0] = makeNimstrLit("best_loglikelihood"); };
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(": ")); } else { result_194607[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_194607, 0, x_194606.best_loglikelihood);
		first_element_194608 = false;
		if (!(first_element_194608)) {
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(", ")); } else { result_194607[0] = makeNimstrLit(", "); };
		}
		
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit("best_likelihood")); } else { result_194607[0] = makeNimstrLit("best_likelihood"); };
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(": ")); } else { result_194607[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_194607, 0, x_194606.best_likelihood);
		first_element_194608 = false;
		if (!(first_element_194608)) {
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(", ")); } else { result_194607[0] = makeNimstrLit(", "); };
		}
		
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit("best_time")); } else { result_194607[0] = makeNimstrLit("best_time"); };
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(": ")); } else { result_194607[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_194607, 0, x_194606.best_time);
		first_element_194608 = false;
		if (!(first_element_194608)) {
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(", ")); } else { result_194607[0] = makeNimstrLit(", "); };
		}
		
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit("best_index")); } else { result_194607[0] = makeNimstrLit("best_index"); };
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(": ")); } else { result_194607[0] = makeNimstrLit(": "); };
		add_quoted_195802(result_194607, 0, x_194606.best_index);
		first_element_194608 = false;
		if (result_194607[0] != null) { result_194607[0] = (result_194607[0]).concat(makeNimstrLit(")")); } else { result_194607[0] = makeNimstrLit(")"); };

	return result_194607[0];

}

function add_quoted_194402(s_194406, s_194406_Idx, x_194408) {
		if (s_194406[s_194406_Idx] != null) { s_194406[s_194406_Idx] = (s_194406[s_194406_Idx]).concat(HEX24_194602(x_194408)); } else { s_194406[s_194406_Idx] = HEX24_194602(x_194408).slice(); };

	
}

function collection_to_string_208812(x_208816, prefix_208818, separator_208820, suffix_208822) {
	var result_208823 = [null];

		result_208823[0] = nimCopy(null, prefix_208818, NTI138);
		var first_element_208824 = true;
		L1: do {
			var value_208885 = 0.0;
			var i_209013 = 0;
			if ((i_209013 <= 1)) {
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						value_208885 = x_208816[i_209013];
						if (first_element_208824) {
						first_element_208824 = false;
						}
						else {
						if (result_208823[0] != null) { result_208823[0] = (result_208823[0]).concat(separator_208820); } else { result_208823[0] = separator_208820.slice(); };
						}
						
						add_quoted_155602(result_208823, 0, value_208885);
						if ((1 <= i_209013)) {
						break L2;
						}
						
						i_209013 += 1;
					}
			} while(false);
			}
			
		} while(false);
		if (result_208823[0] != null) { result_208823[0] = (result_208823[0]).concat(suffix_208822); } else { result_208823[0] = suffix_208822.slice(); };

	return result_208823[0];

}

function HEX24_208803(x_208809) {
	var result_208810 = null;

		result_208810 = nimCopy(null, collection_to_string_208812(x_208809, makeNimstrLit("["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);

	return result_208810;

}

function add_quoted_208602(s_208606, s_208606_Idx, x_208608) {
		if (s_208606[s_208606_Idx] != null) { s_208606[s_208606_Idx] = (s_208606[s_208606_Idx]).concat(HEX24_208803(x_208608)); } else { s_208606[s_208606_Idx] = HEX24_208803(x_208608).slice(); };

	
}

function HEX24_207202(x_207206) {
	var result_207207 = [null];

		result_207207[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_207208 = true;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("intercept")); } else { result_207207[0] = makeNimstrLit("intercept"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.intercept);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("intercept_variance")); } else { result_207207[0] = makeNimstrLit("intercept_variance"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.intercept_variance);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("intercept_confidence_interval")); } else { result_207207[0] = makeNimstrLit("intercept_confidence_interval"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_208602(result_207207, 0, x_207206.intercept_confidence_interval);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("intercept_width_confidence_interval")); } else { result_207207[0] = makeNimstrLit("intercept_width_confidence_interval"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.intercept_width_confidence_interval);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("intercept_p_value")); } else { result_207207[0] = makeNimstrLit("intercept_p_value"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.intercept_p_value);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("slope")); } else { result_207207[0] = makeNimstrLit("slope"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.slope);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("slope_variance")); } else { result_207207[0] = makeNimstrLit("slope_variance"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.slope_variance);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("slope_confidence_interval")); } else { result_207207[0] = makeNimstrLit("slope_confidence_interval"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_208602(result_207207, 0, x_207206.slope_confidence_interval);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("slope_width_confidence_interval")); } else { result_207207[0] = makeNimstrLit("slope_width_confidence_interval"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.slope_width_confidence_interval);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("slope_p_value")); } else { result_207207[0] = makeNimstrLit("slope_p_value"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.slope_p_value);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("autoregressive_slope")); } else { result_207207[0] = makeNimstrLit("autoregressive_slope"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.autoregressive_slope);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("autoregressive_slope_variance")); } else { result_207207[0] = makeNimstrLit("autoregressive_slope_variance"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.autoregressive_slope_variance);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("autoregressive_slope_confidence_interval")); } else { result_207207[0] = makeNimstrLit("autoregressive_slope_confidence_interval"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_208602(result_207207, 0, x_207206.autoregressive_slope_confidence_interval);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("autoregressive_slope_width_confidence_interval")); } else { result_207207[0] = makeNimstrLit("autoregressive_slope_width_confidence_interval"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.autoregressive_slope_width_confidence_interval);
		first_element_207208 = false;
		if (!(first_element_207208)) {
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(", ")); } else { result_207207[0] = makeNimstrLit(", "); };
		}
		
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit("autoregressive_slope_p_value")); } else { result_207207[0] = makeNimstrLit("autoregressive_slope_p_value"); };
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(": ")); } else { result_207207[0] = makeNimstrLit(": "); };
		add_quoted_155602(result_207207, 0, x_207206.autoregressive_slope_p_value);
		first_element_207208 = false;
		if (result_207207[0] != null) { result_207207[0] = (result_207207[0]).concat(makeNimstrLit(")")); } else { result_207207[0] = makeNimstrLit(")"); };

	return result_207207[0];

}

function add_quoted_207002(s_207006, s_207006_Idx, x_207008) {
		if (s_207006[s_207006_Idx] != null) { s_207006[s_207006_Idx] = (s_207006[s_207006_Idx]).concat(HEX24_207202(x_207008)); } else { s_207006[s_207006_Idx] = HEX24_207202(x_207008).slice(); };

	
}

function HEX24_185016(x_185020) {
	var result_185021 = [null];

		result_185021[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		var first_element_185022 = true;
		if (!(first_element_185022)) {
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(", ")); } else { result_185021[0] = makeNimstrLit(", "); };
		}
		
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit("before_change")); } else { result_185021[0] = makeNimstrLit("before_change"); };
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(": ")); } else { result_185021[0] = makeNimstrLit(": "); };
		add_quoted_186202(result_185021, 0, x_185020.before_change);
		first_element_185022 = false;
		if (!(first_element_185022)) {
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(", ")); } else { result_185021[0] = makeNimstrLit(", "); };
		}
		
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit("after_change")); } else { result_185021[0] = makeNimstrLit("after_change"); };
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(": ")); } else { result_185021[0] = makeNimstrLit(": "); };
		add_quoted_186202(result_185021, 0, x_185020.after_change);
		first_element_185022 = false;
		if (!(first_element_185022)) {
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(", ")); } else { result_185021[0] = makeNimstrLit(", "); };
		}
		
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit("likelihood")); } else { result_185021[0] = makeNimstrLit("likelihood"); };
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(": ")); } else { result_185021[0] = makeNimstrLit(": "); };
		add_quoted_194402(result_185021, 0, x_185020.likelihood);
		first_element_185022 = false;
		if (!(first_element_185022)) {
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(", ")); } else { result_185021[0] = makeNimstrLit(", "); };
		}
		
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit("parameter_differences")); } else { result_185021[0] = makeNimstrLit("parameter_differences"); };
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(": ")); } else { result_185021[0] = makeNimstrLit(": "); };
		add_quoted_207002(result_185021, 0, x_185020.parameter_differences);
		first_element_185022 = false;
		if (result_185021[0] != null) { result_185021[0] = (result_185021[0]).concat(makeNimstrLit(")")); } else { result_185021[0] = makeNimstrLit(")"); };

	return result_185021[0];

}

function test_model_change_point_184040(change_point_184042, candidates_184043, verbose_184044) {
		rawEcho(makeNimstrLit("Robust Interrupted Time Series Model v3.0\x0A"));
		rawEcho(makeNimstrLit("Boot sample test"));
		L1: do {
			var HEX3Atmp_184209 = nimCopy(null, [1.0000000000000000e+00, 2.0000000000000000e+00, 3.0000000000000000e+00, 4.0000000000000000e+00, 5.0000000000000000e+00, 6.0000000000000000e+00, 7.0000000000000000e+00, 8.0000000000000000e+00, 9.0000000000000000e+00, 1.0000000000000000e+01, 1.1000000000000000e+01, 1.2000000000000000e+01, 1.3000000000000000e+01, 1.4000000000000000e+01, 1.5000000000000000e+01, 1.6000000000000000e+01, 1.7000000000000000e+01, 1.8000000000000000e+01, 1.9000000000000000e+01, 2.0000000000000000e+01], NTI184062);
			var i_184213 = 0;
			var result_184230 = new_seq_148619((HEX3Atmp_184209 != null ? HEX3Atmp_184209.length : 0));
			L2: do {
				var it_184239 = 0.0;
				var i_215021 = 0;
				var l_215023 = (HEX3Atmp_184209 != null ? HEX3Atmp_184209.length : 0);
				L3: do {
						L4: while (true) {
						if (!(i_215021 < l_215023)) break L4;
							it_184239 = HEX3Atmp_184209[i_215021];
							result_184230[i_184213] = it_184239;
							i_184213 += 1;
							i_215021 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var x_184251 = nimCopy(null, result_184230, NTI148624);
		L5: do {
			var HEX3Atmp_184609 = nimCopy(null, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], NTI184274);
			var i_184613 = 0;
			var result_184630 = new_seq_148619((HEX3Atmp_184609 != null ? HEX3Atmp_184609.length : 0));
			L6: do {
				var it_184639 = 0;
				var i_215029 = 0;
				var l_215031 = (HEX3Atmp_184609 != null ? HEX3Atmp_184609.length : 0);
				L7: do {
						L8: while (true) {
						if (!(i_215029 < l_215031)) break L8;
							it_184639 = HEX3Atmp_184609[i_215029];
							result_184630[i_184613] = it_184639;
							i_184613 += 1;
							i_215029 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var y_184651 = nimCopy(null, result_184630, NTI148624);
		L9: do {
			var t_184671 = 0;
			var colontmp__215035 = 0;
			colontmp__215035 = (x_184251 != null ? (x_184251.length-1) : -1);
			var res_215038 = 0;
			L10: do {
					L11: while (true) {
					if (!(res_215038 <= colontmp__215035)) break L11;
						t_184671 = res_215038;
						y_184651[t_184671] = (y_184651[t_184671] + ((0.0 * rand_164512(1000)) / 1.0000000000000000e+03));
						res_215038 += 1;
					}
			} while(false);
		} while(false);
		if (verbose_184044) {
		var fmt_res_184676 = mnewString(0);
		if (fmt_res_184676 != null) { fmt_res_184676 = (fmt_res_184676).concat(makeNimstrLit("X: ")); } else { fmt_res_184676 = makeNimstrLit("X: "); };
		if (fmt_res_184676 != null) { fmt_res_184676 = (fmt_res_184676).concat(HEX24_155203(x_184251)); } else { fmt_res_184676 = HEX24_155203(x_184251).slice(); };
		rawEcho(fmt_res_184676);
		var fmt_res_184814 = mnewString(0);
		if (fmt_res_184814 != null) { fmt_res_184814 = (fmt_res_184814).concat(makeNimstrLit("Y: ")); } else { fmt_res_184814 = makeNimstrLit("Y: "); };
		if (fmt_res_184814 != null) { fmt_res_184814 = (fmt_res_184814).concat(HEX24_155203(y_184651)); } else { fmt_res_184814 = HEX24_155203(y_184651).slice(); };
		rawEcho(fmt_res_184814);
		}
		
		var candidates_after_185012 = candidates_184043;
		var candidates_before_185013 = candidates_184043;
		var model_185014 = robust_interrupted_time_series(x_184251, y_184651, change_point_184042, candidates_before_185013, candidates_after_185012);
		if (verbose_184044) {
		rawEcho(HEX24_185016(model_185014));
		}
		

	
}
test_model_change_point_184040(7, 5, true);
exports.robust_interrupted_time_series = (X, Y, change_point, candidates_before, candidates_after) => {LENGTH_VECTOR = X.length; return robust_interrupted_time_series(X, Y, change_point, candidates_before, candidates_after)}; 
exports.robust_interrupted_time_series_approximated = (sampling, X, Y, change_point, candidates_before, candidates_after) => {LENGTH_VECTOR = X.length; return robust_interrupted_time_series_approximated(sampling, X, Y, change_point, candidates_before, candidates_after)}; 
exports.fix_vector = (X) => {LENGTH_VECTOR = X.length; return fix_vector(X)}
