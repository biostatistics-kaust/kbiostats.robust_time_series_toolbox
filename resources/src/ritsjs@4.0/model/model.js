/* Generated by the Nim Compiler v1.0.6 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI215893 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI223188 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI226418 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI207266 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI210107 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI210106 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI223163 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI223162 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI225619 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI224240 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170586 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI41238 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI216858 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI215666 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI216760 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI216759 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI209555 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI209554 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI216741 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI216740 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI216737 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI216736 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI217438 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI164064 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI164068 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI164067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI74228 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI98432 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI101247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI215715 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI215481 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
NTI215481.base = NTI124;
NTI215715.base = NTI124;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
var NNI101247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI98432, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI101247.node = NNI101247;
var NNI74228 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI74228.node = NNI74228;
NTI164068.base = NTI124;
NTI164067.base = NTI164068;
NTI164064.base = NTI124;
var NNI209555 = {kind: 1, offset: "dof", len: 0, typ: NTI104, name: "dof", sons: null};
NTI209555.node = NNI209555;
NTI209554.base = NTI209555;
var NNI216741 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI209554, name: "distribution", sons: null}, 
{kind: 1, offset: "location", len: 0, typ: NTI124, name: "location", sons: null}, 
{kind: 1, offset: "scale", len: 0, typ: NTI124, name: "scale", sons: null}]};
NTI216741.node = NNI216741;
NTI216740.base = NTI216741;
var NNI215666 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI215666, name: "twoTailed", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI215666, name: "oneTailed", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI215666, name: "rightTailed", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI215666, name: "leftTailed", len: 0, sons: null}}};
NTI215666.node = NNI215666;
var NNI216760 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI216740, name: "distribution", sons: null}, 
{kind: 1, offset: "test_score", len: 0, typ: NTI124, name: "test_score", sons: null}, 
{kind: 1, offset: "test_type", len: 0, typ: NTI215666, name: "test_type", sons: null}]};
NTI216760.node = NNI216760;
NTI216759.base = NTI216760;
var NNI216737 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI216740, name: "distribution", sons: null}, 
{kind: 1, offset: "hypothesis_test", len: 0, typ: NTI216759, name: "hypothesis_test", sons: null}]};
NTI216737.node = NNI216737;
NTI216736.base = NTI216737;
NTI217438.base = NTI216736;
NTI216858.base = NTI138;
NTI41238.base = NTI138;
NTI170586.base = NTI124;
NTI170433.base = NTI124;
NTI224240.base = NTI124;
var NNI210107 = {kind: 1, offset: "dof", len: 0, typ: NTI124, name: "dof", sons: null};
NTI210107.node = NNI210107;
NTI210106.base = NTI210107;
var NNI223163 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI210106, name: "distribution", sons: null}, 
{kind: 1, offset: "test_score", len: 0, typ: NTI124, name: "test_score", sons: null}, 
{kind: 1, offset: "test_type", len: 0, typ: NTI215666, name: "test_type", sons: null}]};
NTI223163.node = NNI223163;
NTI223162.base = NTI223163;
NTI225619.base = NTI223162;
NTI207266.base = NTI124;
NTI226418.base = NTI223162;
NTI223188.base = NTI104;
NTI215893.base = NTI124;
						var cof_206078 = [7.6180091729471457e+01, -8.6505320329416776e+01, 2.4014098240830911e+01, -1.2317395724501550e+00, 1.2086509738661790e-03, -5.3952393849530003e-06];

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		throw e_21618;

	
}

function nimCharToStr(x_21062) {
	var result_21063 = null;

		result_21063 = nimCopy(null, mnewString(1), NTI138);
		result_21063[0] = x_21062;

	return result_21063;

}

function addChar(x_25311, c_25312) {
		x_25311.push(c_25312);

	
}

function nimMax(a_24221, b_24222) {
		var Tmp1;

	var result_24223 = 0;

	BeforeRet: do {
		if ((b_24222 <= a_24221)) {
		Tmp1 = a_24221;
		}
		else {
		Tmp1 = b_24222;
		}
		
		result_24223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24223;

}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet9 = setConstr(46, 44);
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}
					var cof_206589 = [-1.3026537197817094e+00, 6.4196979235649021e-01, 1.9476473204185836e-02, -9.5615147868086305e-03, -9.4659534448203605e-04, 3.6683949785276101e-04, 4.2523324806907003e-05, -2.0278578112534001e-05, -1.6242900046470000e-06, 1.3036558355800000e-06, 1.5626441722000001e-08, -8.5238095914999995e-08, 6.5290544390000001e-09, 5.0593434950000004e-09, -9.9136415599999992e-10, -2.2736512200000000e-10, 9.6467910999999994e-11, 2.3940379999999998e-12, -6.8860269999999998e-12, 8.9448700000000004e-13, 3.1309199999999997e-13, -1.1270800000000000e-13, 3.8099999999999998e-16, 7.1059999999999999e-15, -1.5230000000000001e-15, -9.3999999999999999e-17, 1.2099999999999999e-16, -2.7999999999999999e-17];
process.exitCode = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];

function classify_54030(x_54032) {
	var result_54033 = 0;

	BeforeRet: do {
		if ((x_54032 == 0.0)) {
		if (((1.0000000000000000e+00 / x_54032) == Infinity)) {
		result_54033 = 2;
		break BeforeRet;
		}
		else {
			result_54033 = 3;
			break BeforeRet;
		}
		
		}
		
		if (((x_54032 * 5.0000000000000000e-01) == x_54032)) {
		if ((0.0 < x_54032)) {
		result_54033 = 5;
		break BeforeRet;
		}
		else {
			result_54033 = 6;
			break BeforeRet;
		}
		
		}
		
		if (!((x_54032 == x_54032))) {
		result_54033 = 4;
		break BeforeRet;
		}
		
		result_54033 = 0;
		break BeforeRet;
	} while (false);

	return result_54033;

}

function interpolated_if_not_valid_171829(data_171831, i_171832) {
			var Tmp1;

	var result_171833 = 0.0;

	BeforeRet: do {
		var v_171834 = data_171831[i_171832];
			if ((((classify_54030(v_171834) == 4) || (classify_54030(v_171834) == 5)) || (classify_54030(v_171834) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_171834 * 1.0000000000000000e+01) / 1.0000000000000000e+01) == v_171834));			}		if (Tmp1) {
		if ((i_171832 == 0)) {
		result_171833 = data_171831[(i_171832 + 1)];
		break BeforeRet;
		}
		else {
		if ((i_171832 == (data_171831 != null ? (data_171831.length-1) : -1))) {
		result_171833 = data_171831[(i_171832 - 1)];
		break BeforeRet;
		}
		else {
			result_171833 = (5.0000000000000000e-01 * (data_171831[(i_171832 - 1)] + data_171831[(i_171832 + 1)]));
			break BeforeRet;
		}
		}
		}
		
		result_171833 = data_171831[i_171832];
		break BeforeRet;
	} while (false);

	return result_171833;

}

function fill_non_numerical(v_171877) {
	var result_171878 = null;

		L1: do {
			var k_171896 = 0;
			var colontmp__171918 = 0;
			colontmp__171918 = (v_171877 != null ? (v_171877.length-1) : -1);
			var res_171919 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_171919 <= colontmp__171918)) break L3;
						k_171896 = res_171919;
						if (result_171878 != null) { result_171878.push(interpolated_if_not_valid_171829(v_171877, k_171896)); } else { result_171878 = [interpolated_if_not_valid_171829(v_171877, k_171896)]; };
						res_171919 += 1;
					}
			} while(false);
		} while(false);

	return result_171878;

}
var state_186005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_197031 = [null];
var local_instance_197032 = [null];
var lc_205273 = [{}];

function to_float_10657(i_10659) {
	var result_10660 = 0.0;

		result_10660 = i_10659;

	return result_10660;

}

function min_230903(x_230907) {
	var result_230908 = 0.0;

		result_230908 = x_230907[0];
		L1: do {
			var i_230922 = 0;
			var colontmp__231005 = 0;
			colontmp__231005 = (x_230907 != null ? (x_230907.length-1) : -1);
			var res_231006 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231006 <= colontmp__231005)) break L3;
						i_230922 = res_231006;
						if ((x_230907[i_230922] < result_230908)) {
						result_230908 = x_230907[i_230922];
						}
						
						res_231006 += 1;
					}
			} while(false);
		} while(false);

	return result_230908;

}

function HEX2DHEX3D_183522(x_183526, x_183526_Idx, y_183527) {
		x_183526[x_183526_Idx] = (x_183526[x_183526_Idx] - y_183527);

	
}

function HEX2BHEX3D_60121(x_60125, x_60125_Idx, y_60126) {
		x_60125[x_60125_Idx] = (x_60125[x_60125_Idx] + y_60126);

	
}

function gammaln_206072(x_206074) {
	var result_206075 = 0.0;

	BeforeRet: do {
		var ser_206079 = [1.0000000001900149e+00];
		var xx_206080 = x_206074;
		var y_206081 = [x_206074];
		var tmp_206082 = [(x_206074 + 5.5000000000000000e+00)];
		HEX2DHEX3D_183522(tmp_206082, 0, ((xx_206080 + 5.0000000000000000e-01) * Math.log(tmp_206082[0])));
		L1: do {
			var j_206105 = 0;
			var res_231024 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231024 <= 5)) break L3;
						j_206105 = res_231024;
						HEX2BHEX3D_60121(y_206081, 0, 1.0000000000000000e+00);
						HEX2BHEX3D_60121(ser_206079, 0, (cof_206078[j_206105] / y_206081[0]));
						res_231024 += 1;
					}
			} while(false);
		} while(false);
		result_206075 = (Math.log(((2.5066282746310007e+00 * ser_206079[0]) / xx_206080)) - tmp_206082[0]);
		break BeforeRet;
	} while (false);

	return result_206075;

}

function to_int_10691(f_10693) {
		var Tmp1;

	var result_10694 = 0;

		if ((0.0 <= f_10693)) {
		Tmp1 = (((f_10693 + 5.0000000000000000e-01))|0);
		}
		else {
		Tmp1 = (((f_10693 - 5.0000000000000000e-01))|0);
		}
		
		result_10694 = Tmp1;

	return result_10694;

}

function HEX2AHEX3D_158841(x_158845, x_158845_Idx, y_158846) {
		x_158845[x_158845_Idx] = (x_158845[x_158845_Idx] * y_158846);

	
}

function low_reg_gamma_206242(a_206244, x_206245) {
		var Tmp1;

	var result_206246 = 0.0;

	BeforeRet: do {
		var ap_206247 = [a_206244];
		var sum_206249 = [(1.0000000000000000e+00 - (0.0 / a_206244))];
		var del_206250 = [sum_206249[0]];
		var b_206251 = [((x_206245 + 1.0000000000000000e+00) - a_206244)];
		var c_206252 = 9.9999999999999988e+29;
		var d_206253 = (1.0000000000000000e+00 / b_206251[0]);
		var h_206254 = [d_206253];
		var an_206255 = 0.0;
		var endval_206256 = 0.0;
		var aln_206257 = gammaln_206072(a_206244);
		if ((1.0000000000000000e+00 <= a_206244)) {
		Tmp1 = a_206244;
		}
		else {
		Tmp1 = (1.0000000000000000e+00 / a_206244);
		}
		
		var itmax_206258 = to_int_10691((((-1.0000000000000000e+00 + (Math.log(Tmp1) * 8.5000000000000000e+00)) + (a_206244 * 4.0000000000000002e-01)) + 1.7000000000000000e+01));
		if (((x_206245 < 0.0) || (a_206244 <= 0.0))) {
		result_206246 = NaN;
		break BeforeRet;
		}
		else {
		if ((x_206245 < (a_206244 + 1.0000000000000000e+00))) {
		L2: do {
			var i_206267 = 0;
			var res_231012 = 1;
			L3: do {
					L4: while (true) {
					if (!(res_231012 <= itmax_206258)) break L4;
						i_206267 = res_231012;
						HEX2BHEX3D_60121(ap_206247, 0, 1.0000000000000000e+00);
						HEX2AHEX3D_158841(del_206250, 0, (x_206245 / ap_206247[0]));
						HEX2BHEX3D_60121(sum_206249, 0, del_206250[0]);
						res_231012 += 1;
					}
			} while(false);
		} while(false);
		var p_a_x_206289 = [(sum_206249[0] * Math.exp(((-(x_206245) + (a_206244 * Math.log(x_206245))) - aln_206257)))];
		HEX2AHEX3D_158841(p_a_x_206289, 0, 5.0000000000000000e-01);
		result_206246 = p_a_x_206289[0];
		break BeforeRet;
		}
		}
		L5: do {
			var i_206305 = 0;
			var res_231018 = 1;
			L6: do {
					L7: while (true) {
					if (!(res_231018 <= itmax_206258)) break L7;
						i_206305 = res_231018;
						an_206255 = (-(to_float_10657(i_206305)) * (to_float_10657(i_206305) - a_206244));
						HEX2BHEX3D_60121(b_206251, 0, 2.0000000000000000e+00);
						d_206253 = ((an_206255 * d_206253) + b_206251[0]);
						c_206252 = (b_206251[0] + (an_206255 / c_206252));
						d_206253 = (1.0000000000000000e+00 / d_206253);
						HEX2AHEX3D_158841(h_206254, 0, (d_206253 * c_206252));
						res_231018 += 1;
					}
			} while(false);
		} while(false);
		result_206246 = (1.0000000000000000e+00 - (h_206254[0] * Math.exp(((-(x_206245) + (a_206244 * Math.log(x_206245))) - aln_206257))));
		break BeforeRet;
	} while (false);

	return result_206246;

}

function cdf_210230(d_210232, x_210233) {
	var result_210234 = 0.0;

	BeforeRet: do {
		if ((x_210233 <= 0.0)) {
		result_210234 = 0.0;
		break BeforeRet;
		}
		
		result_210234 = low_reg_gamma_206242((d_210232.dof / 2.0000000000000000e+00), (x_210233 / 2.0000000000000000e+00));
		break BeforeRet;
	} while (false);

	return result_210234;

}

function abs_12649(x_12651) {
		var Tmp1;

	var result_12652 = 0.0;

		if ((x_12651 < 0.0)) {
		Tmp1 = -(x_12651);
		}
		else {
		Tmp1 = x_12651;
		}
		
		result_12652 = Tmp1;

	return result_12652;

}

function p_value_224032(sd_224036) {
		var Tmp1;
			var Tmp2;

	var result_224037 = 0.0;

	BeforeRet: do {
		if ((sd_224036.test_type == 0)) {
		result_224037 = ((1.0000000000000000e+00 - cdf_210230(sd_224036.distribution, abs_12649(sd_224036.test_score))) + cdf_210230(sd_224036.distribution, -(abs_12649(sd_224036.test_score))));
		break BeforeRet;
		}
		
		if ((sd_224036.test_type == 3)) {
		result_224037 = cdf_210230(sd_224036.distribution, sd_224036.test_score);
		break BeforeRet;
		}
		
		if ((sd_224036.test_type == 2)) {
		result_224037 = (1.0000000000000000e+00 - cdf_210230(sd_224036.distribution, sd_224036.test_score));
		break BeforeRet;
		}
		
		var p1_224059 = (1.0000000000000000e+00 - cdf_210230(sd_224036.distribution, sd_224036.test_score));
		var p2_224060 = cdf_210230(sd_224036.distribution, sd_224036.test_score);
			if (!(p1_224059 < p2_224060)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_224059);			}		if (Tmp2) {
		Tmp1 = p1_224059;
		}
		else {
		Tmp1 = p2_224060;
		}
		
		result_224037 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_224037;

}

function max_12737(x_12739, y_12740) {
		var Tmp1;
			var Tmp2;

	var result_12741 = 0.0;

			if ((y_12740 <= x_12739)) Tmp2 = true; else {				Tmp2 = !((y_12740 == y_12740));			}		if (Tmp2) {
		Tmp1 = x_12739;
		}
		else {
		Tmp1 = y_12740;
		}
		
		result_12741 = Tmp1;

	return result_12741;

}

function HEX5E_164027(a_164029, b_164030) {
	var result_164031 = 0.0;

		result_164031 = Math.pow(a_164029, b_164030);

	return result_164031;

}

function min_12701(x_12703, y_12704) {
		var Tmp1;
			var Tmp2;

	var result_12705 = 0.0;

			if ((x_12703 <= y_12704)) Tmp2 = true; else {				Tmp2 = !((y_12704 == y_12704));			}		if (Tmp2) {
		Tmp1 = x_12703;
		}
		else {
		Tmp1 = y_12704;
		}
		
		result_12705 = Tmp1;

	return result_12705;

}

function gammapinv_206536(p_206538, a_206539) {
		var Tmp1;

	var result_206540 = 0.0;

	BeforeRet: do {
		var a1_206541 = (a_206539 - 1.0000000000000000e+00);
		var eps_206542 = 1.0000000000000000e-08;
		var gln_206543 = gammaln_206072(a_206539);
		var x_206544 = [0.0];
		var err_206545 = 0.0;
		var t_206546 = 0.0;
		var u_206547 = 0.0;
		var pp_206548 = 0.0;
		var lna1_206549 = 0.0;
		var afac_206550 = 0.0;
		if ((1.0000000000000000e+00 <= p_206538)) {
		result_206540 = max_12737(1.0000000000000000e+02, (a_206539 + (1.0000000000000000e+02 * Math.sqrt(a_206539))));
		break BeforeRet;
		}
		
		if ((p_206538 <= 0.0)) {
		result_206540 = 0.0;
		break BeforeRet;
		}
		
		if ((1.0000000000000000e+00 < a_206539)) {
		lna1_206549 = Math.log(a1_206541);
		afac_206550 = Math.exp(((a1_206541 * (lna1_206549 - 1.0000000000000000e+00)) - gln_206543));
		if ((p_206538 < 5.0000000000000000e-01)) {
		Tmp1 = p_206538;
		}
		else {
		Tmp1 = (1.0000000000000000e+00 - p_206538);
		}
		
		pp_206548 = Tmp1;
		t_206546 = Math.sqrt((-2.0000000000000000e+00 * Math.log(pp_206548)));
		x_206544[0] = (((2.3075299999999999e+00 + (t_206546 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_206546 * (9.9229000000000001e-01 + (t_206546 * 4.4810000000000003e-02))))) - t_206546);
		if ((p_206538 < 5.0000000000000000e-01)) {
		x_206544[0] = -(x_206544[0]);
		}
		
		x_206544[0] = max_12737(1.0000000000000000e-03, (a_206539 * HEX5E_164027(((1.0000000000000000e+00 - (1.0000000000000000e+00 / (9.0000000000000000e+00 * a_206539))) - (x_206544[0] / (3.0000000000000000e+00 * Math.sqrt(a_206539)))), 3.0000000000000000e+00)));
		}
		else {
			t_206546 = (1.0000000000000000e+00 - (a_206539 * (2.5300000000000000e-01 + (a_206539 * 1.2000000000000000e-01))));
			if ((p_206538 < t_206546)) {
			x_206544[0] = HEX5E_164027((p_206538 / t_206546), (1.0000000000000000e+00 / a_206539));
			}
			else {
				x_206544[0] = (1.0000000000000000e+00 - Math.log((1.0000000000000000e+00 - ((p_206538 - t_206546) / (1.0000000000000000e+00 - t_206546)))));
			}
			
		}
		
		L2: do {
			var j_206562 = 0;
			var res_231032 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_231032 <= 11)) break L4;
						j_206562 = res_231032;
						if ((x_206544[0] <= 0.0)) {
						result_206540 = 0.0;
						break BeforeRet;
						}
						
						err_206545 = (low_reg_gamma_206242(a_206539, x_206544[0]) - p_206538);
						if ((1.0000000000000000e+00 < a_206539)) {
						t_206546 = (afac_206550 * Math.exp((-((x_206544[0] - a1_206541)) + (a1_206541 * (Math.log(x_206544[0]) - lna1_206549)))));
						}
						else {
							t_206546 = Math.exp(((-(x_206544[0]) + (a1_206541 * Math.log(x_206544[0]))) - gln_206543));
						}
						
						u_206547 = (err_206545 / t_206546);
						t_206546 = (u_206547 / (1.0000000000000000e+00 - (5.0000000000000000e-01 * min_12701(1.0000000000000000e+00, (u_206547 * (((a_206539 - 1.0000000000000000e+00) / x_206544[0]) - 1.0000000000000000e+00))))));
						HEX2DHEX3D_183522(x_206544, 0, t_206546);
						if ((x_206544[0] <= 0.0)) {
						x_206544[0] = (5.0000000000000000e-01 * (x_206544[0] + t_206546));
						}
						
						if ((abs_12649(t_206546) < (eps_206542 * x_206544[0]))) {
						break L2;
						}
						
						res_231032 += 1;
					}
			} while(false);
		} while(false);
		result_206540 = x_206544[0];
		break BeforeRet;
	} while (false);

	return result_206540;

}

function inv_210248(d_210250, p_210251) {
	var result_210252 = 0.0;

	BeforeRet: do {
		result_210252 = (2.0000000000000000e+00 * gammapinv_206536(p_210251, (5.0000000000000000e-01 * d_210250.dof)));
		break BeforeRet;
	} while (false);

	return result_210252;

}

function mean_210266(d_210268) {
	var result_210269 = 0.0;

	BeforeRet: do {
		result_210269 = d_210268.dof;
		break BeforeRet;
	} while (false);

	return result_210269;

}

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function null_confidence_interval_223895(sd_223899, alpha_223900) {
	var result_223901 = null;

	BeforeRet: do {
		var default_ci_223913 = [inv_210248(sd_223899.distribution, (5.0000000000000000e-01 * alpha_223900)), inv_210248(sd_223899.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_223900)))];
		var right_ci_223925 = [inv_210248(sd_223899.distribution, 0.0), inv_210248(sd_223899.distribution, (1.0000000000000000e+00 - alpha_223900))];
		var left_ci_223938 = [inv_210248(sd_223899.distribution, (1.0000000000000000e+00 - alpha_223900)), inv_210248(sd_223899.distribution, 1.0000000000000000e+00)];
		var test_score_223939 = mean_210266(sd_223899.distribution);
		if ((test_score_223939 < default_ci_223913[0])) {
		result_223901 = nimCopy(null, right_ci_223925, NTI215481);
		break BeforeRet;
		}
		else {
		if ((default_ci_223913[1] < test_score_223939)) {
		result_223901 = nimCopy(null, left_ci_223938, NTI215481);
		break BeforeRet;
		}
		}
		result_223901 = nimCopy(null, default_ci_223913, NTI215481);
		break BeforeRet;
	} while (false);

	return result_223901;

}

function parse_saturated_natural_63231(s_63233, b_63235, b_63235_Idx, start_63236) {
			var Tmp1;
					var Tmp4;

	var result_63238 = 0;

		var i_63239 = start_63236;
		if (((i_63239 < (s_63233 != null ? s_63233.length : 0)) && (s_63233[i_63239] == 43))) {
		i_63239 += 1;
		}
		
			if (!(i_63239 < (s_63233 != null ? s_63233.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_63233[i_63239]] != undefined);			}		if (Tmp1) {
		b_63235[b_63235_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_63239 < (s_63233 != null ? s_63233.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_63233[i_63239]] != undefined);					}				if (!Tmp4) break L3;
					var c_63268 = (s_63233[i_63239] - 48);
					if ((b_63235[b_63235_Idx] <= Math.trunc((2147483647 - c_63268) / 10))) {
					b_63235[b_63235_Idx] = ((b_63235[b_63235_Idx] * 10) + c_63268);
					}
					else {
						b_63235[b_63235_Idx] = 2147483647;
					}
					
					i_63239 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_63239 < (s_63233 != null ? s_63233.length : 0)) && (s_63233[i_63239] == 95))) break L6;
								i_63239 += 1;
							}
					} while(false);
				}
		} while(false);
		result_63238 = (i_63239 - start_63236);
		}
		

	return result_63238;

}

function HEX5BHEX5D_101304(s_101308, x_101310) {
	var result_101311 = null;

		var a_101401 = x_101310.a;
		var l_101601 = ((((s_101308 != null ? s_101308.length : 0) - x_101310.b) - a_101401) + 1);
		result_101311 = nimCopy(null, mnewString(l_101601), NTI138);
		L1: do {
			var i_101609 = 0;
			var i_231048 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_231048 < l_101601)) break L3;
						i_101609 = i_231048;
						result_101311[i_101609] = s_101308[(i_101609 + a_101401)];
						i_231048 += 1;
					}
			} while(false);
		} while(false);

	return result_101311;

}

function HEX2EHEX2E_101239(a_101243, b_101244) {
	var result_101250 = {a: 0, b: 0};

		nimCopy(result_101250, {a: a_101243, b: b_101244}, NTI101247);

	return result_101250;

}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function new_seq_23336(len_23339) {
	var result_23341 = null;

		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}
	return result_23341;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function parse_standard_format_specifier_161324(s_161326, start_161327, ignore_unknown_suffix_161329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_161330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_161330.fill = 32;
		result_161330.align = 0;
		result_161330.sign = 45;
		var i_161333 = start_161327;
		if ((((i_161333 + 1) < (s_161326 != null ? s_161326.length : 0)) && (ConstSet2[s_161326[(i_161333 + 1)]] != undefined))) {
		result_161330.fill = s_161326[i_161333];
		result_161330.align = s_161326[(i_161333 + 1)];
		i_161333 += 2;
		}
		else {
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (ConstSet3[s_161326[i_161333]] != undefined))) {
		result_161330.align = s_161326[i_161333];
		i_161333 += 1;
		}
		}
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (ConstSet4[s_161326[i_161333]] != undefined))) {
		result_161330.sign = s_161326[i_161333];
		i_161333 += 1;
		}
		
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (s_161326[i_161333] == 35))) {
		result_161330.alternateForm = true;
		i_161333 += 1;
		}
		
			if (!(((i_161333 + 1) < (s_161326 != null ? s_161326.length : 0)) && (s_161326[i_161333] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_161326[(i_161333 + 1)]] != undefined);			}		if (Tmp1) {
		result_161330.padWithZero = true;
		i_161333 += 1;
		}
		
		var parsed_length_161391 = parse_saturated_natural_63231(s_161326, result_161330, "minimumWidth", i_161333);
		i_161333 += parsed_length_161391;
		if (((i_161333 < (s_161326 != null ? s_161326.length : 0)) && (s_161326[i_161333] == 46))) {
		i_161333 += 1;
		var parsed_length_b_161405 = parse_saturated_natural_63231(s_161326, result_161330, "precision", i_161333);
		i_161333 += parsed_length_b_161405;
		}
		else {
			result_161330.precision = -1;
		}
		
			if (!(i_161333 < (s_161326 != null ? s_161326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_161326[i_161333]] != undefined);			}		if (Tmp2) {
		result_161330.typ = s_161326[i_161333];
		i_161333 += 1;
		}
		
		result_161330.endPosition = i_161333;
			if (!!((i_161333 == (s_161326 != null ? s_161326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_161329);			}		if (Tmp3) {
		var eHEX60gensym161460_161603 = null;
		eHEX60gensym161460_161603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym161460_161603.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_101304(s_161326, HEX2EHEX2E_101239(i_161333, 1)) || []), NTI138);
		eHEX60gensym161460_161603.parent = null;
		raiseException(eHEX60gensym161460_161603, "ValueError");
		}
		

	return result_161330;

}

function mk_digit_161014(v_161016, typ_161017) {
			var Tmp1;

	var result_161018 = null;

		if ((v_161016 < 10)) {
		result_161018 = nimCopy(null, nimCharToStr((48 + v_161016)), NTI138);
		}
		else {
			if ((typ_161017 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_161018 = nimCopy(null, nimCharToStr(((Tmp1 + v_161016) - 10)), NTI138);
		}
		

	return result_161018;

}

function nsuRepeatChar(c_154656, count_154657) {
	var result_154658 = null;

		result_154658 = nimCopy(null, mnewString(count_154657), NTI138);
		L1: do {
			var i_154667 = 0;
			var colontmp__231070 = 0;
			colontmp__231070 = (count_154657 - 1);
			var res_231071 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231071 <= colontmp__231070)) break L3;
						i_154667 = res_231071;
						result_154658[i_154667] = c_154656;
						res_231071 += 1;
					}
			} while(false);
		} while(false);

	return result_154658;

}

function format_int_209010(n_209013, radix_209014, spec_209015) {
		var Tmp7;

	var result_209016 = null;

		var v_209201 = n_209013;
		var negative_209202 = (v_209201 < 0);
		if (negative_209202) {
		v_209201 = (v_209201 * -1);
		}
		
		var xx_209204 = [];
		if (spec_209015.alternateForm) {
		switch (spec_209015.typ) {
		case 88:
			xx_209204 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			xx_209204 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			xx_209204 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			xx_209204 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_209201 == 0)) {
		result_209016 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			result_209016 = nimCopy(null, [], NTI138);
			L1: do {
					L2: while (true) {
					if (!(0 < v_209201)) break L2;
						var d_209207 = Math.trunc(v_209201 % radix_209014);
						v_209201 = Math.trunc(v_209201 / radix_209014);
						if (result_209016 != null) { result_209016 = (result_209016).concat(mk_digit_161014(d_209207, spec_209015.typ)); } else { result_209016 = mk_digit_161014(d_209207, spec_209015.typ).slice(); };
					}
			} while(false);
			L3: do {
				var idx_209216 = 0;
				var colontmp__231059 = 0;
				colontmp__231059 = Math.trunc((result_209016 != null ? result_209016.length : 0) / 2);
				var i_231060 = 0;
				L4: do {
						L5: while (true) {
						if (!(i_231060 < colontmp__231059)) break L5;
							idx_209216 = i_231060;
							var Tmp6 = result_209016[idx_209216]; result_209016[idx_209216] = result_209016[(((result_209016 != null ? result_209016.length : 0) - idx_209216) - 1)]; result_209016[(((result_209016 != null ? result_209016.length : 0) - idx_209216) - 1)] = Tmp6;							i_231060 += 1;
						}
				} while(false);
			} while(false);
		}
		
		if (spec_209015.padWithZero) {
		if (negative_209202) Tmp7 = true; else {			Tmp7 = !((spec_209015.sign == 45));		}		var sign_209232 = Tmp7;
		var to_fill_209237 = (((spec_209015.minimumWidth - (result_209016 != null ? result_209016.length : 0)) - (xx_209204 != null ? xx_209204.length : 0)) - (sign_209232 ? 1:0));
		if ((0 < to_fill_209237)) {
		result_209016 = nimCopy(null, (nsuRepeatChar(48, to_fill_209237) || []).concat(result_209016 || []), NTI138);
		}
		
		}
		
		if (negative_209202) {
		result_209016 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_209204 || [],result_209016 || []), NTI138);
		}
		else {
		if (!((spec_209015.sign == 45))) {
		result_209016 = nimCopy(null, [spec_209015.sign].concat(xx_209204 || [],result_209016 || []), NTI138);
		}
		else {
			result_209016 = nimCopy(null, (xx_209204 || []).concat(result_209016 || []), NTI138);
		}
		}
		if ((spec_209015.align == 60)) {
		L8: do {
			var i_209245 = 0;
			var colontmp__231064 = 0;
			var colontmp__231065 = 0;
			colontmp__231064 = (result_209016 != null ? result_209016.length : 0);
			colontmp__231065 = spec_209015.minimumWidth;
			var i_231066 = colontmp__231064;
			L9: do {
					L10: while (true) {
					if (!(i_231066 < colontmp__231065)) break L10;
						i_209245 = i_231066;
						if (result_209016 != null) { addChar(result_209016, spec_209015.fill); } else { result_209016 = [spec_209015.fill]; };
						i_231066 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			var to_fill_209246 = (spec_209015.minimumWidth - (result_209016 != null ? result_209016.length : 0));
			if ((spec_209015.align == 94)) {
			var half_209247 = Math.trunc(to_fill_209246 / 2);
			result_209016 = nimCopy(null, (nsuRepeatChar(spec_209015.fill, half_209247) || []).concat(result_209016 || [],nsuRepeatChar(spec_209015.fill, (to_fill_209246 - half_209247)) || []), NTI138);
			}
			else {
				if ((0 < to_fill_209246)) {
				result_209016 = nimCopy(null, (nsuRepeatChar(spec_209015.fill, to_fill_209246) || []).concat(result_209016 || []), NTI138);
				}
				
			}
			
		}
		

	return result_209016;

}

function format_value_208902(result_208905, result_208905_Idx, value_208906, specifier_208907) {
	BeforeRet: do {
		if (((specifier_208907 != null ? specifier_208907.length : 0) == 0)) {
		if (result_208905[result_208905_Idx] != null) { result_208905[result_208905_Idx] = (result_208905[result_208905_Idx]).concat(cstrToNimstr((value_208906)+"")); } else { result_208905[result_208905_Idx] = cstrToNimstr((value_208906)+"").slice(); };
		break BeforeRet;
		}
		
		var spec_208908 = parse_standard_format_specifier_161324(specifier_208907, 0, false);
		var radix_208910 = 10;
		switch (spec_208908.typ) {
		case 120:
		case 88:
			radix_208910 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			radix_208910 = 2;
			break;
		case 111:
			radix_208910 = 8;
			break;
		default: 
			var eHEX60gensym208912_209003 = null;
			eHEX60gensym208912_209003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym208912_209003.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_208908.typ]), NTI138);
			eHEX60gensym208912_209003.parent = null;
			raiseException(eHEX60gensym208912_209003, "ValueError");
			break;
		}
		if (result_208905[result_208905_Idx] != null) { result_208905[result_208905_Idx] = (result_208905[result_208905_Idx]).concat(format_int_209010(value_208906, radix_208910, spec_208908)); } else { result_208905[result_208905_Idx] = format_int_209010(value_208906, radix_208910, spec_208908).slice(); };
	} while (false);

	
}

function HEX24_210187(d_210189) {
	var result_210190 = null;

		var fmt_res_210191 = [mnewString(0)];
		if (fmt_res_210191[0] != null) { fmt_res_210191[0] = (fmt_res_210191[0]).concat(makeNimstrLit("ChiSquare(dof=")); } else { fmt_res_210191[0] = makeNimstrLit("ChiSquare(dof="); };
		format_value_208902(fmt_res_210191, 0, to_int_10691(d_210189.dof), []);
		if (fmt_res_210191[0] != null) { fmt_res_210191[0] = (fmt_res_210191[0]).concat(makeNimstrLit(")")); } else { fmt_res_210191[0] = makeNimstrLit(")"); };
		result_210190 = nimCopy(null, fmt_res_210191[0], NTI138);

	return result_210190;

}

function flatten_230696(test_230700) {
	var result_230701 = null;

		result_230701 = {score: 0.0, p_value: 0.0, null_confidence_interval: null, distribution: null};
		result_230701.score = test_230700.test_score;
		result_230701.p_value = p_value_224032(test_230700);
		result_230701.null_confidence_interval = nimCopy(null, null_confidence_interval_223895(test_230700, 5.0000000000000003e-02), NTI215715);
		result_230701.distribution = nimCopy(null, HEX24_210187(test_230700.distribution), NTI138);

	return result_230701;

}

function htest_score_225410(distribution_225413, score_225414, test_type_225415) {
	var result_225417 = null;

		result_225417 = {distribution: null, test_score: 0.0, test_type: 0};
		result_225417.distribution = distribution_225413;
		result_225417.test_score = score_225414;
		result_225417.test_type = test_type_225415;

	return result_225417;

}

function chisquare_210164(dof_210166) {
	var result_210167 = null;

		result_210167 = {dof: 0.0};
		result_210167.dof = dof_210166;

	return result_210167;

}

function existence_change_point_hypothesis(test_scores_230895) {
	var result_230896 = null;

		var total_score_230936 = (to_float_10657((test_scores_230895 != null ? test_scores_230895.length : 0)) * min_230903(test_scores_230895));
		result_230896 = flatten_230696(htest_score_225410(chisquare_210164((2.0000000000000000e+00 * to_float_10657((test_scores_230895 != null ? test_scores_230895.length : 0)))), total_score_230936, 1));

	return result_230896;

}

function add_intercept_215449(x_215451) {
	var result_215452 = null;

		L1: do {
			var r_215470 = 0;
			var colontmp__231136 = 0;
			colontmp__231136 = (x_215451 != null ? (x_215451.length-1) : -1);
			var res_231137 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231137 <= colontmp__231136)) break L3;
						r_215470 = res_231137;
						if (result_215452 != null) { result_215452.push([x_215451[r_215470], 1.0000000000000000e+00]); } else { result_215452 = [[x_215451[r_215470], 1.0000000000000000e+00]]; };
						res_231137 += 1;
					}
			} while(false);
		} while(false);

	return result_215452;

}

function HEX5BHEX5D_216081(s_216087, x_216089) {
	var result_216091 = null;

		var a_216201 = x_216089.a;
		var l_216401 = ((x_216089.b - a_216201) + 1);
		result_216091 = new Array(l_216401); for (var i=0;i<l_216401;++i) {result_216091[i]=0.0;}		L1: do {
			var i_216416 = 0;
			var i_231145 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_231145 < l_216401)) break L3;
						i_216416 = i_231145;
						result_216091[i_216416] = s_216087[(i_216416 + a_216201)];
						i_231145 += 1;
					}
			} while(false);
		} while(false);

	return result_216091;

}

function HEX2EHEX2E_74220(a_74224, b_74225) {
	var result_74231 = {a: 0, b: 0};

		nimCopy(result_74231, {a: a_74224, b: b_74225}, NTI74228);

	return result_74231;

}

function cols_173436(a_173438) {
	var result_173439 = 0;

		result_173439 = (a_173438[0] != null ? a_173438[0].length : 0);

	return result_173439;

}

function as_column_vector_171014(v_171016) {
	var result_171017 = null;

		L1: do {
			var i_171031 = 0;
			var colontmp__231181 = 0;
			colontmp__231181 = (v_171016 != null ? v_171016.length : 0);
			var res_231182 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231182 <= colontmp__231181)) break L3;
						i_171031 = res_231182;
						if (result_171017 != null) { result_171017.push([v_171016[(i_171031 - 1)]]); } else { result_171017 = [[v_171016[(i_171031 - 1)]]]; };
						res_231182 += 1;
					}
			} while(false);
		} while(false);

	return result_171017;

}

function identity_181014(rows_181016, cols_181018) {
										var Tmp7;
											var Tmp8;

	var result_181019 = null;

		var cols0_181020 = cols_181018;
		if ((cols_181018 < 0)) {
		cols0_181020 = rows_181016;
		}
		
		L1: do {
			var i_181029 = 0;
			var res_231209 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231209 <= rows_181016)) break L3;
						i_181029 = res_231209;
						if (result_181019 != null) { result_181019.push([]); } else { result_181019 = [[]]; };
						L4: do {
							var j_181060 = 0;
							var res_231204 = 1;
							L5: do {
									L6: while (true) {
									if (!(res_231204 <= cols0_181020)) break L6;
										j_181060 = res_231204;
										if ((i_181029 == j_181060)) {
										if ((Tmp7 = result_181019[(i_181029 - 1)], Tmp7) != null) { Tmp7.push(1.0000000000000000e+00); } else { Tmp7 = [1.0000000000000000e+00]; };
										}
										else {
										if ((Tmp8 = result_181019[(i_181029 - 1)], Tmp8) != null) { Tmp8.push(0.0); } else { Tmp8 = [0.0]; };
										}
										
										res_231204 += 1;
									}
							} while(false);
						} while(false);
						res_231209 += 1;
					}
			} while(false);
		} while(false);

	return result_181019;

}

function rows_173414(a_173416) {
	var result_173417 = 0;

		result_173417 = (a_173416 != null ? a_173416.length : 0);

	return result_173417;

}

function hstack_182014(matrices_182017) {
	var result_182018 = null;

		L1: do {
			var k_182031 = 0;
			var colontmp__231262 = 0;
			colontmp__231262 = ((matrices_182017 != null ? matrices_182017.length : 0) - 1);
			var res_231263 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231263 <= colontmp__231262)) break L3;
						k_182031 = res_231263;
						res_231263 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var r_182209 = 0;
			var colontmp__231280 = 0;
			colontmp__231280 = (rows_173414(matrices_182017[0]) - 1);
			var res_231281 = 0;
			L5: do {
					L6: while (true) {
					if (!(res_231281 <= colontmp__231280)) break L6;
						r_182209 = res_231281;
						if (result_182018 != null) { result_182018.push([]); } else { result_182018 = [[]]; };
						L7: do {
							var a_182262 = null;
							var i_231278 = 0;
							L8: do {
									L9: while (true) {
									if (!(i_231278 < (matrices_182017 != null ? matrices_182017.length : 0))) break L9;
										a_182262 = matrices_182017[i_231278];
										L10: do {
											var c_182271 = 0;
											var colontmp__231271 = 0;
											colontmp__231271 = (cols_173436(a_182262) - 1);
											var res_231272 = 0;
											L11: do {
													L12: while (true) {
													if (!(res_231272 <= colontmp__231271)) break L12;
														c_182271 = res_231272;
														if (result_182018[r_182209] != null) { result_182018[r_182209].push(a_182262[r_182209][c_182271]); } else { result_182018[r_182209] = [a_182262[r_182209][c_182271]]; };
														res_231272 += 1;
													}
											} while(false);
										} while(false);
										i_231278 += 1;
									}
							} while(false);
						} while(false);
						res_231281 += 1;
					}
			} while(false);
		} while(false);

	return result_182018;

}

function HEX2FHEX3D_27637(x_27640, x_27640_Idx, y_27641) {
		x_27640[x_27640_Idx] = (x_27640[x_27640_Idx] / y_27641);

	
}

function gauss_jordan_183477(a_183479, b_183480) {
	var result_183481 = null;

	BeforeRet: do {
		var m_183484 = hstack_182014([nimCopy(null, a_183479, NTI164067), nimCopy(null, b_183480, NTI164067)]);
		var c_183485 = 0.0;
		var maxrow_183487 = 0;
		L1: do {
			var y_183496 = 0;
			var colontmp__231238 = 0;
			colontmp__231238 = (rows_173414(m_183484) - 1);
			var res_231239 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231239 <= colontmp__231238)) break L3;
						y_183496 = res_231239;
						maxrow_183487 = y_183496;
						L4: do {
							var y2_183502 = 0;
							var colontmp__231216 = 0;
							var colontmp__231217 = 0;
							colontmp__231216 = (y_183496 + 1);
							colontmp__231217 = (rows_173414(m_183484) - 1);
							var res_231218 = colontmp__231216;
							L5: do {
									L6: while (true) {
									if (!(res_231218 <= colontmp__231217)) break L6;
										y2_183502 = res_231218;
										if ((abs_12649(m_183484[maxrow_183487][y_183496]) < abs_12649(m_183484[y2_183502][y_183496]))) {
										maxrow_183487 = y2_183502;
										}
										
										res_231218 += 1;
									}
							} while(false);
						} while(false);
						var Tmp7 = m_183484[y_183496]; m_183484[y_183496] = m_183484[maxrow_183487]; m_183484[maxrow_183487] = Tmp7;						L8: do {
							var y2_183515 = 0;
							var colontmp__231231 = 0;
							var colontmp__231232 = 0;
							colontmp__231231 = (y_183496 + 1);
							colontmp__231232 = (rows_173414(m_183484) - 1);
							var res_231233 = colontmp__231231;
							L9: do {
									L10: while (true) {
									if (!(res_231233 <= colontmp__231232)) break L10;
										y2_183515 = res_231233;
										c_183485 = (m_183484[y2_183515][y_183496] / m_183484[y_183496][y_183496]);
										L11: do {
											var x_183521 = 0;
											var colontmp__231225 = 0;
											colontmp__231225 = (cols_173436(m_183484) - 1);
											var res_231226 = y_183496;
											L12: do {
													L13: while (true) {
													if (!(res_231226 <= colontmp__231225)) break L13;
														x_183521 = res_231226;
														HEX2DHEX3D_183522(m_183484[y2_183515], x_183521, (m_183484[y_183496][x_183521] * c_183485));
														res_231226 += 1;
													}
											} while(false);
										} while(false);
										res_231233 += 1;
									}
							} while(false);
						} while(false);
						res_231239 += 1;
					}
			} while(false);
		} while(false);
		var y_183542 = (rows_173414(m_183484) - 1);
		var x0_183544 = 0;
		L14: do {
				L15: while (true) {
				if (!(0 <= y_183542)) break L15;
					c_183485 = m_183484[y_183542][y_183542];
					L16: do {
						var y2_183554 = 0;
						var colontmp__231247 = 0;
						colontmp__231247 = (y_183542 - 1);
						var res_231248 = 0;
						L17: do {
								L18: while (true) {
								if (!(res_231248 <= colontmp__231247)) break L18;
									y2_183554 = res_231248;
									x0_183544 = (cols_173436(m_183484) - 1);
									L19: do {
											L20: while (true) {
											if (!((y_183542 - 1) < x0_183544)) break L20;
												HEX2DHEX3D_183522(m_183484[y2_183554], x0_183544, ((m_183484[y_183542][x0_183544] * m_183484[y2_183554][y_183542]) / c_183485));
												x0_183544 -= 1;
											}
									} while(false);
									res_231248 += 1;
								}
						} while(false);
					} while(false);
					HEX2FHEX3D_27637(m_183484[y_183542], y_183542, c_183485);
					L21: do {
						var x_183574 = 0;
						var colontmp__231254 = 0;
						var colontmp__231255 = 0;
						colontmp__231254 = rows_173414(m_183484);
						colontmp__231255 = (cols_173436(m_183484) - 1);
						var res_231256 = colontmp__231254;
						L22: do {
								L23: while (true) {
								if (!(res_231256 <= colontmp__231255)) break L23;
									x_183574 = res_231256;
									HEX2FHEX3D_27637(m_183484[y_183542], x_183574, c_183485);
									res_231256 += 1;
								}
						} while(false);
					} while(false);
					y_183542 -= 1;
				}
		} while(false);
		result_183481 = nimCopy(null, m_183484, NTI164067);
		break BeforeRet;
	} while (false);

	return result_183481;

}

function inverse_183595(a_183597) {
	var result_183598 = null;

		var b_183599 = identity_181014(rows_173414(a_183597), cols_173436(a_183597));
		var c_183600 = gauss_jordan_183477(a_183597, b_183599);
		L1: do {
			var i_183609 = 0;
			var colontmp__231196 = 0;
			colontmp__231196 = (rows_173414(a_183597) - 1);
			var res_231197 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231197 <= colontmp__231196)) break L3;
						i_183609 = res_231197;
						if (result_183598 != null) { result_183598.push([]); } else { result_183598 = [[]]; };
						L4: do {
							var j_183637 = 0;
							var colontmp__231189 = 0;
							var colontmp__231190 = 0;
							colontmp__231189 = cols_173436(a_183597);
							colontmp__231190 = (cols_173436(c_183600) - 1);
							var res_231191 = colontmp__231189;
							L5: do {
									L6: while (true) {
									if (!(res_231191 <= colontmp__231190)) break L6;
										j_183637 = res_231191;
										if (result_183598[i_183609] != null) { result_183598[i_183609].push(c_183600[i_183609][j_183637]); } else { result_183598[i_183609] = [c_183600[i_183609][j_183637]]; };
										res_231191 += 1;
									}
							} while(false);
						} while(false);
						res_231197 += 1;
					}
			} while(false);
		} while(false);

	return result_183598;

}

function standard_matrix_product_175214(a_175216, b_175217) {
	var result_175218 = null;

		var n_175406 = (a_175216 != null ? a_175216.length : 0);
		L1: do {
			var i_175424 = 0;
			var colontmp__231301 = 0;
			colontmp__231301 = (a_175216 != null ? (a_175216.length-1) : -1);
			var res_231302 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231302 <= colontmp__231301)) break L3;
						i_175424 = res_231302;
						if (result_175218 != null) { result_175218.push([]); } else { result_175218 = [[]]; };
						L4: do {
							var j_175476 = 0;
							var colontmp__231295 = 0;
							colontmp__231295 = (b_175217[0] != null ? (b_175217[0].length-1) : -1);
							var res_231296 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231296 <= colontmp__231295)) break L6;
										j_175476 = res_231296;
										if (result_175218[i_175424] != null) { result_175218[i_175424].push(0.0); } else { result_175218[i_175424] = [0.0]; };
										L7: do {
											var k_175501 = 0;
											var colontmp__231289 = 0;
											colontmp__231289 = (b_175217 != null ? (b_175217.length-1) : -1);
											var res_231290 = 0;
											L8: do {
													L9: while (true) {
													if (!(res_231290 <= colontmp__231289)) break L9;
														k_175501 = res_231290;
														HEX2BHEX3D_60121(result_175218[i_175424], j_175476, (a_175216[i_175424][k_175501] * b_175217[k_175501][j_175476]));
														res_231290 += 1;
													}
											} while(false);
										} while(false);
										res_231296 += 1;
									}
							} while(false);
						} while(false);
						res_231302 += 1;
					}
			} while(false);
		} while(false);

	return result_175218;

}

function multiply_175522(a_175524, b_175525) {
	var result_175526 = null;

		result_175526 = nimCopy(null, standard_matrix_product_175214(a_175524, b_175525), NTI164067);

	return result_175526;

}

function HEX2A_175540(a_175542, b_175543) {
	var result_175544 = null;

		result_175544 = nimCopy(null, multiply_175522(a_175542, b_175543), NTI164067);

	return result_175544;

}

function transpose_181814(a_181816) {
	var result_181817 = null;

		L1: do {
			var q_181847 = 0;
			var colontmp__231315 = 0;
			colontmp__231315 = (a_181816[0] != null ? (a_181816[0].length-1) : -1);
			var res_231316 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231316 <= colontmp__231315)) break L3;
						q_181847 = res_231316;
						if (result_181817 != null) { result_181817.push([]); } else { result_181817 = [[]]; };
						L4: do {
							var k_181887 = 0;
							var colontmp__231309 = 0;
							colontmp__231309 = (a_181816 != null ? (a_181816.length-1) : -1);
							var res_231310 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231310 <= colontmp__231309)) break L6;
										k_181887 = res_231310;
										if (result_181817[q_181847] != null) { result_181817[q_181847].push(a_181816[k_181887][q_181847]); } else { result_181817[q_181847] = [a_181816[k_181887][q_181847]]; };
										res_231310 += 1;
									}
							} while(false);
						} while(false);
						res_231316 += 1;
					}
			} while(false);
		} while(false);

	return result_181817;

}

function t_181908(a_181910) {
	var result_181911 = null;

		result_181911 = nimCopy(null, transpose_181814(a_181910), NTI164067);

	return result_181911;

}

function subtract_173814(a_173816, b_173817) {
	var result_173818 = null;

		L1: do {
			var k_174218 = 0;
			var colontmp__231329 = 0;
			colontmp__231329 = (a_173816 != null ? (a_173816.length-1) : -1);
			var res_231330 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231330 <= colontmp__231329)) break L3;
						k_174218 = res_231330;
						if (result_173818 != null) { result_173818.push([]); } else { result_173818 = [[]]; };
						L4: do {
							var q_174270 = 0;
							var colontmp__231323 = 0;
							colontmp__231323 = (a_173816[0] != null ? (a_173816[0].length-1) : -1);
							var res_231324 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231324 <= colontmp__231323)) break L6;
										q_174270 = res_231324;
										if (result_173818[k_174218] != null) { result_173818[k_174218].push((a_173816[k_174218][q_174270] - b_173817[k_174218][q_174270])); } else { result_173818[k_174218] = [(a_173816[k_174218][q_174270] - b_173817[k_174218][q_174270])]; };
										res_231324 += 1;
									}
							} while(false);
						} while(false);
						res_231330 += 1;
					}
			} while(false);
		} while(false);

	return result_173818;

}

function HEX2D_174327(a_174329, b_174330) {
	var result_174331 = null;

		result_174331 = nimCopy(null, subtract_173814(a_174329, b_174330), NTI164067);

	return result_174331;

}

function norm_169214(a_169216, p_169217) {
	var result_169218 = [0.0];

		L1: do {
			var k_169236 = 0;
			var colontmp__231336 = 0;
			colontmp__231336 = (a_169216 != null ? (a_169216.length-1) : -1);
			var res_231337 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231337 <= colontmp__231336)) break L3;
						k_169236 = res_231337;
						HEX2BHEX3D_60121(result_169218, 0, Math.pow(a_169216[k_169236], p_169217));
						res_231337 += 1;
					}
			} while(false);
		} while(false);
		result_169218[0] = Math.pow(result_169218[0], (1.0000000000000000e+00 / p_169217));

	return result_169218[0];

}

function wise_multiply_174891(a_174893, b_174894) {
	var result_174895 = null;

		L1: do {
			var k_174913 = 0;
			var colontmp__231350 = 0;
			colontmp__231350 = (a_174893 != null ? (a_174893.length-1) : -1);
			var res_231351 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231351 <= colontmp__231350)) break L3;
						k_174913 = res_231351;
						if (result_174895 != null) { result_174895.push([]); } else { result_174895 = [[]]; };
						L4: do {
							var q_174965 = 0;
							var colontmp__231344 = 0;
							colontmp__231344 = (a_174893[0] != null ? (a_174893[0].length-1) : -1);
							var res_231345 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231345 <= colontmp__231344)) break L6;
										q_174965 = res_231345;
										if (result_174895[k_174913] != null) { result_174895[k_174913].push((a_174893[k_174913][q_174965] * b_174894)); } else { result_174895[k_174913] = [(a_174893[k_174913][q_174965] * b_174894)]; };
										res_231345 += 1;
									}
							} while(false);
						} while(false);
						res_231351 += 1;
					}
			} while(false);
		} while(false);

	return result_174895;

}

function wise_multiply_174986(a_174988, b_174989) {
	var result_174990 = null;

		result_174990 = nimCopy(null, wise_multiply_174891(b_174989, a_174988), NTI164067);

	return result_174990;

}

function HEX2A_175112(a_175114, b_175115) {
	var result_175116 = null;

		result_175116 = nimCopy(null, wise_multiply_174986(a_175114, b_175115), NTI164067);

	return result_175116;

}

function pow_169839(a_169841, b_169842) {
	var result_169843 = null;

		L1: do {
			var k_169861 = 0;
			var colontmp__231357 = 0;
			colontmp__231357 = (a_169841 != null ? (a_169841.length-1) : -1);
			var res_231358 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231358 <= colontmp__231357)) break L3;
						k_169861 = res_231358;
						if (result_169843 != null) { result_169843.push(Math.pow(a_169841[k_169861], b_169842)); } else { result_169843 = [Math.pow(a_169841[k_169861], b_169842)]; };
						res_231358 += 1;
					}
			} while(false);
		} while(false);

	return result_169843;

}

function HEX2EHEX5E_169918(a_169920, b_169921) {
	var result_169922 = null;

		result_169922 = nimCopy(null, pow_169839(a_169920, b_169921), NTI164064);

	return result_169922;

}

function constant_vector_170014(cols_170016, constant_170017) {
	var result_170018 = null;

		L1: do {
			var i_170027 = 0;
			var res_231371 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231371 <= cols_170016)) break L3;
						i_170027 = res_231371;
						if (result_170018 != null) { result_170018.push(constant_170017); } else { result_170018 = [constant_170017]; };
						res_231371 += 1;
					}
			} while(false);
		} while(false);

	return result_170018;

}

function zeros_170048(col_170050) {
	var result_170051 = null;

		result_170051 = nimCopy(null, constant_vector_170014(col_170050, 0.0), NTI164064);

	return result_170051;

}

function diag_173614(a_173616) {
	var result_173617 = null;

		result_173617 = nimCopy(null, zeros_170048(rows_173414(a_173616)), NTI164064);
		L1: do {
			var i_173626 = 0;
			var colontmp__231364 = 0;
			colontmp__231364 = (rows_173414(a_173616) - 1);
			var res_231365 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231365 <= colontmp__231364)) break L3;
						i_173626 = res_231365;
						result_173617[i_173626] = a_173616[i_173626][i_173626];
						res_231365 += 1;
					}
			} while(false);
		} while(false);

	return result_173617;

}

function any_val_167414(a_167416, true_val_167417) {
	var result_167418 = false;

	BeforeRet: do {
		L1: do {
			var k_167436 = 0;
			var colontmp__231377 = 0;
			colontmp__231377 = (a_167416 != null ? (a_167416.length-1) : -1);
			var res_231378 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231378 <= colontmp__231377)) break L3;
						k_167436 = res_231378;
						if ((a_167416[k_167436] == true_val_167417)) {
						result_167418 = true;
						break BeforeRet;
						}
						
						res_231378 += 1;
					}
			} while(false);
		} while(false);
		result_167418 = false;
		break BeforeRet;
	} while (false);

	return result_167418;

}

function subtract_165014(a_165016, b_165017) {
	var result_165018 = null;

		L1: do {
			var k_165218 = 0;
			var colontmp__231384 = 0;
			colontmp__231384 = (a_165016 != null ? (a_165016.length-1) : -1);
			var res_231385 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231385 <= colontmp__231384)) break L3;
						k_165218 = res_231385;
						if (result_165018 != null) { result_165018.push((a_165016[k_165218] - b_165017[k_165218])); } else { result_165018 = [(a_165016[k_165218] - b_165017[k_165218])]; };
						res_231385 += 1;
					}
			} while(false);
		} while(false);

	return result_165018;

}

function HEX2D_165275(a_165277, b_165278) {
	var result_165279 = null;

		result_165279 = nimCopy(null, subtract_165014(a_165277, b_165278), NTI164064);

	return result_165279;

}

function divide_166439(a_166441, b_166442) {
	var result_166443 = null;

		L1: do {
			var k_166461 = 0;
			var colontmp__231391 = 0;
			colontmp__231391 = (a_166441 != null ? (a_166441.length-1) : -1);
			var res_231392 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231392 <= colontmp__231391)) break L3;
						k_166461 = res_231392;
						if (result_166443 != null) { result_166443.push((a_166441[k_166461] / b_166442)); } else { result_166443 = [(a_166441[k_166461] / b_166442)]; };
						res_231392 += 1;
					}
			} while(false);
		} while(false);

	return result_166443;

}

function HEX2F_166543(a_166545, b_166546) {
	var result_166547 = null;

		result_166547 = nimCopy(null, divide_166439(a_166545, b_166546), NTI164064);

	return result_166547;

}

function sum_175814(a_175816, axis_175817) {
	var result_175818 = [null];

		if ((axis_175817 == 0)) {
		L1: do {
			var c_175848 = 0;
			var colontmp__231405 = 0;
			colontmp__231405 = (a_175816[0] != null ? (a_175816[0].length-1) : -1);
			var res_231406 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231406 <= colontmp__231405)) break L3;
						c_175848 = res_231406;
						if (result_175818[0] != null) { result_175818[0].push(0.0); } else { result_175818[0] = [0.0]; };
						L4: do {
							var r_175873 = 0;
							var colontmp__231399 = 0;
							colontmp__231399 = (a_175816 != null ? (a_175816.length-1) : -1);
							var res_231400 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231400 <= colontmp__231399)) break L6;
										r_175873 = res_231400;
										HEX2BHEX3D_60121(result_175818[0], c_175848, a_175816[r_175873][c_175848]);
										res_231400 += 1;
									}
							} while(false);
						} while(false);
						res_231406 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			L7: do {
				var r_175898 = 0;
				var colontmp__231419 = 0;
				colontmp__231419 = (a_175816 != null ? (a_175816.length-1) : -1);
				var res_231420 = 0;
				L8: do {
						L9: while (true) {
						if (!(res_231420 <= colontmp__231419)) break L9;
							r_175898 = res_231420;
							if (result_175818[0] != null) { result_175818[0].push(0.0); } else { result_175818[0] = [0.0]; };
							L10: do {
								var c_175935 = 0;
								var colontmp__231413 = 0;
								colontmp__231413 = (a_175816[0] != null ? (a_175816[0].length-1) : -1);
								var res_231414 = 0;
								L11: do {
										L12: while (true) {
										if (!(res_231414 <= colontmp__231413)) break L12;
											c_175935 = res_231414;
											HEX2BHEX3D_60121(result_175818[0], r_175898, a_175816[r_175898][c_175935]);
											res_231414 += 1;
										}
								} while(false);
							} while(false);
							res_231420 += 1;
						}
				} while(false);
			} while(false);
		}
		

	return result_175818[0];

}

function mean_177214(a_177216, axis_177217) {
	var result_177218 = null;

	BeforeRet: do {
		if ((axis_177217 == 0)) {
		result_177218 = nimCopy(null, HEX2F_166543(sum_175814(a_177216, axis_177217), to_float_10657(cols_173436(a_177216))), NTI164064);
		break BeforeRet;
		}
		
		result_177218 = nimCopy(null, HEX2F_166543(sum_175814(a_177216, axis_177217), to_float_10657(rows_173414(a_177216))), NTI164064);
		break BeforeRet;
	} while (false);

	return result_177218;

}

function pow_176691(a_176693, b_176694) {
	var result_176695 = null;

		L1: do {
			var k_176713 = 0;
			var colontmp__231433 = 0;
			colontmp__231433 = (a_176693 != null ? (a_176693.length-1) : -1);
			var res_231434 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231434 <= colontmp__231433)) break L3;
						k_176713 = res_231434;
						if (result_176695 != null) { result_176695.push([]); } else { result_176695 = [[]]; };
						L4: do {
							var q_176765 = 0;
							var colontmp__231427 = 0;
							colontmp__231427 = (a_176693[0] != null ? (a_176693[0].length-1) : -1);
							var res_231428 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231428 <= colontmp__231427)) break L6;
										q_176765 = res_231428;
										if (result_176695[k_176713] != null) { result_176695[k_176713].push(Math.pow(a_176693[k_176713][q_176765], b_176694)); } else { result_176695[k_176713] = [Math.pow(a_176693[k_176713][q_176765], b_176694)]; };
										res_231428 += 1;
									}
							} while(false);
						} while(false);
						res_231434 += 1;
					}
			} while(false);
		} while(false);

	return result_176695;

}

function HEX2EHEX5E_176822(a_176824, b_176825) {
	var result_176826 = null;

		result_176826 = nimCopy(null, pow_176691(a_176824, b_176825), NTI164067);

	return result_176826;

}

function wise_variance_177434(a_177436, axis_177437) {
	var result_177438 = null;

	BeforeRet: do {
		result_177438 = nimCopy(null, HEX2EHEX5E_169918(HEX2D_165275(mean_177214(HEX2EHEX5E_176822(a_177436, 2.0000000000000000e+00), axis_177437), mean_177214(a_177436, axis_177437)), 2.0000000000000000e+00), NTI164064);
		break BeforeRet;
	} while (false);

	return result_177438;

}

function wise_standard_deviation_177635(a_177637, axis_177638) {
	var result_177639 = null;

	BeforeRet: do {
		result_177639 = nimCopy(null, HEX2EHEX5E_169918(wise_variance_177434(a_177637, axis_177638), 5.0000000000000000e-01), NTI164064);
		break BeforeRet;
	} while (false);

	return result_177639;

}

function addition_164639(a_164641, b_164642) {
	var result_164643 = null;

		L1: do {
			var k_164661 = 0;
			var colontmp__231440 = 0;
			colontmp__231440 = (a_164641 != null ? (a_164641.length-1) : -1);
			var res_231441 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231441 <= colontmp__231440)) break L3;
						k_164661 = res_231441;
						if (result_164643 != null) { result_164643.push((a_164641[k_164661] + b_164642)); } else { result_164643 = [(a_164641[k_164661] + b_164642)]; };
						res_231441 += 1;
					}
			} while(false);
		} while(false);

	return result_164643;

}

function subtract_165239(a_165241, b_165242) {
	var result_165243 = null;

		result_165243 = nimCopy(null, addition_164639(a_165241, -(b_165242)), NTI164064);

	return result_165243;

}

function HEX2D_165293(a_165295, b_165296) {
	var result_165297 = null;

		result_165297 = nimCopy(null, subtract_165239(a_165295, b_165296), NTI164064);

	return result_165297;

}

function ravel_183014(a_183016) {
	var result_183017 = null;

		L1: do {
			var r_183026 = 0;
			var colontmp__231454 = 0;
			colontmp__231454 = (rows_173414(a_183016) - 1);
			var res_231455 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231455 <= colontmp__231454)) break L3;
						r_183026 = res_231455;
						L4: do {
							var c_183035 = 0;
							var colontmp__231448 = 0;
							colontmp__231448 = (cols_173436(a_183016) - 1);
							var res_231449 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231449 <= colontmp__231448)) break L6;
										c_183035 = res_231449;
										if (result_183017 != null) { result_183017.push(a_183016[r_183026][c_183035]); } else { result_183017 = [a_183016[r_183026][c_183035]]; };
										res_231449 += 1;
									}
							} while(false);
						} while(false);
						res_231455 += 1;
					}
			} while(false);
		} while(false);

	return result_183017;

}

function mean_171214(a_171216, axis_171217) {
	var result_171218 = [0.0];

		L1: do {
			var k_171418 = 0;
			var colontmp__231461 = 0;
			colontmp__231461 = (a_171216 != null ? (a_171216.length-1) : -1);
			var res_231462 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231462 <= colontmp__231461)) break L3;
						k_171418 = res_231462;
						HEX2BHEX3D_60121(result_171218, 0, a_171216[k_171418]);
						res_231462 += 1;
					}
			} while(false);
		} while(false);
		result_171218[0] = (result_171218[0] / to_float_10657((a_171216 != null ? a_171216.length : 0)));

	return result_171218[0];

}

function loglikelihood_210073(d_210075, y_210076) {
	var result_210077 = [0.0];

		L1: do {
			var yi_210084 = 0.0;
			var i_231469 = 0;
			var l_231470 = (y_210076 != null ? y_210076.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_231469 < l_231470)) break L3;
						yi_210084 = y_210076[i_231469];
						HEX2BHEX3D_60121(result_210077, 0, (((-5.0000000000000000e-01 * Math.log(6.2831853071795862e+00)) - Math.log(d_210075.std)) - (Math.pow((yi_210084 - d_210075.mean), 2.0000000000000000e+00) / ((2.0000000000000000e+00 * d_210075.std) * d_210075.std))));
						i_231469 += 1;
					}
			} while(false);
		} while(false);

	return result_210077[0];

}

function normal_209863(mean_209865, std_209866) {
	var result_209867 = null;

		result_209867 = {mean: 0.0, std: 0.0};
		result_209867.mean = mean_209865;
		result_209867.std = std_209866;

	return result_209867;

}

function scaled_shifted_217036(distribution_217039, location_217040, scale_217041) {
	var result_217043 = null;

		result_217043 = {distribution: null, location: 0.0, scale: 0.0};
		result_217043.distribution = distribution_217039;
		result_217043.location = location_217040;
		result_217043.scale = scale_217041;

	return result_217043;

}

function htest_score_217109(distribution_217112, score_217113, test_type_217114) {
	var result_217116 = null;

		result_217116 = {distribution: null, test_score: 0.0, test_type: 0};
		result_217116.distribution = distribution_217112;
		result_217116.test_score = score_217113;
		result_217116.test_type = test_type_217114;

	return result_217116;

}

function shifted_estimator_217028(distribution_217031, location_217032, scale_217033) {
	var result_217035 = null;

		var est_distribution_217093 = scaled_shifted_217036(distribution_217031, location_217032, scale_217033);
		var est_null_distribution_217101 = scaled_shifted_217036(distribution_217031, 0.0, scale_217033);
		result_217035 = {distribution: null, hypothesis_test: null};
		result_217035.distribution = est_distribution_217093;
		result_217035.hypothesis_test = htest_score_217109(est_null_distribution_217101, location_217032, 0);

	return result_217035;

}

function invchisquare_210718(dof_210720, scale_210721) {
		var Tmp1;

	var result_210722 = null;

		result_210722 = {dof: 0.0, scale: 0.0};
		result_210722.dof = dof_210720;
		if ((classify_54030(scale_210721) == 4)) {
		Tmp1 = (1.0000000000000000e+00 / dof_210720);
		}
		else {
		Tmp1 = scale_210721;
		}
		
		result_210722.scale = Tmp1;

	return result_210722;

}

function new_seq_217434(len_217437) {
	var result_217439 = null;

		result_217439 = new Array(len_217437); for (var i=0;i<len_217437;++i) {result_217439[i]=null;}
	return result_217439;

}

function len_207233(x_207238) {
	var result_207239 = 0;

		result_207239 = nimMax(0, ((x_207238.b - x_207238.a) + 1));

	return result_207239;

}

function scaled_shifted_217217(distribution_217220, location_217221, scale_217222) {
	var result_217224 = null;

		result_217224 = {distribution: null, location: 0.0, scale: 0.0};
		result_217224.distribution = distribution_217220;
		result_217224.location = location_217221;
		result_217224.scale = scale_217222;

	return result_217224;

}

function htest_score_217290(distribution_217293, score_217294, test_type_217295) {
	var result_217297 = null;

		result_217297 = {distribution: null, test_score: 0.0, test_type: 0};
		result_217297.distribution = distribution_217293;
		result_217297.test_score = score_217294;
		result_217297.test_type = test_type_217295;

	return result_217297;

}

function shifted_estimator_217209(distribution_217212, location_217213, scale_217214) {
	var result_217216 = null;

		var est_distribution_217274 = scaled_shifted_217217(distribution_217212, location_217213, scale_217214);
		var est_null_distribution_217282 = scaled_shifted_217217(distribution_217212, 0.0, scale_217214);
		result_217216 = {distribution: null, hypothesis_test: null};
		result_217216.distribution = est_distribution_217274;
		result_217216.hypothesis_test = htest_score_217290(est_null_distribution_217282, location_217213, 0);

	return result_217216;

}

function studentt_209612(dof_209614) {
	var result_209615 = null;

		result_209615 = {dof: 0};
		result_209615.dof = to_int_10691(dof_209614);

	return result_209615;

}

function htest_score_217485(distribution_217488, score_217489, test_type_217490) {
	var result_217492 = null;

		result_217492 = {distribution: null, test_score: 0.0, test_type: 0};
		result_217492.distribution = distribution_217488;
		result_217492.test_score = score_217489;
		result_217492.test_type = test_type_217490;

	return result_217492;

}

function central_f_211006(df1_211008, df2_211009) {
	var result_211010 = null;

		result_211010 = {df1: 0.0, df2: 0.0};
		result_211010.df1 = df1_211008;
		result_211010.df2 = df2_211009;

	return result_211010;

}

function new_seq_41234(len_41237) {
	var result_41239 = null;

		result_41239 = new Array(len_41237); for (var i=0;i<len_41237;++i) {result_41239[i]=null;}
	return result_41239;

}

function ols_model_216854(x_216856, y_216857, names_216874) {
			var Tmp1;
		var Tmp2;
		var Tmp3;
		var Tmp4;
		var Tmp5;
		var Tmp11;

	var result_216875 = null;

		result_216875 = {residuals: null, sum_squared_errors: 0.0, degrees_of_freedom: 0.0, variance_matrix_coefficients: null, include_intercept: false, loglikelihood: 0.0, R2: 0.0, adjustedR2: 0.0, beta_hat: null, coefficients: null, noise_variance: null, model_significance: null, feature_names: null};
			if (!(0 < (names_216874 != null ? names_216874.length : 0))) Tmp1 = false; else {				Tmp1 = !(((names_216874 != null ? names_216874.length : 0) == cols_173436(x_216856)));			}		if (Tmp1) {
		var eHEX60gensym216901_217003 = null;
		eHEX60gensym216901_217003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym216901_217003.message = nimCopy(null, makeNimstrLit("incorrect number of feature names"), NTI138);
		eHEX60gensym216901_217003.parent = null;
		raiseException(eHEX60gensym216901_217003, "ValueError");
		}
		
		var y_217010 = as_column_vector_171014(y_216857);
		var xp_x_217011 = inverse_183595(HEX2A_175540(t_181908(x_216856), x_216856));
		var beta_hat_217012 = HEX2A_175540(HEX2A_175540(xp_x_217011, t_181908(x_216856)), y_217010);
		var ypred_217013 = HEX2A_175540(x_216856, beta_hat_217012);
		var residuals_217014 = nimCopy(null, (Tmp2 = t_181908(HEX2D_174327(y_217010, ypred_217013)), Tmp2)[0], NTI164068);
		var sse_217015 = HEX5E_164027(norm_169214(residuals_217014, 2.0000000000000000e+00), 2.0000000000000000e+00);
		var variance_normalization_factor_217016 = (to_float_10657(((rows_173414(x_216856) - cols_173436(x_216856)) - 1)) / to_float_10657((rows_173414(x_216856) - cols_173436(x_216856))));
		var s2_217017 = ((sse_217015 / to_float_10657(((rows_173414(x_216856) - cols_173436(x_216856)) - 1))) * variance_normalization_factor_217016);
		var var_beta_hat_217018 = HEX2A_175112(s2_217017, xp_x_217011);
		var estimate_std_217019 = HEX2EHEX5E_169918(diag_173614(var_beta_hat_217018), 5.0000000000000000e-01);
		var coefficients_217020 = nimCopy(null, (Tmp3 = t_181908(beta_hat_217012), Tmp3)[0], NTI164068);
		var include_intercept_217021 = any_val_167414(wise_standard_deviation_177635(x_216856, 0), 0.0);
		var total_model_variation_217023 = HEX5E_164027(norm_169214(HEX2D_165293(ravel_183014(ypred_217013), mean_171214(ravel_183014(ypred_217013), 0)), 2.0000000000000000e+00), 2.0000000000000000e+00);
		if (include_intercept_217021) {
		total_model_variation_217023 = HEX5E_164027(norm_169214(HEX2D_165293(ravel_183014(ypred_217013), mean_171214(y_216857, 0)), 2.0000000000000000e+00), 2.0000000000000000e+00);
		}
		else {
			total_model_variation_217023 = HEX5E_164027(norm_169214(HEX2D_165275(y_216857, residuals_217014), 2.0000000000000000e+00), 2.0000000000000000e+00);
		}
		
		if (include_intercept_217021) {
		Tmp4 = -1;
		}
		else {
		Tmp4 = 0;
		}
		
		var f_score_217026 = ((total_model_variation_217023 / to_float_10657((cols_173436(x_216856) + Tmp4))) / (sse_217015 / to_float_10657((rows_173414(x_216856) - cols_173436(x_216856)))));
		result_216875.include_intercept = include_intercept_217021;
		result_216875.residuals = nimCopy(null, residuals_217014, NTI164068);
		result_216875.sum_squared_errors = sse_217015;
		result_216875.variance_matrix_coefficients = nimCopy(null, var_beta_hat_217018, NTI164067);
		result_216875.R2 = (total_model_variation_217023 / (total_model_variation_217023 + sse_217015));
		if (include_intercept_217021) {
		Tmp5 = -1;
		}
		else {
		Tmp5 = 0;
		}
		
		result_216875.adjustedR2 = (1.0000000000000000e+00 - ((to_float_10657((rows_173414(x_216856) + Tmp5)) / to_float_10657((rows_173414(x_216856) - cols_173436(x_216856)))) * (1.0000000000000000e+00 - result_216875.R2)));
		result_216875.beta_hat = nimCopy(null, ravel_183014(beta_hat_217012), NTI164064);
		result_216875.loglikelihood = loglikelihood_210073(normal_209863(0.0, Math.sqrt(abs_12649(((sse_217015 * ((result_216875.degrees_of_freedom + 1.0000000000000000e-10) - 2.0000000000000000e+00)) / to_float_10657((rows_173414(x_216856) - cols_173436(x_216856))))))), residuals_217014);
		result_216875.degrees_of_freedom = to_float_10657((rows_173414(x_216856) - cols_173436(x_216856)));
		result_216875.noise_variance = shifted_estimator_217028(invchisquare_210718((result_216875.degrees_of_freedom + 1.0000000000000000e-10), NaN), 0.0, ((sse_217015 * ((result_216875.degrees_of_freedom + 1.0000000000000000e-10) - 2.0000000000000000e+00)) / to_float_10657((rows_173414(x_216856) - cols_173436(x_216856)))));
		L6: do {
			var HEX3Atmp_217404 = HEX2EHEX2E_74220(0, (estimate_std_217019 != null ? (estimate_std_217019.length-1) : -1));
			var iHEX60gensym217196_217409 = 0;
			var resultHEX60gensym217197_217460 = new_seq_217434(len_207233(HEX3Atmp_217404));
			L7: do {
				var it_217466 = 0;
				L8: do {
					var x_231161 = 0;
					var colontmp__231162 = 0;
					var colontmp__231163 = 0;
					colontmp__231162 = HEX3Atmp_217404.a;
					colontmp__231163 = HEX3Atmp_217404.b;
					var res_231164 = colontmp__231162;
					L9: do {
							L10: while (true) {
							if (!(res_231164 <= colontmp__231163)) break L10;
								x_231161 = res_231164;
								it_217466 = x_231161;
								resultHEX60gensym217197_217460[iHEX60gensym217196_217409] = shifted_estimator_217209(studentt_209612(result_216875.degrees_of_freedom), coefficients_217020[it_217466], estimate_std_217019[it_217466]);
								iHEX60gensym217196_217409 += 1;
								res_231164 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
		} while(false);
		result_216875.coefficients = nimCopy(null, resultHEX60gensym217197_217460, NTI217438);
		if (include_intercept_217021) {
		Tmp11 = -1;
		}
		else {
		Tmp11 = 0;
		}
		
		var ms_model_dof_217483 = to_float_10657((cols_173436(x_216856) + Tmp11));
		var ms_residual_dof_217484 = to_float_10657((rows_173414(x_216856) - cols_173436(x_216856)));
		result_216875.model_significance = htest_score_217485(central_f_211006(ms_model_dof_217483, ms_residual_dof_217484), ((total_model_variation_217023 / ms_model_dof_217483) / (sse_217015 / ms_residual_dof_217484)), 1);
		if ((0 < (names_216874 != null ? names_216874.length : 0))) {
		result_216875.feature_names = nimCopy(null, names_216874, NTI216858);
		}
		else {
			L12: do {
				var HEX3Atmp_217804 = HEX2EHEX2E_74220(1, cols_173436(x_216856));
				var iHEX60gensym217565_217809 = 0;
				var resultHEX60gensym217566_217839 = new_seq_41234(len_207233(HEX3Atmp_217804));
				L13: do {
					var it_217845 = 0;
					L14: do {
						var x_231172 = 0;
						var colontmp__231173 = 0;
						var colontmp__231174 = 0;
						colontmp__231173 = HEX3Atmp_217804.a;
						colontmp__231174 = HEX3Atmp_217804.b;
						var res_231175 = colontmp__231173;
						L15: do {
								L16: while (true) {
								if (!(res_231175 <= colontmp__231174)) break L16;
									x_231172 = res_231175;
									it_217845 = x_231172;
									var fmt_res_217848 = [mnewString(0)];
									if (fmt_res_217848[0] != null) { fmt_res_217848[0] = (fmt_res_217848[0]).concat(makeNimstrLit("x")); } else { fmt_res_217848[0] = makeNimstrLit("x"); };
									format_value_208902(fmt_res_217848, 0, it_217845, []);
									resultHEX60gensym217566_217839[iHEX60gensym217565_217809] = nimCopy(null, fmt_res_217848[0], NTI138);
									iHEX60gensym217565_217809 += 1;
									res_231175 += 1;
								}
						} while(false);
					} while(false);
				} while(false);
			} while(false);
			result_216875.feature_names = nimCopy(null, resultHEX60gensym217566_217839, NTI41238);
		}
		

	return result_216875;

}

function wise_multiply_174414(a_174416, b_174417) {
	var result_174418 = null;

		L1: do {
			var k_174818 = 0;
			var colontmp__231491 = 0;
			colontmp__231491 = (a_174416 != null ? (a_174416.length-1) : -1);
			var res_231492 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231492 <= colontmp__231491)) break L3;
						k_174818 = res_231492;
						if (result_174418 != null) { result_174418.push([]); } else { result_174418 = [[]]; };
						L4: do {
							var q_174870 = 0;
							var colontmp__231485 = 0;
							colontmp__231485 = (a_174416[0] != null ? (a_174416[0].length-1) : -1);
							var res_231486 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231486 <= colontmp__231485)) break L6;
										q_174870 = res_231486;
										if (result_174418[k_174818] != null) { result_174418[k_174818].push((a_174416[k_174818][q_174870] * b_174417[k_174818][q_174870])); } else { result_174418[k_174818] = [(a_174416[k_174818][q_174870] * b_174417[k_174818][q_174870])]; };
										res_231486 += 1;
									}
							} while(false);
						} while(false);
						res_231492 += 1;
					}
			} while(false);
		} while(false);

	return result_174418;

}

function HEX2EHEX2A_175004(a_175006, b_175007) {
	var result_175008 = null;

		result_175008 = nimCopy(null, wise_multiply_174414(a_175006, b_175007), NTI164067);

	return result_175008;

}

function predict_220235(model_220237, x_220238) {
	var result_220239 = null;

		result_220239 = {predictions: null, degrees_of_freedom: 0.0, prediction_means: null};
		var yhat_220246 = ravel_183014(HEX2A_175540(x_220238, as_column_vector_171014(model_220237.beta_hat)));
		var yvar_220248 = sum_175814(HEX2EHEX2A_175004(HEX2A_175540(x_220238, model_220237.variance_matrix_coefficients), x_220238), 1);
		var estimate_std_220249 = HEX2EHEX5E_169918(yvar_220248, 5.0000000000000000e-01);
		result_220239.prediction_means = nimCopy(null, yhat_220246, NTI164064);
		result_220239.degrees_of_freedom = to_float_10657(((estimate_std_220249 != null ? estimate_std_220249.length : 0) - 1));
		L1: do {
			var HEX3Atmp_220604 = HEX2EHEX2E_74220(0, (estimate_std_220249 != null ? (estimate_std_220249.length-1) : -1));
			var iHEX60gensym220272_220609 = 0;
			var resultHEX60gensym220273_220639 = new_seq_217434(len_207233(HEX3Atmp_220604));
			L2: do {
				var it_220645 = 0;
				L3: do {
					var x_231475 = 0;
					var colontmp__231476 = 0;
					var colontmp__231477 = 0;
					colontmp__231476 = HEX3Atmp_220604.a;
					colontmp__231477 = HEX3Atmp_220604.b;
					var res_231478 = colontmp__231476;
					L4: do {
							L5: while (true) {
							if (!(res_231478 <= colontmp__231477)) break L5;
								x_231475 = res_231478;
								it_220645 = x_231475;
								resultHEX60gensym220273_220639[iHEX60gensym220272_220609] = shifted_estimator_217209(studentt_209612(result_220239.degrees_of_freedom), yhat_220246[it_220645], estimate_std_220249[it_220645]);
								iHEX60gensym220272_220609 += 1;
								res_231478 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
		} while(false);
		result_220239.predictions = nimCopy(null, resultHEX60gensym220273_220639, NTI217438);

	return result_220239;

}

function data_transform_215230(x_215232, dt_215233) {
	var result_215234 = null;

		L1: do {
			var r_215243 = 0;
			var colontmp__231498 = 0;
			colontmp__231498 = rows_173414(x_215232);
			var res_231499 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231499 <= colontmp__231498)) break L3;
						r_215243 = res_231499;
						if (result_215234 != null) { result_215234.push(dt_215233(x_215232[(r_215243 - 1)])); } else { result_215234 = [dt_215233(x_215232[(r_215243 - 1)])]; };
						res_231499 += 1;
					}
			} while(false);
		} while(false);

	return result_215234;

}

function add_170449(x_170454, x_170454_Idx, y_170456) {
		var Tmp1;

		var xl_170462 = (x_170454[x_170454_Idx] != null ? x_170454[x_170454_Idx].length : 0);
		if (x_170454[x_170454_Idx] === null) x_170454[x_170454_Idx] = [];
               if (x_170454[x_170454_Idx].length < (Tmp1 = (xl_170462 + (y_170456 != null ? y_170456.length : 0)), Tmp1)) { for (var i=x_170454[x_170454_Idx].length;i<Tmp1;++i) x_170454[x_170454_Idx].push(0.0); }
               else { x_170454[x_170454_Idx].length = Tmp1; };
		L2: do {
			var i_170487 = 0;
			var colontmp__231513 = 0;
			colontmp__231513 = (y_170456 != null ? (y_170456.length-1) : -1);
			var res_231514 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_231514 <= colontmp__231513)) break L4;
						i_170487 = res_231514;
						x_170454[x_170454_Idx][(xl_170462 + i_170487)] = y_170456[i_170487];
						res_231514 += 1;
					}
			} while(false);
		} while(false);

	
}

function hstack_170567(a_170569, b_170570) {
	var result_170571 = [null];

		result_170571[0] = nimCopy(null, [], NTI170586);
		add_170449(result_170571, 0, []);
		L1: do {
			var c_170624 = 0;
			var colontmp__231506 = 0;
			colontmp__231506 = ((a_170569 != null ? a_170569.length : 0) - 1);
			var res_231507 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231507 <= colontmp__231506)) break L3;
						c_170624 = res_231507;
						if (result_170571[0] != null) { result_170571[0].push(a_170569[c_170624]); } else { result_170571[0] = [a_170569[c_170624]]; };
						res_231507 += 1;
					}
			} while(false);
		} while(false);
		if (result_170571[0] != null) { result_170571[0].push(b_170570); } else { result_170571[0] = [b_170570]; };

	return result_170571[0];

}

function ar1_221214(y_221216, include_mean_221217, feature_name_221218) {

		function HEX3Aanonymous_221315(x_221322) {
			var result_221326 = null;

				result_221326 = nimCopy(null, hstack_170567(x_221322, 1.0000000000000000e+00), NTI164064);

			return result_221326;

		}

	var result_221219 = null;

		var y_0_to_t_1_221256 = HEX5BHEX5D_216081(y_221216, HEX2EHEX2E_74220(0, ((y_221216 != null ? (y_221216.length-1) : -1) - 1)));
		var y_1_to_t_221293 = HEX5BHEX5D_216081(y_221216, HEX2EHEX2E_74220(1, (y_221216 != null ? (y_221216.length-1) : -1)));
		if (include_mean_221217) {
		result_221219 = ols_model_216854(data_transform_215230(as_column_vector_171014(y_0_to_t_1_221256), HEX3Aanonymous_221315), y_1_to_t_221293, [nimCopy(null, feature_name_221218, NTI138)]);
		}
		else {
			result_221219 = ols_model_216854(as_column_vector_171014(y_0_to_t_1_221256), y_1_to_t_221293, [nimCopy(null, feature_name_221218, NTI138)]);
		}
		

	return result_221219;

}

function mean_210534(d_210536) {
		var Tmp1;

	var result_210537 = 0.0;

	BeforeRet: do {
		if ((1.0000000000000000e+00 < d_210536.shape)) {
		Tmp1 = (d_210536.scale / (d_210536.shape - 1.0000000000000000e+00));
		}
		else {
		Tmp1 = NaN;
		}
		
		result_210537 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_210537;

}

function as_inv_gamma_210780(d_210782) {
	var result_210783 = null;

		result_210783 = {shape: (d_210782.dof / 2.0000000000000000e+00), scale: ((d_210782.dof * d_210782.scale) / 2.0000000000000000e+00)};

	return result_210783;

}

function mean_210866(d_210868) {
	var result_210869 = 0.0;

		result_210869 = mean_210534(as_inv_gamma_210780(d_210868));

	return result_210869;

}

function mean_219285(d_219289) {
	var result_219290 = 0.0;

		result_219290 = ((mean_210866(d_219289.distribution) * d_219289.scale) + d_219289.location);

	return result_219290;

}

function estimate_219271(d_219275) {
	var result_219276 = 0.0;

		result_219276 = mean_219285(d_219275.distribution);

	return result_219276;

}

function hstack_170414(vectors_170417) {
	var result_170418 = [null];

		result_170418[0] = nimCopy(null, [], NTI170433);
		add_170449(result_170418, 0, []);
		L1: do {
			var a_170532 = null;
			var i_231530 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_231530 < (vectors_170417 != null ? vectors_170417.length : 0))) break L3;
						a_170532 = vectors_170417[i_231530];
						L4: do {
							var c_170546 = 0;
							var colontmp__231523 = 0;
							colontmp__231523 = ((a_170532 != null ? a_170532.length : 0) - 1);
							var res_231524 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231524 <= colontmp__231523)) break L6;
										c_170546 = res_231524;
										if (result_170418[0] != null) { result_170418[0].push(a_170532[c_170546]); } else { result_170418[0] = [a_170532[c_170546]]; };
										res_231524 += 1;
									}
							} while(false);
						} while(false);
						i_231530 += 1;
					}
			} while(false);
		} while(false);

	return result_170418[0];

}

function model_candidate_224658(x_224660, y_224661, change_point_224662) {
	var result_224663 = null;

		result_224663 = {after_model: null, before_model: null, after_residual_model: null, before_residual_model: null, loglikelihood: 0.0, change_point_candidate: 0, parameters_mean: null, before_model_covariance_parameters: null, existence_change_point_hypothesis: null};
		var pre_x_224700 = add_intercept_215449(HEX5BHEX5D_216081(x_224660, HEX2EHEX2E_74220(0, change_point_224662)));
		var pre_y_224731 = HEX5BHEX5D_216081(y_224661, HEX2EHEX2E_74220(0, change_point_224662));
		var post_x_224766 = add_intercept_215449(HEX5BHEX5D_216081(x_224660, HEX2EHEX2E_74220((change_point_224662 + 1), (x_224660 != null ? (x_224660.length-1) : -1))));
		var post_y_224801 = HEX5BHEX5D_216081(y_224661, HEX2EHEX2E_74220((change_point_224662 + 1), (y_224661 != null ? (y_224661.length-1) : -1)));
		var pre_ols_model_224813 = ols_model_216854(pre_x_224700, pre_y_224731, [makeNimstrLit("beta1"), makeNimstrLit("beta0")]);
		var post_ols_model_224825 = ols_model_216854(post_x_224766, HEX2D_165275(post_y_224801, predict_220235(pre_ols_model_224813, post_x_224766).prediction_means), [makeNimstrLit("delta1"), makeNimstrLit("delta0")]);
		var pre_residual_ar_model_224826 = ar1_221214(pre_ols_model_224813.residuals, false, makeNimstrLit("phi0"));
		var post_residual_ar_model_224827 = ar1_221214(post_ols_model_224825.residuals, false, makeNimstrLit("phi1"));
		var likelihood_model_224906 = (loglikelihood_210073(normal_209863(0.0, Math.sqrt(estimate_219271(pre_residual_ar_model_224826.noise_variance))), pre_ols_model_224813.residuals) + loglikelihood_210073(normal_209863(0.0, Math.sqrt(estimate_219271(post_residual_ar_model_224827.noise_variance))), post_ols_model_224825.residuals));
		result_224663 = {before_model: pre_ols_model_224813, after_model: post_ols_model_224825, before_residual_model: pre_residual_ar_model_224826, after_residual_model: post_residual_ar_model_224827, loglikelihood: likelihood_model_224906, change_point_candidate: change_point_224662, parameters_mean: hstack_170414([nimCopy(null, pre_ols_model_224813.beta_hat, NTI164064), nimCopy(null, pre_residual_ar_model_224826.beta_hat, NTI164064), nimCopy(null, post_ols_model_224825.beta_hat, NTI164064), nimCopy(null, post_residual_ar_model_224827.beta_hat, NTI164064)]), before_model_covariance_parameters: null, existence_change_point_hypothesis: null};

	return result_224663;

}

function data_transform_215264(x_215266, dt_215267) {
	var result_215268 = null;

		L1: do {
			var r_215277 = 0;
			var colontmp__231573 = 0;
			colontmp__231573 = (rows_173414(x_215266) - 1);
			var res_231574 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231574 <= colontmp__231573)) break L3;
						r_215277 = res_231574;
						if (result_215268 != null) { result_215268.push(dt_215267(x_215266[r_215277], r_215277)); } else { result_215268 = [dt_215267(x_215266[r_215277], r_215277)]; };
						res_231574 += 1;
					}
			} while(false);
		} while(false);

	return result_215268;

}

function constant_matrix_181414(rows_181416, cols_181417, constant_181418) {
										var Tmp7;

	var result_181419 = null;

		L1: do {
			var i_181428 = 0;
			var res_231586 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231586 <= rows_181416)) break L3;
						i_181428 = res_231586;
						if (result_181419 != null) { result_181419.push([]); } else { result_181419 = [[]]; };
						L4: do {
							var j_181459 = 0;
							var res_231581 = 1;
							L5: do {
									L6: while (true) {
									if (!(res_231581 <= cols_181417)) break L6;
										j_181459 = res_231581;
										if ((Tmp7 = result_181419[(i_181428 - 1)], Tmp7) != null) { Tmp7.push(constant_181418); } else { Tmp7 = [constant_181418]; };
										res_231581 += 1;
									}
							} while(false);
						} while(false);
						res_231586 += 1;
					}
			} while(false);
		} while(false);

	return result_181419;

}

function ones_181498(row_181500, col_181501) {
	var result_181502 = null;

		result_181502 = nimCopy(null, constant_matrix_181414(row_181500, col_181501, 1.0000000000000000e+00), NTI164067);

	return result_181502;

}

function covariance_matrix_for_before_model_224122(model_224124, x_224125) {

		function HEX3Aanonymous_224212(x_224222, i_224223) {
				var Tmp1;
				var Tmp2;

			var result_224229 = null;

				if ((model_224124.change_point_candidate < i_224223)) {
				Tmp1 = x_224222[0];
				}
				else {
				Tmp1 = 0.0;
				}
				
				if ((model_224124.change_point_candidate < i_224223)) {
				Tmp2 = 1.0000000000000000e+00;
				}
				else {
				Tmp2 = 0.0;
				}
				
				result_224229 = nimCopy(null, [x_224222[0], 1.0000000000000000e+00, Tmp1, Tmp2], NTI224240);

			return result_224229;

		}

	var result_224126 = null;

	BeforeRet: do {
		var t_224132 = (x_224125 != null ? x_224125.length : 0);
		var phi_224134 = min_12701(abs_12649(model_224124.before_residual_model.beta_hat[0]), 9.9999000000000005e-01);
		var covariance_factor_224175 = (estimate_219271(model_224124.before_model.noise_variance) / (1.0000000000000000e+00 - HEX5E_164027(phi_224134, 2.0000000000000000e+00)));
		var x_224254 = data_transform_215264(as_column_vector_171014(HEX5BHEX5D_216081(x_224125, HEX2EHEX2E_74220(1, (x_224125 != null ? (x_224125.length-1) : -1)))), HEX3Aanonymous_224212);
		var covariance_approx_224416 = [];
		L1: do {
			var r_224426 = 0;
			var res_231539 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231539 <= 2)) break L3;
						r_224426 = res_231539;
						if (covariance_approx_224416 != null) { covariance_approx_224416.push([]); } else { covariance_approx_224416 = [[]]; };
						L4: do {
							var c_224458 = 0;
							var res_231534 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_231534 <= 2)) break L6;
										c_224458 = res_231534;
										if (covariance_approx_224416[r_224426] != null) { covariance_approx_224416[r_224426].push((covariance_factor_224175 * HEX5E_164027(phi_224134, to_float_10657(Math.abs(Math.trunc((c_224458 - r_224426) % t_224132)))))); } else { covariance_approx_224416[r_224426] = [(covariance_factor_224175 * HEX5E_164027(phi_224134, to_float_10657(Math.abs(Math.trunc((c_224458 - r_224426) % t_224132)))))]; };
										res_231534 += 1;
									}
							} while(false);
						} while(false);
						res_231539 += 1;
					}
			} while(false);
		} while(false);
		var inverse_approximation_224466 = inverse_183595(covariance_approx_224416);
		var inverted_matrix_224482 = [];
		L7: do {
			var r_224497 = 0;
			var colontmp__231552 = 0;
			colontmp__231552 = ((x_224125 != null ? (x_224125.length-1) : -1) - 1);
			var res_231553 = 0;
			L8: do {
					L9: while (true) {
					if (!(res_231553 <= colontmp__231552)) break L9;
						r_224497 = res_231553;
						if (inverted_matrix_224482 != null) { inverted_matrix_224482.push([]); } else { inverted_matrix_224482 = [[]]; };
						L10: do {
							var c_224534 = 0;
							var colontmp__231546 = 0;
							colontmp__231546 = ((x_224125 != null ? (x_224125.length-1) : -1) - 1);
							var res_231547 = 0;
							L11: do {
									L12: while (true) {
									if (!(res_231547 <= colontmp__231546)) break L12;
										c_224534 = res_231547;
										if (inverted_matrix_224482[r_224497] != null) { inverted_matrix_224482[r_224497].push(0.0); } else { inverted_matrix_224482[r_224497] = [0.0]; };
										if (((r_224497 == c_224534) && ((r_224497 == 0) || (r_224497 == ((x_224125 != null ? (x_224125.length-1) : -1) - 1))))) {
										inverted_matrix_224482[r_224497][c_224534] = inverse_approximation_224466[0][0];
										}
										else {
										if ((r_224497 == c_224534)) {
										inverted_matrix_224482[r_224497][c_224534] = inverse_approximation_224466[1][1];
										}
										else {
										if ((Math.abs((r_224497 - c_224534)) <= 1)) {
										inverted_matrix_224482[r_224497][c_224534] = inverse_approximation_224466[1][0];
										}
										}}
										res_231547 += 1;
									}
							} while(false);
						} while(false);
						res_231553 += 1;
					}
			} while(false);
		} while(false);
		result_224126 = nimCopy(null, inverse_183595(HEX2A_175540(HEX2A_175540(t_181908(x_224254), inverted_matrix_224482), x_224254)), NTI164067);
		break BeforeRet;
		var covariance_224601 = ones_181498((t_224132 - 1), (t_224132 - 1));
		L13: do {
			var r_224616 = 0;
			var colontmp__231566 = 0;
			colontmp__231566 = ((x_224125 != null ? (x_224125.length-1) : -1) - 1);
			var res_231567 = 0;
			L14: do {
					L15: while (true) {
					if (!(res_231567 <= colontmp__231566)) break L15;
						r_224616 = res_231567;
						L16: do {
							var c_224631 = 0;
							var colontmp__231560 = 0;
							colontmp__231560 = ((x_224125 != null ? (x_224125.length-1) : -1) - 1);
							var res_231561 = 0;
							L17: do {
									L18: while (true) {
									if (!(res_231561 <= colontmp__231560)) break L18;
										c_224631 = res_231561;
										covariance_224601[r_224616][c_224631] = (covariance_factor_224175 * HEX5E_164027(phi_224134, to_float_10657(Math.abs(Math.trunc((c_224631 - r_224616) % t_224132)))));
										res_231561 += 1;
									}
							} while(false);
						} while(false);
						res_231567 += 1;
					}
			} while(false);
		} while(false);
		result_224126 = nimCopy(null, inverse_183595(HEX2A_175540(HEX2A_175540(t_181908(x_224254), inverse_183595(covariance_224601)), x_224254)), NTI164067);
	} while (false);

	return result_224126;

}

function HEX5BHEX5D_172218(a_172220, r_172221, c_172222) {
	var result_172223 = 0.0;

		result_172223 = a_172220[r_172221][c_172222];

	return result_172223;

}

function new_seq_225615(len_225618) {
	var result_225620 = null;

		result_225620 = new Array(len_225618); for (var i=0;i<len_225618;++i) {result_225620[i]=null;}
	return result_225620;

}

function new_seq_207262(len_207265) {
	var result_207267 = null;

		result_207267 = new Array(len_207265); for (var i=0;i<len_207265;++i) {result_207267[i]=0.0;}
	return result_207267;

}

function HEX2A_147072(x_147074, order_147075) {
	var result_147076 = 0;

		var y_147081 = (order_147075 - 1);
		result_147076 = ((x_147074 ^ y_147081) - y_147081);

	return result_147076;

}

function merge_212920(a_212925, b_212928, lo_212929, m_212930, hi_212931, cmp_212935, order_212936) {
	BeforeRet: do {
		if ((HEX2A_147072(cmp_212935(a_212925[m_212930], a_212925[(m_212930 + 1)]), order_212936) <= 0)) {
		break BeforeRet;
		}
		
		var j_212937 = lo_212929;
		var bb_213202 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_212937 <= m_212930)) break L2;
					b_212928[bb_213202] = a_212925[j_212937];
					bb_213202 += 1;
					j_212937 += 1;
				}
		} while(false);
		var i_213414 = 0;
		var k_213415 = lo_212929;
		L3: do {
				L4: while (true) {
				if (!((k_213415 < j_212937) && (j_212937 <= hi_212931))) break L4;
					if ((HEX2A_147072(cmp_212935(b_212928[i_213414], a_212925[j_212937]), order_212936) <= 0)) {
					a_212925[k_213415] = b_212928[i_213414];
					i_213414 += 1;
					}
					else {
						a_212925[k_213415] = a_212925[j_212937];
						j_212937 += 1;
					}
					
					k_213415 += 1;
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_213415 < j_212937)) break L6;
					a_212925[k_213415] = b_212928[i_213414];
					k_213415 += 1;
					i_213414 += 1;
				}
		} while(false);
	} while (false);

	
}

function sort_212889(a_212894, cmp_212898, order_212899) {
		var n_212904 = (a_212894 != null ? a_212894.length : 0);
		var b_212906 = null;
		b_212906 = new Array(Math.trunc(n_212904 / 2)); for (var i=0;i<Math.trunc(n_212904 / 2);++i) {b_212906[i]=0.0;}		var s_212915 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_212915 < n_212904)) break L2;
					var m_212916 = ((n_212904 - 1) - s_212915);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_212916)) break L4;
								merge_212920(a_212894, b_212906, nimMax(((m_212916 - s_212915) + 1), 0), m_212916, (m_212916 + s_212915), cmp_212898, order_212899);
								m_212916 -= (s_212915 * 2);
							}
					} while(false);
					s_212915 = (s_212915 * 2);
				}
		} while(false);

	
}

function sorted_212847(a_212851, cmp_212855, order_212856) {
	var result_212858 = null;

		result_212858 = nimCopy(null, new_seq_207262((a_212851 != null ? a_212851.length : 0)), NTI207266);
		L1: do {
			var i_212882 = 0;
			var colontmp__231617 = 0;
			colontmp__231617 = (a_212851 != null ? (a_212851.length-1) : -1);
			var res_231618 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231618 <= colontmp__231617)) break L3;
						i_212882 = res_231618;
						result_212858[i_212882] = a_212851[i_212882];
						res_231618 += 1;
					}
			} while(false);
		} while(false);
		sort_212889(result_212858, cmp_212855, order_212856);

	return result_212858;

}

function cmp_212823(x_212826, y_212827) {
	var result_212828 = 0;

	BeforeRet: do {
		if ((x_212826 == y_212827)) {
		result_212828 = 0;
		break BeforeRet;
		}
		
		if ((x_212826 < y_212827)) {
		result_212828 = -1;
		break BeforeRet;
		}
		
		result_212828 = 1;
		break BeforeRet;
	} while (false);

	return result_212828;

}

function benjamini_hochberg_fdr_212808(v_212810, alpha_212811) {
	var result_212812 = [0.0];

		var m_212818 = to_float_10657((v_212810 != null ? v_212810.length : 0));
		var vs_214258 = sorted_212847(v_212810, cmp_212823, 1);
		L1: do {
			var i_x_214414 = 0;
			var x_214415 = 0.0;
			var i_231613 = 0;
			var l_231614 = (vs_214258 != null ? vs_214258.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_231613 < l_231614)) break L3;
						i_x_214414 = i_231613;
						x_214415 = vs_214258[i_231613];
						var bh_214416 = ((alpha_212811 / m_212818) * to_float_10657((i_x_214414 + 1)));
						if ((x_214415 < bh_214416)) {
						HEX2BHEX3D_60121(result_212812, 0, 1.0000000000000000e+00);
						}
						
						i_231613 += 1;
					}
			} while(false);
		} while(false);

	return result_212812[0];

}

function new_seq_226414(len_226417) {
	var result_226419 = null;

		result_226419 = new Array(len_226417); for (var i=0;i<len_226417;++i) {result_226419[i]=null;}
	return result_226419;

}

function merge_226491(a_226496, b_226499, lo_226500, m_226501, hi_226502, cmp_226506, order_226507) {
	BeforeRet: do {
		if ((HEX2A_147072(cmp_226506(a_226496[m_226501], a_226496[(m_226501 + 1)]), order_226507) <= 0)) {
		break BeforeRet;
		}
		
		var j_226508 = lo_226500;
		var bb_226802 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_226508 <= m_226501)) break L2;
					b_226499[bb_226802] = a_226496[j_226508];
					bb_226802 += 1;
					j_226508 += 1;
				}
		} while(false);
		var i_227014 = 0;
		var k_227015 = lo_226500;
		L3: do {
				L4: while (true) {
				if (!((k_227015 < j_226508) && (j_226508 <= hi_226502))) break L4;
					if ((HEX2A_147072(cmp_226506(b_226499[i_227014], a_226496[j_226508]), order_226507) <= 0)) {
					a_226496[k_227015] = b_226499[i_227014];
					i_227014 += 1;
					}
					else {
						a_226496[k_227015] = a_226496[j_226508];
						j_226508 += 1;
					}
					
					k_227015 += 1;
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_227015 < j_226508)) break L6;
					a_226496[k_227015] = b_226499[i_227014];
					k_227015 += 1;
					i_227014 += 1;
				}
		} while(false);
	} while (false);

	
}

function sort_226460(a_226465, cmp_226469, order_226470) {
		var n_226475 = (a_226465 != null ? a_226465.length : 0);
		var b_226477 = null;
		b_226477 = new Array(Math.trunc(n_226475 / 2)); for (var i=0;i<Math.trunc(n_226475 / 2);++i) {b_226477[i]=null;}		var s_226486 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_226486 < n_226475)) break L2;
					var m_226487 = ((n_226475 - 1) - s_226486);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_226487)) break L4;
								merge_226491(a_226465, b_226477, nimMax(((m_226487 - s_226486) + 1), 0), m_226487, (m_226487 + s_226486), cmp_226469, order_226470);
								m_226487 -= (s_226486 * 2);
							}
					} while(false);
					s_226486 = (s_226486 * 2);
				}
		} while(false);

	
}

function sorted_226397(a_226401, cmp_226405, order_226406) {
	var result_226408 = null;

		result_226408 = nimCopy(null, new_seq_226414((a_226401 != null ? a_226401.length : 0)), NTI226418);
		L1: do {
			var i_226453 = 0;
			var colontmp__231629 = 0;
			colontmp__231629 = (a_226401 != null ? (a_226401.length-1) : -1);
			var res_231630 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231630 <= colontmp__231629)) break L3;
						i_226453 = res_231630;
						result_226408[i_226453] = a_226401[i_226453];
						res_231630 += 1;
					}
			} while(false);
		} while(false);
		sort_226460(result_226408, cmp_226405, order_226406);

	return result_226408;

}

function existence_change_point_wald_test_225214(models_225217) {
						var Tmp4;
						var Tmp5;

		function HEX3Aanonymous_226281(h1_226291, h2_226292) {
			var result_226298 = false;

				result_226298 = (p_value_224032(h1_226291) < p_value_224032(h2_226292));

			return result_226298;

		}
		var Tmp14;

	var result_225222 = null;

	BeforeRet: do {
		var m_225228 = (models_225217 != null ? models_225217.length : 0);
		var base_distribution_225229 = {dof: 2.0000000000000000e+00};
		var scores_225246 = [];
		L1: do {
			var j_225261 = 0;
			var colontmp__231593 = 0;
			colontmp__231593 = (models_225217 != null ? (models_225217.length-1) : -1);
			var res_231594 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231594 <= colontmp__231593)) break L3;
						j_225261 = res_231594;
						var cov_225262 = nimCopy(null, models_225217[j_225261].before_model_covariance_parameters, NTI164067);
						var beta_225263 = as_column_vector_171014(models_225217[j_225261].after_model.beta_hat);
						var reduced_cov_225313 = [[HEX5BHEX5D_172218(cov_225262, 2, 2), HEX5BHEX5D_172218(cov_225262, 2, 3)], [HEX5BHEX5D_172218(cov_225262, 3, 2), HEX5BHEX5D_172218(cov_225262, 3, 3)]];
						var score_225314 = (Tmp5 = (Tmp4 = HEX2A_175540(HEX2A_175540(t_181908(beta_225263), inverse_183595(reduced_cov_225313)), beta_225263), Tmp4)[0], Tmp5)[0];
						if (scores_225246 != null) { scores_225246.push(score_225314); } else { scores_225246 = [score_225314]; };
						res_231594 += 1;
					}
			} while(false);
		} while(false);
		L6: do {
			var iHEX60gensym225324_225608 = 0;
			var resultHEX60gensym225325_225641 = new_seq_225615((scores_225246 != null ? scores_225246.length : 0));
			L7: do {
				var it_225648 = 0.0;
				var i_231602 = 0;
				var l_231603 = (scores_225246 != null ? scores_225246.length : 0);
				L8: do {
						L9: while (true) {
						if (!(i_231602 < l_231603)) break L9;
							it_225648 = scores_225246[i_231602];
							resultHEX60gensym225325_225641[iHEX60gensym225324_225608] = htest_score_225410({dof: (2.0000000000000000e+00 * to_float_10657(m_225228))}, it_225648, 2);
							iHEX60gensym225324_225608 += 1;
							i_231602 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var hypothesis_set_225664 = nimCopy(null, resultHEX60gensym225325_225641, NTI225619);
		L10: do {
			var iHEX60gensym225667_226208 = 0;
			var resultHEX60gensym225668_226220 = new_seq_207262((hypothesis_set_225664 != null ? hypothesis_set_225664.length : 0));
			L11: do {
				var it_226227 = null;
				var i_231608 = 0;
				var l_231609 = (hypothesis_set_225664 != null ? hypothesis_set_225664.length : 0);
				L12: do {
						L13: while (true) {
						if (!(i_231608 < l_231609)) break L13;
							it_226227 = hypothesis_set_225664[i_231608];
							resultHEX60gensym225668_226220[iHEX60gensym225667_226208] = p_value_224032(it_226227);
							iHEX60gensym225667_226208 += 1;
							i_231608 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var p_values_226277 = nimCopy(null, resultHEX60gensym225668_226220, NTI207266);
		var number_rejected_226278 = benjamini_hochberg_fdr_212808(p_values_226277, 5.0000000000000003e-02);
		var hypothesis_227873 = (Tmp14 = sorted_226397(hypothesis_set_225664, HEX3Aanonymous_226281, 1), Tmp14)[0];
		result_225222 = hypothesis_227873;
		break BeforeRet;
	} while (false);

	return result_225222;

}

function rits_model_228528(x_228530, y_228531, candidate_change_point_start_228532, candidate_change_point_end_228533) {
								var Tmp5;
								var Tmp6;

	var result_228534 = null;

		result_228534 = {candidates: null, change_point_candidates: null, loglikelihood_candidates: null, loglikelihood: 0.0, change_point_index: 0, change_point_x: 0.0, model: null, parameters_mean: null};
		if (!(((y_228531 != null ? y_228531.length : 0) == (x_228530 != null ? x_228530.length : 0)))) {
		var eHEX60gensym228553_228603 = null;
		eHEX60gensym228553_228603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym228553_228603.message = nimCopy(null, makeNimstrLit("x and y must have the same size"), NTI138);
		eHEX60gensym228553_228603.parent = null;
		raiseException(eHEX60gensym228553_228603, "ValueError");
		}
		
		var likely_change_point_228612 = -1;
		result_228534.loglikelihood = -Infinity;
		L1: do {
			var k_228618 = 0;
			var res_231129 = candidate_change_point_start_228532;
			L2: do {
					L3: while (true) {
					if (!(res_231129 <= candidate_change_point_end_228533)) break L3;
						k_228618 = res_231129;
						L4: do {
								if ((k_228618 < 1)) Tmp5 = true; else {									Tmp5 = (((y_228531 != null ? (y_228531.length-1) : -1) - 2) < k_228618);								}							if (Tmp5) {
							break L4;
							}
							
							var candidate_228625 = model_candidate_224658(x_228530, y_228531, k_228618);
							if (result_228534.change_point_candidates != null) { result_228534.change_point_candidates.push(k_228618); } else { result_228534.change_point_candidates = [k_228618]; };
							if (result_228534.loglikelihood_candidates != null) { result_228534.loglikelihood_candidates.push(candidate_228625.loglikelihood); } else { result_228534.loglikelihood_candidates = [candidate_228625.loglikelihood]; };
								if (!!((classify_54030(candidate_228625.loglikelihood) == 4))) Tmp6 = false; else {									Tmp6 = (result_228534.loglikelihood < candidate_228625.loglikelihood);								}							if (Tmp6) {
							result_228534.loglikelihood = candidate_228625.loglikelihood;
							result_228534.model = candidate_228625;
							likely_change_point_228612 = k_228618;
							}
							
						} while(false);
						res_231129 += 1;
					}
			} while(false);
		} while(false);
		result_228534.parameters_mean = nimCopy(null, result_228534.model.parameters_mean, NTI164064);
		result_228534.model.before_model_covariance_parameters = nimCopy(null, covariance_matrix_for_before_model_224122(result_228534.model, x_228530), NTI164067);
		result_228534.model.existence_change_point_hypothesis = existence_change_point_wald_test_225214([result_228534.model]);
		result_228534.change_point_index = likely_change_point_228612;
		result_228534.change_point_x = x_228530[likely_change_point_228612];

	return result_228534;

}

function nsuRepeatStr(s_154683, n_154684) {
	var result_154685 = null;

		result_154685 = nimCopy(null, mnewString(0), NTI138);
		L1: do {
			var i_154694 = 0;
			var colontmp__231648 = 0;
			colontmp__231648 = n_154684;
			var res_231649 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231649 <= colontmp__231648)) break L3;
						i_154694 = res_231649;
						if (result_154685 != null) { result_154685 = (result_154685).concat(s_154683); } else { result_154685 = s_154683.slice(); };
						res_231649 += 1;
					}
			} while(false);
		} while(false);

	return result_154685;

}

function nucruneLen(s_65829) {
	var result_65830 = 0;

		var i_65832 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_65832 < (s_65829 != null ? s_65829.length : 0))) break L2;
					if ((s_65829[i_65832] <= 127)) {
					i_65832 += 1;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 5) == 6)) {
					i_65832 += 2;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 4) == 14)) {
					i_65832 += 3;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 3) == 30)) {
					i_65832 += 4;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 2) == 62)) {
					i_65832 += 5;
					}
					else {
					if ((((s_65829[i_65832] >>> 0) >>> 1) == 126)) {
					i_65832 += 6;
					}
					else {
					i_65832 += 1;
					}
					}}}}}
					result_65830 += 1;
				}
		} while(false);

	return result_65830;

}

function rune_len_at_65961(s_65963, i_65964) {
	var result_65965 = 0;

		if ((s_65963[i_65964] <= 127)) {
		result_65965 = 1;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 5) == 6)) {
		result_65965 = 2;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 4) == 14)) {
		result_65965 = 3;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 3) == 30)) {
		result_65965 = 4;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 2) == 62)) {
		result_65965 = 5;
		}
		else {
		if ((((s_65963[i_65964] >>> 0) >>> 1) == 126)) {
		result_65965 = 6;
		}
		else {
			result_65965 = 1;
		}
		}}}}}

	return result_65965;

}

function rune_offset_71644(s_71646, pos_71647, start_71648) {
	var result_71649 = 0;

	BeforeRet: do {
		var i_71651 = 0;
		var o_71652 = start_71648;
		L1: do {
				L2: while (true) {
				if (!(i_71651 < pos_71647)) break L2;
					o_71652 += rune_len_at_65961(s_71646, o_71652);
					if (((s_71646 != null ? s_71646.length : 0) <= o_71652)) {
					result_71649 = -1;
					break BeforeRet;
					}
					
					i_71651 += 1;
				}
		} while(false);
		result_71649 = o_71652;
		break BeforeRet;
	} while (false);

	return result_71649;

}

function validate_utf8_68829(s_68831) {
						var Tmp3;
						var Tmp4;
						var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;

	var result_68832 = 0;

	BeforeRet: do {
		var i_68834 = 0;
		var l_68835 = (s_68831 != null ? s_68831.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_68834 < l_68835)) break L2;
					if ((s_68831[i_68834] <= 127)) {
					i_68834 += 1;
					}
					else {
					if ((((s_68831[i_68834] >>> 0) >>> 5) == 6)) {
					if ((s_68831[i_68834] < 194)) {
					result_68832 = i_68834;
					break BeforeRet;
					}
					
						if (!((i_68834 + 1) < l_68835)) Tmp3 = false; else {							Tmp3 = (((s_68831[(i_68834 + 1)] >>> 0) >>> 6) == 2);						}					if (Tmp3) {
					i_68834 += 2;
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_68831[i_68834] >>> 0) >>> 4) == 14)) {
						if (!((i_68834 + 2) < l_68835)) Tmp5 = false; else {							Tmp5 = (((s_68831[(i_68834 + 1)] >>> 0) >>> 6) == 2);						}						if (!Tmp5) Tmp4 = false; else {							Tmp4 = (((s_68831[(i_68834 + 2)] >>> 0) >>> 6) == 2);						}					if (Tmp4) {
					i_68834 += 3;
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_68831[i_68834] >>> 0) >>> 3) == 30)) {
						if (!((i_68834 + 3) < l_68835)) Tmp8 = false; else {							Tmp8 = (((s_68831[(i_68834 + 1)] >>> 0) >>> 6) == 2);						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (((s_68831[(i_68834 + 2)] >>> 0) >>> 6) == 2);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (((s_68831[(i_68834 + 3)] >>> 0) >>> 6) == 2);						}					if (Tmp6) {
					i_68834 += 4;
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					
					}
					else {
						result_68832 = i_68834;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_68832 = -1;
		break BeforeRet;
	} while (false);

	return result_68832;

}

function align_string_161223(s_161225, minimum_width_161226, align_161227, fill_161228) {
			var Tmp1;

	var result_161229 = null;

		if ((minimum_width_161226 == 0)) {
		result_161229 = nimCopy(null, s_161225, NTI138);
		}
		else {
			if ((validate_utf8_68829(s_161225) == -1)) {
			Tmp1 = nucruneLen(s_161225);
			}
			else {
			Tmp1 = (s_161225 != null ? s_161225.length : 0);
			}
			
			var s_rune_len_161231 = Tmp1;
			var to_fill_161232 = (minimum_width_161226 - s_rune_len_161231);
			if ((to_fill_161232 <= 0)) {
			result_161229 = nimCopy(null, s_161225, NTI138);
			}
			else {
			if (((align_161227 == 60) || (align_161227 == 0))) {
			result_161229 = nimCopy(null, (s_161225 || []).concat(nsuRepeatChar(fill_161228, to_fill_161232) || []), NTI138);
			}
			else {
			if ((align_161227 == 94)) {
			var half_161233 = Math.trunc(to_fill_161232 / 2);
			result_161229 = nimCopy(null, (nsuRepeatChar(fill_161228, half_161233) || []).concat(s_161225 || [],nsuRepeatChar(fill_161228, (to_fill_161232 - half_161233)) || []), NTI138);
			}
			else {
				result_161229 = nimCopy(null, (nsuRepeatChar(fill_161228, to_fill_161232) || []).concat(s_161225 || []), NTI138);
			}
			}}
		}
		

	return result_161229;

}

function format_value_161688(result_161691, result_161691_Idx, value_161692, specifier_161693) {
		var spec_161694 = parse_standard_format_specifier_161324(specifier_161693, 0, false);
		var value_161695 = nimCopy(null, value_161692, NTI138);
		switch (spec_161694.typ) {
		case 115:
		case 0:
			break;
		default: 
			var eHEX60gensym161698_161803 = null;
			eHEX60gensym161698_161803 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym161698_161803.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_161694.typ]), NTI138);
			eHEX60gensym161698_161803.parent = null;
			raiseException(eHEX60gensym161698_161803, "ValueError");
			break;
		}
		if (!((spec_161694.precision == -1))) {
		if ((spec_161694.precision < nucruneLen(value_161695))) {
		(value_161695 == null ? value_161695 = mnewString(rune_offset_71644(value_161695, spec_161694.precision, 0)) : value_161695.length = rune_offset_71644(value_161695, spec_161694.precision, 0));
		}
		
		}
		
		if (result_161691[result_161691_Idx] != null) { result_161691[result_161691_Idx] = (result_161691[result_161691_Idx]).concat(align_string_161223(value_161695, spec_161694.minimumWidth, spec_161694.align, spec_161694.fill)); } else { result_161691[result_161691_Idx] = align_string_161223(value_161695, spec_161694.minimumWidth, spec_161694.align, spec_161694.fill).slice(); };

	
}

function nsuformatBiggestFloat(f_158221, format_158222, precision_158228, decimal_sep_158229) {
	var result_158230 = null;

		var precision_158401 = precision_158228;
		if ((precision_158401 == -1)) {
		precision_158401 = 6;
		}
		
		var res_158403 = null;
		switch (format_158222) {
		case 0:
			res_158403 = f_158221.toString();
			break;
		case 1:
			res_158403 = f_158221.toFixed(precision_158401);
			break;
		case 2:
			res_158403 = f_158221.toExponential(precision_158401);
			break;
		}
		result_158230 = nimCopy(null, cstrToNimstr(res_158403), NTI138);
		if (((1.0000000000000000e+00 / f_158221) == -Infinity)) {
		result_158230 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_158403) || []), NTI138);
		}
		
		L1: do {
			var i_158411 = 0;
			var colontmp__231682 = 0;
			colontmp__231682 = (result_158230 != null ? result_158230.length : 0);
			var i_231683 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_231683 < colontmp__231682)) break L3;
						i_158411 = i_231683;
						if ((ConstSet9[result_158230[i_158411]] != undefined)) {
						result_158230[i_158411] = decimal_sep_158229;
						}
						
						i_231683 += 1;
					}
			} while(false);
		} while(false);

	return result_158230;

}

function insert_28601(x_28604, x_28604_Idx, item_28605, i_28606) {
		var xl_28607 = (x_28604[x_28604_Idx] != null ? x_28604[x_28604_Idx].length : 0);
		(x_28604[x_28604_Idx] == null ? x_28604[x_28604_Idx] = mnewString((xl_28607 + (item_28605 != null ? item_28605.length : 0))) : x_28604[x_28604_Idx].length = (xl_28607 + (item_28605 != null ? item_28605.length : 0)));
		var j_28608 = (xl_28607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_28606 <= j_28608)) break L2;
					x_28604[x_28604_Idx][(j_28608 + (item_28605 != null ? item_28605.length : 0))] = x_28604[x_28604_Idx][j_28608];
					j_28608 -= 1;
				}
		} while(false);
		j_28608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_28608 < (item_28605 != null ? item_28605.length : 0))) break L4;
					x_28604[x_28604_Idx][(j_28608 + i_28606)] = item_28605[j_28608];
					j_28608 += 1;
				}
		} while(false);

	
}

function nsuToUpperAsciiChar(c_150463) {
	var result_150464 = 0;

		if ((ConstSet11[c_150463] != undefined)) {
		result_150464 = (c_150463 - 32);
		}
		else {
			result_150464 = c_150463;
		}
		

	return result_150464;

}

function nsuToUpperAsciiStr(s_150502) {
	var result_150503 = null;

		result_150503 = nimCopy(null, mnewString((s_150502 != null ? s_150502.length : 0)), NTI138);
		L1: do {
			var iHEX60gensym150504_150513 = 0;
			var colontmp__231689 = 0;
			colontmp__231689 = ((s_150502 != null ? s_150502.length : 0) - 1);
			var res_231690 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231690 <= colontmp__231689)) break L3;
						iHEX60gensym150504_150513 = res_231690;
						result_150503[iHEX60gensym150504_150513] = nsuToUpperAsciiChar(s_150502[iHEX60gensym150504_150513]);
						res_231690 += 1;
					}
			} while(false);
		} while(false);

	return result_150503;

}

function format_value_208333(result_208336, result_208336_Idx, value_208337, specifier_208338) {
		var Tmp1;

	BeforeRet: do {
		if (((specifier_208338 != null ? specifier_208338.length : 0) == 0)) {
		if (result_208336[result_208336_Idx] != null) { result_208336[result_208336_Idx] = (result_208336[result_208336_Idx]).concat(cstrToNimstr((value_208337)+"")); } else { result_208336[result_208336_Idx] = cstrToNimstr((value_208337)+"").slice(); };
		break BeforeRet;
		}
		
		var spec_208339 = parse_standard_format_specifier_161324(specifier_208338, 0, false);
		var fmode_208340 = 0;
		switch (spec_208339.typ) {
		case 101:
		case 69:
			fmode_208340 = 2;
			break;
		case 102:
		case 70:
			fmode_208340 = 1;
			break;
		case 103:
		case 71:
			fmode_208340 = 0;
			break;
		case 0:
			break;
		default: 
			var eHEX60gensym208342_208403 = null;
			eHEX60gensym208342_208403 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym208342_208403.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_208339.typ]), NTI138);
			eHEX60gensym208342_208403.parent = null;
			raiseException(eHEX60gensym208342_208403, "ValueError");
			break;
		}
		var f_208410 = [nsuformatBiggestFloat(value_208337, fmode_208340, spec_208339.precision, 46)];
		var sign_208411 = false;
		if ((0.0 <= value_208337)) {
		if (!((spec_208339.sign == 45))) {
		sign_208411 = true;
		if ((value_208337 == 0.0)) {
		if (((1.0000000000000000e+00 / value_208337) == Infinity)) {
		insert_28601(f_208410, 0, nimCharToStr(spec_208339.sign), 0);
		}
		
		}
		else {
		insert_28601(f_208410, 0, nimCharToStr(spec_208339.sign), 0);
		}
		
		}
		
		}
		else {
			sign_208411 = true;
		}
		
		if (spec_208339.padWithZero) {
		var sign_str_208414 = [];
		if (sign_208411) {
		sign_str_208414 = nimCopy(null, nimCharToStr(f_208410[0][0]), NTI138);
		f_208410[0] = nimCopy(null, HEX5BHEX5D_101304(f_208410[0], HEX2EHEX2E_101239(1, 1)), NTI138);
		}
		
		var to_fill_208457 = ((spec_208339.minimumWidth - (f_208410[0] != null ? f_208410[0].length : 0)) - (sign_208411 ? 1:0));
		if ((0 < to_fill_208457)) {
		f_208410[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_208457) || []).concat(f_208410[0] || []), NTI138);
		}
		
		if (sign_208411) {
		f_208410[0] = nimCopy(null, (sign_str_208414 || []).concat(f_208410[0] || []), NTI138);
		}
		
		}
		
		if ((spec_208339.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_208339.align;
		}
		
		var align_208460 = Tmp1;
		var res_208461 = align_string_161223(f_208410[0], spec_208339.minimumWidth, align_208460, spec_208339.fill);
		if ((ConstSet10[spec_208339.typ] != undefined)) {
		if (result_208336[result_208336_Idx] != null) { result_208336[result_208336_Idx] = (result_208336[result_208336_Idx]).concat(nsuToUpperAsciiStr(res_208461)); } else { result_208336[result_208336_Idx] = nsuToUpperAsciiStr(res_208461).slice(); };
		}
		else {
		if (result_208336[result_208336_Idx] != null) { result_208336[result_208336_Idx] = (result_208336[result_208336_Idx]).concat(res_208461); } else { result_208336[result_208336_Idx] = res_208461.slice(); };
		}
		
	} while (false);

	
}

function mean_209717(d_209719) {
		var Tmp1;

	var result_209720 = 0.0;

	BeforeRet: do {
		if ((1 < d_209719.dof)) {
		Tmp1 = 0.0;
		}
		else {
		Tmp1 = NaN;
		}
		
		result_209720 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_209720;

}

function mean_218599(d_218603) {
	var result_218604 = 0.0;

		result_218604 = ((mean_209717(d_218603.distribution) * d_218603.scale) + d_218603.location);

	return result_218604;

}

function estimate_218585(d_218589) {
	var result_218590 = 0.0;

		result_218590 = mean_218599(d_218589.distribution);

	return result_218590;

}

function standard_deviation_218679(sd_218683) {
	var result_218684 = 0.0;

		result_218684 = sd_218683.distribution.scale;

	return result_218684;

}

function betacf_206482(x_206484, a_206485, b_206486) {
	var result_206487 = 0.0;

	BeforeRet: do {
		var qab_206489 = (a_206485 + b_206486);
		var qap_206490 = (a_206485 + 1.0000000000000000e+00);
		var qam_206491 = (a_206485 - 1.0000000000000000e+00);
		var c_206492 = 1.0000000000000000e+00;
		var d_206493 = (1.0000000000000000e+00 - ((qab_206489 * x_206484) / qap_206490));
		var m2_206494 = 0.0;
		var aa_206495 = 0.0;
		var del_206496 = 0.0;
		var h_206497 = [0.0];
		if ((abs_12649(d_206493) < 1.0000000000000001e-30)) {
		d_206493 = 1.0000000000000001e-30;
		}
		
		d_206493 = (1.0000000000000000e+00 / d_206493);
		h_206497[0] = d_206493;
		L1: do {
			var m_206508 = 0;
			var res_231702 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_231702 <= 100)) break L3;
						m_206508 = res_231702;
						m2_206494 = (2.0000000000000000e+00 * to_float_10657(m_206508));
						aa_206495 = (((to_float_10657(m_206508) * (b_206486 - to_float_10657(m_206508))) * x_206484) / ((qam_206491 + m2_206494) * (a_206485 + m2_206494)));
						d_206493 = (1.0000000000000000e+00 + (aa_206495 * d_206493));
						if ((abs_12649(d_206493) < 1.0000000000000001e-30)) {
						d_206493 = 1.0000000000000001e-30;
						}
						
						c_206492 = (1.0000000000000000e+00 + (aa_206495 / c_206492));
						if ((abs_12649(c_206492) < 1.0000000000000001e-30)) {
						c_206492 = 1.0000000000000001e-30;
						}
						
						d_206493 = (1.0000000000000000e+00 / d_206493);
						HEX2AHEX3D_158841(h_206497, 0, (d_206493 * c_206492));
						aa_206495 = (((-((a_206485 + to_float_10657(m_206508))) * (qab_206489 + to_float_10657(m_206508))) * x_206484) / ((a_206485 + m2_206494) * (qap_206490 + m2_206494)));
						d_206493 = (1.0000000000000000e+00 + (aa_206495 * d_206493));
						if ((abs_12649(d_206493) < 1.0000000000000001e-30)) {
						d_206493 = 1.0000000000000001e-30;
						}
						
						c_206492 = (1.0000000000000000e+00 + (aa_206495 / c_206492));
						if ((abs_12649(c_206492) < 1.0000000000000001e-30)) {
						c_206492 = 1.0000000000000001e-30;
						}
						
						d_206493 = (1.0000000000000000e+00 / d_206493);
						del_206496 = (d_206493 * c_206492);
						HEX2AHEX3D_158841(h_206497, 0, del_206496);
						if ((abs_12649((del_206496 - 1.0000000000000000e+00)) < 2.9999999999999999e-07)) {
						break L1;
						}
						
						res_231702 += 1;
					}
			} while(false);
		} while(false);
		result_206487 = h_206497[0];
		break BeforeRet;
	} while (false);

	return result_206487;

}

function ibeta_206698(x_206700, a_206701, b_206702) {
		var Tmp1;
			var Tmp2;

	var result_206703 = 0.0;

	BeforeRet: do {
		if (((x_206700 == 0.0) || (x_206700 == 1.0000000000000000e+00))) {
		Tmp1 = 0.0;
		}
		else {
		Tmp1 = Math.exp(((((gammaln_206072((a_206701 + b_206702)) - gammaln_206072(a_206701)) - gammaln_206072(b_206702)) + (a_206701 * Math.log(x_206700))) + (b_206702 * Math.log((1.0000000000000000e+00 - x_206700)))));
		}
		
		var bt_206704 = Tmp1;
			if ((x_206700 < 0.0)) Tmp2 = true; else {				Tmp2 = (1.0000000000000000e+00 < x_206700);			}		if (Tmp2) {
		result_206703 = NaN;
		break BeforeRet;
		}
		
		if ((x_206700 < ((a_206701 + 1.0000000000000000e+00) / ((a_206701 + b_206702) + 2.0000000000000000e+00)))) {
		result_206703 = ((bt_206704 * betacf_206482(x_206700, a_206701, b_206702)) / a_206701);
		break BeforeRet;
		}
		
		result_206703 = (1.0000000000000000e+00 - ((bt_206704 * betacf_206482((1.0000000000000000e+00 - x_206700), b_206702, a_206701)) / b_206702));
		break BeforeRet;
	} while (false);

	return result_206703;

}

function ibetainv_206718(p_206720, a_206721, b_206722) {
			var Tmp1;
		var Tmp2;
							var Tmp6;

	var result_206723 = 0.0;

	BeforeRet: do {
		var a1_206725 = (a_206721 - 1.0000000000000000e+00);
		var b1_206726 = (b_206722 - 1.0000000000000000e+00);
		var lna_206727 = 0.0;
		var lnb_206728 = 0.0;
		var pp_206729 = 0.0;
		var t_206730 = 0.0;
		var u_206731 = 0.0;
		var err_206732 = 0.0;
		var x_206733 = [0.0];
		var al_206734 = 0.0;
		var h_206735 = 0.0;
		var w_206736 = 0.0;
		var afac_206737 = 0.0;
		if ((p_206720 <= 0.0)) {
		result_206723 = 0.0;
		break BeforeRet;
		}
		
		if ((1.0000000000000000e+00 <= p_206720)) {
		result_206723 = 1.0000000000000000e+01;
		break BeforeRet;
		}
		
			if (!(1.0000000000000000e+00 <= a_206721)) Tmp1 = false; else {				Tmp1 = (1.0000000000000000e+00 <= b_206722);			}		if (Tmp1) {
		if ((p_206720 < 5.0000000000000000e-01)) {
		Tmp2 = p_206720;
		}
		else {
		Tmp2 = (1.0000000000000000e+00 - p_206720);
		}
		
		pp_206729 = Tmp2;
		t_206730 = Math.sqrt((-2.0000000000000000e+00 * Math.log(pp_206729)));
		x_206733[0] = (((2.3075299999999999e+00 + (t_206730 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_206730 * (9.9229000000000001e-01 + (t_206730 * 4.4810000000000003e-02))))) - t_206730);
		if ((p_206720 < 5.0000000000000000e-01)) {
		x_206733[0] = -(x_206733[0]);
		}
		
		al_206734 = (((x_206733[0] * x_206733[0]) - 3.0000000000000000e+00) / 6.0000000000000000e+00);
		h_206735 = (2.0000000000000000e+00 / ((1.0000000000000000e+00 / ((2.0000000000000000e+00 * a_206721) - 1.0000000000000000e+00)) + (1.0000000000000000e+00 / ((2.0000000000000000e+00 * b_206722) - 1.0000000000000000e+00))));
		w_206736 = (((x_206733[0] * Math.sqrt((al_206734 + h_206735))) / h_206735) - (((1.0000000000000000e+00 / ((2.0000000000000000e+00 * b_206722) - 1.0000000000000000e+00)) - (1.0000000000000000e+00 / ((2.0000000000000000e+00 * a_206721) - 1.0000000000000000e+00))) * ((al_206734 + 8.3333333333333337e-01) - (2.0000000000000000e+00 / (3.0000000000000000e+00 * h_206735)))));
		x_206733[0] = (a_206721 / (a_206721 + (b_206722 * Math.exp((2.0000000000000000e+00 * w_206736)))));
		}
		else {
			lna_206727 = Math.log((a_206721 / (a_206721 + b_206722)));
			lnb_206728 = Math.log((b_206722 / (a_206721 + b_206722)));
			t_206730 = (Math.exp((a_206721 * lna_206727)) / a_206721);
			u_206731 = (Math.exp((b_206722 * lnb_206728)) / b_206722);
			w_206736 = (t_206730 + u_206731);
			if ((p_206720 < (t_206730 / w_206736))) {
			x_206733[0] = Math.pow(((a_206721 * w_206736) * p_206720), (1.0000000000000000e+00 / a_206721));
			}
			else {
				x_206733[0] = (1.0000000000000000e+00 - Math.pow(((b_206722 * w_206736) * (1.0000000000000000e+00 - p_206720)), (1.0000000000000000e+00 / b_206722)));
			}
			
		}
		
		afac_206737 = ((-(gammaln_206072(a_206721)) - gammaln_206072(b_206722)) + gammaln_206072((a_206721 + b_206722)));
		L3: do {
			var j_206751 = 0;
			var res_231696 = 0;
			L4: do {
					L5: while (true) {
					if (!(res_231696 <= 9)) break L5;
						j_206751 = res_231696;
						if (((x_206733[0] == 0.0) || (x_206733[0] == 1.0000000000000000e+00))) {
						result_206723 = x_206733[0];
						break BeforeRet;
						}
						
						err_206732 = (ibeta_206698(x_206733[0], a_206721, b_206722) - p_206720);
						t_206730 = Math.exp((((a1_206725 * Math.log(x_206733[0])) + (b1_206726 * Math.log((1.0000000000000000e+00 - x_206733[0])))) + afac_206737));
						u_206731 = (err_206732 / t_206730);
						t_206730 = (u_206731 / (1.0000000000000000e+00 - (5.0000000000000000e-01 * min_12701(1.0000000000000000e+00, (u_206731 * ((a1_206725 / x_206733[0]) - (b1_206726 / (1.0000000000000000e+00 - x_206733[0]))))))));
						HEX2DHEX3D_183522(x_206733, 0, t_206730);
						if ((x_206733[0] <= 0.0)) {
						x_206733[0] = (5.0000000000000000e-01 * (x_206733[0] + t_206730));
						}
						
						if ((1.0000000000000000e+00 <= x_206733[0])) {
						x_206733[0] = (5.0000000000000000e-01 * ((x_206733[0] + t_206730) + 1.0000000000000000e+00));
						}
						
							if (!(abs_12649(t_206730) < (1.0000000000000000e-08 * x_206733[0]))) Tmp6 = false; else {								Tmp6 = (0 < j_206751);							}						if (Tmp6) {
						break L3;
						}
						
						res_231696 += 1;
					}
			} while(false);
		} while(false);
		result_206723 = x_206733[0];
		break BeforeRet;
	} while (false);

	return result_206723;

}

function inv_209698(d_209700, p_209701) {
		var Tmp1;

	var result_209702 = 0.0;

	BeforeRet: do {
		var x_209703 = ibetainv_206718((2.0000000000000000e+00 * min_12701(p_209701, (1.0000000000000000e+00 - p_209701))), (5.0000000000000000e-01 * to_float_10657(d_209700.dof)), 5.0000000000000000e-01);
		x_209703 = Math.sqrt(((to_float_10657(d_209700.dof) * (1.0000000000000000e+00 - x_209703)) / x_209703));
		if ((5.0000000000000000e-01 < p_209701)) {
		Tmp1 = x_209703;
		}
		else {
		Tmp1 = -(x_209703);
		}
		
		result_209702 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_209702;

}

function inv_218755(d_218759, p_218760) {
	var result_218761 = 0.0;

		result_218761 = ((inv_209698(d_218759.distribution, p_218760) * d_218759.scale) + d_218759.location);

	return result_218761;

}

function confidence_interval_218739(sd_218743, alpha_218744) {
	var result_218745 = null;

		result_218745 = nimCopy(null, [inv_218755(sd_218743.distribution, (5.0000000000000000e-01 * alpha_218744)), inv_218755(sd_218743.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_218744)))], NTI215481);

	return result_218745;

}

function test_score_218894(d_218898) {
	var result_218899 = 0.0;

		result_218899 = (d_218898.distribution.location / d_218898.distribution.scale);

	return result_218899;

}

function cdf_209679(d_209681, x_209682) {
	var result_209683 = 0.0;

	BeforeRet: do {
		var dof2_209684 = (to_float_10657(d_209681.dof) * 5.0000000000000000e-01);
		result_209683 = ibeta_206698(((x_209682 + Math.sqrt(((x_209682 * x_209682) + to_float_10657(d_209681.dof)))) / (2.0000000000000000e+00 * Math.sqrt(((x_209682 * x_209682) + to_float_10657(d_209681.dof))))), dof2_209684, dof2_209684);
		break BeforeRet;
	} while (false);

	return result_209683;

}

function cdf_219018(d_219022, x_219023) {
	var result_219024 = 0.0;

		result_219024 = cdf_209679(d_219022.distribution, ((x_219023 - d_219022.location) / d_219022.scale));

	return result_219024;

}

function p_value_218998(sd_219002) {
		var Tmp1;
			var Tmp2;

	var result_219003 = 0.0;

	BeforeRet: do {
		if ((sd_219002.test_type == 0)) {
		result_219003 = ((1.0000000000000000e+00 - cdf_219018(sd_219002.distribution, abs_12649(sd_219002.test_score))) + cdf_219018(sd_219002.distribution, -(abs_12649(sd_219002.test_score))));
		break BeforeRet;
		}
		
		if ((sd_219002.test_type == 3)) {
		result_219003 = cdf_219018(sd_219002.distribution, sd_219002.test_score);
		break BeforeRet;
		}
		
		if ((sd_219002.test_type == 2)) {
		result_219003 = (1.0000000000000000e+00 - cdf_219018(sd_219002.distribution, sd_219002.test_score));
		break BeforeRet;
		}
		
		var p1_219109 = (1.0000000000000000e+00 - cdf_219018(sd_219002.distribution, sd_219002.test_score));
		var p2_219124 = cdf_219018(sd_219002.distribution, sd_219002.test_score);
			if (!(p1_219109 < p2_219124)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_219109);			}		if (Tmp2) {
		Tmp1 = p1_219109;
		}
		else {
		Tmp1 = p2_219124;
		}
		
		result_219003 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_219003;

}

function p_value_218956(d_218960) {
	var result_218961 = 0.0;

		result_218961 = p_value_218998(d_218960.hypothesis_test);

	return result_218961;

}

function estimate_as_string_218538(estimator_218542, title_218543, name_218544) {
		var Tmp1;
		var Tmp2;

	var result_218545 = null;

		if (title_218543) {
		var fmt_res_218546 = mnewString(0);
		if (fmt_res_218546 != null) { fmt_res_218546 = (fmt_res_218546).concat(makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A")); } else { fmt_res_218546 = makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A"); };
		if (result_218545 != null) { result_218545 = (result_218545).concat((nsuRepeatStr(makeNimstrLit(" "), ((name_218544 != null ? name_218544.length : 0) + 1)) || []).concat(fmt_res_218546 || [])); } else { result_218545 = (nsuRepeatStr(makeNimstrLit(" "), ((name_218544 != null ? name_218544.length : 0) + 1)) || []).concat(fmt_res_218546 || []).slice(); };
		}
		
		var fmt_res_218548 = [mnewString(0)];
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit(" ")); } else { fmt_res_218548[0] = makeNimstrLit(" "); };
		format_value_161688(fmt_res_218548, 0, name_218544, []);
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit("|")); } else { fmt_res_218548[0] = makeNimstrLit("|"); };
		format_value_208333(fmt_res_218548, 0, estimate_218585(estimator_218542), makeNimstrLit(">9.5f"));
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit("| ")); } else { fmt_res_218548[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_218548, 0, standard_deviation_218679(estimator_218542), makeNimstrLit(">9.5f"));
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit("| ")); } else { fmt_res_218548[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_218548, 0, (Tmp1 = confidence_interval_218739(estimator_218542, 5.0000000000000003e-02), Tmp1)[0], makeNimstrLit(">9.5f"));
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit(" ")); } else { fmt_res_218548[0] = makeNimstrLit(" "); };
		format_value_208333(fmt_res_218548, 0, (Tmp2 = confidence_interval_218739(estimator_218542, 5.0000000000000003e-02), Tmp2)[1], makeNimstrLit(">9.5f"));
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit("| ")); } else { fmt_res_218548[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_218548, 0, test_score_218894(estimator_218542), makeNimstrLit(">9.5f"));
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit("| ")); } else { fmt_res_218548[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_218548, 0, p_value_218956(estimator_218542), makeNimstrLit(">9.5e"));
		if (fmt_res_218548[0] != null) { fmt_res_218548[0] = (fmt_res_218548[0]).concat(makeNimstrLit("|")); } else { fmt_res_218548[0] = makeNimstrLit("|"); };
		if (result_218545 != null) { result_218545 = (result_218545).concat(fmt_res_218548[0]); } else { result_218545 = fmt_res_218548[0].slice(); };

	return result_218545;

}

function standard_deviation_219365(sd_219369) {
	var result_219370 = 0.0;

		result_219370 = sd_219369.distribution.scale;

	return result_219370;

}

function inv_210515(d_210517, p_210518) {
	var result_210519 = 0.0;

	BeforeRet: do {
		result_210519 = (d_210517.scale / gammapinv_206536((1.0000000000000000e+00 - p_210518), d_210517.shape));
		break BeforeRet;
	} while (false);

	return result_210519;

}

function inv_210848(d_210850, p_210851) {
	var result_210852 = 0.0;

		result_210852 = inv_210515(as_inv_gamma_210780(d_210850), p_210851);

	return result_210852;

}

function inv_219441(d_219445, p_219446) {
	var result_219447 = 0.0;

		result_219447 = ((inv_210848(d_219445.distribution, p_219446) * d_219445.scale) + d_219445.location);

	return result_219447;

}

function confidence_interval_219425(sd_219429, alpha_219430) {
	var result_219431 = null;

		result_219431 = nimCopy(null, [inv_219441(sd_219429.distribution, (5.0000000000000000e-01 * alpha_219430)), inv_219441(sd_219429.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_219430)))], NTI215481);

	return result_219431;

}

function test_score_219580(d_219584) {
	var result_219585 = 0.0;

		result_219585 = (d_219584.distribution.location / d_219584.distribution.scale);

	return result_219585;

}

function cdf_210496(d_210498, x_210499) {
	var result_210500 = 0.0;

	BeforeRet: do {
		if ((x_210499 < 0.0)) {
		result_210500 = 0.0;
		break BeforeRet;
		}
		
		result_210500 = (1.0000000000000000e+00 - low_reg_gamma_206242(d_210498.shape, (d_210498.scale / x_210499)));
		break BeforeRet;
	} while (false);

	return result_210500;

}

function cdf_210830(d_210832, x_210833) {
	var result_210834 = 0.0;

		result_210834 = cdf_210496(as_inv_gamma_210780(d_210832), x_210833);

	return result_210834;

}

function cdf_219704(d_219708, x_219709) {
	var result_219710 = 0.0;

		result_219710 = cdf_210830(d_219708.distribution, ((x_219709 - d_219708.location) / d_219708.scale));

	return result_219710;

}

function p_value_219684(sd_219688) {
		var Tmp1;
			var Tmp2;

	var result_219689 = 0.0;

	BeforeRet: do {
		if ((sd_219688.test_type == 0)) {
		result_219689 = ((1.0000000000000000e+00 - cdf_219704(sd_219688.distribution, abs_12649(sd_219688.test_score))) + cdf_219704(sd_219688.distribution, -(abs_12649(sd_219688.test_score))));
		break BeforeRet;
		}
		
		if ((sd_219688.test_type == 3)) {
		result_219689 = cdf_219704(sd_219688.distribution, sd_219688.test_score);
		break BeforeRet;
		}
		
		if ((sd_219688.test_type == 2)) {
		result_219689 = (1.0000000000000000e+00 - cdf_219704(sd_219688.distribution, sd_219688.test_score));
		break BeforeRet;
		}
		
		var p1_219795 = (1.0000000000000000e+00 - cdf_219704(sd_219688.distribution, sd_219688.test_score));
		var p2_219810 = cdf_219704(sd_219688.distribution, sd_219688.test_score);
			if (!(p1_219795 < p2_219810)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_219795);			}		if (Tmp2) {
		Tmp1 = p1_219795;
		}
		else {
		Tmp1 = p2_219810;
		}
		
		result_219689 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_219689;

}

function p_value_219642(d_219646) {
	var result_219647 = 0.0;

		result_219647 = p_value_219684(d_219646.hypothesis_test);

	return result_219647;

}

function estimate_as_string_223466(estimator_223470, title_223471, name_223472) {
		var Tmp1;
		var Tmp2;

	var result_223473 = null;

		if (title_223471) {
		var fmt_res_223474 = mnewString(0);
		if (fmt_res_223474 != null) { fmt_res_223474 = (fmt_res_223474).concat(makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A")); } else { fmt_res_223474 = makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A"); };
		if (result_223473 != null) { result_223473 = (result_223473).concat((nsuRepeatStr(makeNimstrLit(" "), ((name_223472 != null ? name_223472.length : 0) + 1)) || []).concat(fmt_res_223474 || [])); } else { result_223473 = (nsuRepeatStr(makeNimstrLit(" "), ((name_223472 != null ? name_223472.length : 0) + 1)) || []).concat(fmt_res_223474 || []).slice(); };
		}
		
		var fmt_res_223476 = [mnewString(0)];
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit(" ")); } else { fmt_res_223476[0] = makeNimstrLit(" "); };
		format_value_161688(fmt_res_223476, 0, name_223472, []);
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit("|")); } else { fmt_res_223476[0] = makeNimstrLit("|"); };
		format_value_208333(fmt_res_223476, 0, estimate_219271(estimator_223470), makeNimstrLit(">9.5f"));
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit("| ")); } else { fmt_res_223476[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_223476, 0, standard_deviation_219365(estimator_223470), makeNimstrLit(">9.5f"));
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit("| ")); } else { fmt_res_223476[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_223476, 0, (Tmp1 = confidence_interval_219425(estimator_223470, 5.0000000000000003e-02), Tmp1)[0], makeNimstrLit(">9.5f"));
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit(" ")); } else { fmt_res_223476[0] = makeNimstrLit(" "); };
		format_value_208333(fmt_res_223476, 0, (Tmp2 = confidence_interval_219425(estimator_223470, 5.0000000000000003e-02), Tmp2)[1], makeNimstrLit(">9.5f"));
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit("| ")); } else { fmt_res_223476[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_223476, 0, test_score_219580(estimator_223470), makeNimstrLit(">9.5f"));
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit("| ")); } else { fmt_res_223476[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_223476, 0, p_value_219642(estimator_223470), makeNimstrLit(">9.5e"));
		if (fmt_res_223476[0] != null) { fmt_res_223476[0] = (fmt_res_223476[0]).concat(makeNimstrLit("|")); } else { fmt_res_223476[0] = makeNimstrLit("|"); };
		if (result_223473 != null) { result_223473 = (result_223473).concat(fmt_res_223476[0]); } else { result_223473 = fmt_res_223476[0].slice(); };

	return result_223473;

}

function nsuFindChar(s_156016, sub_156017, start_156018, last_156019) {
		var Tmp1;

	var result_156021 = 0;

	BeforeRet: do {
		if ((last_156019 == 0)) {
		Tmp1 = (s_156016 != null ? (s_156016.length-1) : -1);
		}
		else {
		Tmp1 = last_156019;
		}
		
		var last_156023 = Tmp1;
		L2: do {
			var i_156406 = 0;
			var colontmp__231720 = 0;
			colontmp__231720 = start_156018;
			var res_231721 = colontmp__231720;
			L3: do {
					L4: while (true) {
					if (!(res_231721 <= last_156023)) break L4;
						i_156406 = res_231721;
						if ((sub_156017 == s_156016[i_156406])) {
						result_156021 = i_156406;
						break BeforeRet;
						}
						
						res_231721 += 1;
					}
			} while(false);
		} while(false);
		result_156021 = -1;
		break BeforeRet;
	} while (false);

	return result_156021;

}

function substr_30422(s_30424, first_30425, last_30426) {
	var result_30427 = null;

		var first_30428 = nimMax(first_30425, 0);
		var l_30430 = nimMax(((nimMin(last_30426, (s_30424 != null ? (s_30424.length-1) : -1)) - first_30428) + 1), 0);
		result_30427 = nimCopy(null, mnewString(l_30430), NTI138);
		L1: do {
			var i_30439 = 0;
			var colontmp__231727 = 0;
			colontmp__231727 = (l_30430 - 1);
			var res_231728 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231728 <= colontmp__231727)) break L3;
						i_30439 = res_231728;
						result_30427[i_30439] = s_30424[(i_30439 + first_30428)];
						res_231728 += 1;
					}
			} while(false);
		} while(false);

	return result_30427;

}

function substr_30453(s_30455, first_30456) {
	var result_30458 = null;

		result_30458 = nimCopy(null, substr_30422(s_30455, first_30456, (s_30455 != null ? (s_30455.length-1) : -1)), NTI138);

	return result_30458;

}

function nsuInitSkipTable(a_155749, sub_155750) {
		var m_155751 = (sub_155750 != null ? sub_155750.length : 0);
		var i_155753 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_155753 <= 248)) break L2;
					a_155749[(i_155753 + 0)] = m_155751;
					a_155749[(i_155753 + 1)] = m_155751;
					a_155749[(i_155753 + 2)] = m_155751;
					a_155749[(i_155753 + 3)] = m_155751;
					a_155749[(i_155753 + 4)] = m_155751;
					a_155749[(i_155753 + 5)] = m_155751;
					a_155749[(i_155753 + 6)] = m_155751;
					a_155749[(i_155753 + 7)] = m_155751;
					i_155753 += 8;
				}
		} while(false);
		L3: do {
			var i_155770 = 0;
			var colontmp__231735 = 0;
			colontmp__231735 = (m_155751 - 1);
			var i_231736 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_231736 < colontmp__231735)) break L5;
						i_155770 = i_231736;
						a_155749[sub_155750[i_155770]] = ((m_155751 - 1) - i_155770);
						i_231736 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_155786, s_155787, sub_155788, start_155789, last_155790) {
		var Tmp1;

	var result_155792 = 0;

	BeforeRet: do {
		if ((last_155790 == 0)) {
		Tmp1 = (s_155787 != null ? (s_155787.length-1) : -1);
		}
		else {
		Tmp1 = last_155790;
		}
		
		var last_155794 = Tmp1;
		var sub_last_155795 = ((sub_155788 != null ? sub_155788.length : 0) - 1);
		if ((sub_last_155795 == -1)) {
		result_155792 = start_155789;
		break BeforeRet;
		}
		
		var skip_155797 = start_155789;
		L2: do {
				L3: while (true) {
				if (!(sub_last_155795 <= (last_155794 - skip_155797))) break L3;
					var i_155798 = sub_last_155795;
					L4: do {
							L5: while (true) {
							if (!(s_155787[(skip_155797 + i_155798)] == sub_155788[i_155798])) break L5;
								if ((i_155798 == 0)) {
								result_155792 = skip_155797;
								break BeforeRet;
								}
								
								i_155798 -= 1;
							}
					} while(false);
					skip_155797 += a_155786[s_155787[(skip_155797 + sub_last_155795)]];
				}
		} while(false);
		result_155792 = -1;
		break BeforeRet;
	} while (false);

	return result_155792;

}

function nsuReplaceStr(s_157318, sub_157319, by_157320) {
	var result_157321 = null;

		result_157321 = nimCopy(null, [], NTI138);
		var sub_len_157322 = (sub_157319 != null ? sub_157319.length : 0);
		if ((sub_len_157322 == 0)) {
		result_157321 = nimCopy(null, s_157318, NTI138);
		}
		else {
		if ((sub_len_157322 == 1)) {
		var c_157323 = sub_157319[0];
		var last_157325 = (s_157318 != null ? (s_157318.length-1) : -1);
		var i_157327 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var j_157328 = nsuFindChar(s_157318, c_157323, i_157327, last_157325);
					if ((j_157328 < 0)) {
					break L1;
					}
					
					if (result_157321 != null) { result_157321 = (result_157321).concat(substr_30422(s_157318, i_157327, (j_157328 - 1))); } else { result_157321 = substr_30422(s_157318, i_157327, (j_157328 - 1)).slice(); };
					if (result_157321 != null) { result_157321 = (result_157321).concat(by_157320); } else { result_157321 = by_157320.slice(); };
					i_157327 = (j_157328 + sub_len_157322);
				}
		} while(false);
		if (result_157321 != null) { result_157321 = (result_157321).concat(substr_30453(s_157318, i_157327)); } else { result_157321 = substr_30453(s_157318, i_157327).slice(); };
		}
		else {
			var a_157329 = [new Int32Array(256)];
			nsuInitSkipTable(a_157329[0], sub_157319);
			var last_157332 = (s_157318 != null ? (s_157318.length-1) : -1);
			var i_157334 = 0;
			L3: do {
					L4: while (true) {
					if (!true) break L4;
						var j_157335 = nsuFindStrA(a_157329[0], s_157318, sub_157319, i_157334, last_157332);
						if ((j_157335 < 0)) {
						break L3;
						}
						
						if (result_157321 != null) { result_157321 = (result_157321).concat(substr_30422(s_157318, i_157334, (j_157335 - 1))); } else { result_157321 = substr_30422(s_157318, i_157334, (j_157335 - 1)).slice(); };
						if (result_157321 != null) { result_157321 = (result_157321).concat(by_157320); } else { result_157321 = by_157320.slice(); };
						i_157334 = (j_157335 + sub_len_157322);
					}
			} while(false);
			if (result_157321 != null) { result_157321 = (result_157321).concat(substr_30453(s_157318, i_157334)); } else { result_157321 = substr_30453(s_157318, i_157334).slice(); };
		}
		}

	return result_157321;

}

function format_value_223864(result_223867, result_223867_Idx, value_223868, specifier_223869) {
		format_value_161688(result_223867, result_223867_Idx, HEX24_210187(value_223868), specifier_223869);

	
}

function HEX24_223857(d_223860) {
		var Tmp1;
		var Tmp2;

	var result_223861 = null;

		var fmt_res_223862 = [mnewString(0)];
		if (fmt_res_223862[0] != null) { fmt_res_223862[0] = (fmt_res_223862[0]).concat(makeNimstrLit("[Hypothesis test]\x0A* Null distribution: ")); } else { fmt_res_223862[0] = makeNimstrLit("[Hypothesis test]\x0A* Null distribution: "); };
		format_value_223864(fmt_res_223862, 0, d_223860.distribution, []);
		if (fmt_res_223862[0] != null) { fmt_res_223862[0] = (fmt_res_223862[0]).concat(makeNimstrLit(" \x0A")); } else { fmt_res_223862[0] = makeNimstrLit(" \x0A"); };
		if (result_223861 != null) { result_223861 = (result_223861).concat(fmt_res_223862[0]); } else { result_223861 = fmt_res_223862[0].slice(); };
		var fmt_res_223884 = mnewString(0);
		if (fmt_res_223884 != null) { fmt_res_223884 = (fmt_res_223884).concat(makeNimstrLit("      Null C.I. 95%| Test value|    p-value| \x0A")); } else { fmt_res_223884 = makeNimstrLit("      Null C.I. 95%| Test value|    p-value| \x0A"); };
		if (result_223861 != null) { result_223861 = (result_223861).concat(fmt_res_223884); } else { result_223861 = fmt_res_223884.slice(); };
		var fmt_res_223885 = [mnewString(0)];
		format_value_208333(fmt_res_223885, 0, (Tmp1 = null_confidence_interval_223895(d_223860, 5.0000000000000003e-02), Tmp1)[0], makeNimstrLit(">9.5f"));
		if (fmt_res_223885[0] != null) { fmt_res_223885[0] = (fmt_res_223885[0]).concat(makeNimstrLit(" ")); } else { fmt_res_223885[0] = makeNimstrLit(" "); };
		format_value_208333(fmt_res_223885, 0, (Tmp2 = null_confidence_interval_223895(d_223860, 5.0000000000000003e-02), Tmp2)[1], makeNimstrLit(">9.5f"));
		if (fmt_res_223885[0] != null) { fmt_res_223885[0] = (fmt_res_223885[0]).concat(makeNimstrLit("|  ")); } else { fmt_res_223885[0] = makeNimstrLit("|  "); };
		format_value_208333(fmt_res_223885, 0, d_223860.test_score, makeNimstrLit(">9.5f"));
		if (fmt_res_223885[0] != null) { fmt_res_223885[0] = (fmt_res_223885[0]).concat(makeNimstrLit("| ")); } else { fmt_res_223885[0] = makeNimstrLit("| "); };
		format_value_208333(fmt_res_223885, 0, p_value_224032(d_223860), makeNimstrLit(">9.5e"));
		if (fmt_res_223885[0] != null) { fmt_res_223885[0] = (fmt_res_223885[0]).concat(makeNimstrLit("|")); } else { fmt_res_223885[0] = makeNimstrLit("|"); };
		if (result_223861 != null) { result_223861 = (result_223861).concat(fmt_res_223885[0]); } else { result_223861 = fmt_res_223885[0].slice(); };

	return result_223861;

}

function HEX24_223224(model_223226) {
						var Tmp4;

	var result_223227 = null;

		result_223227 = nimCopy(null, makeNimstrLit("[Robust Interrupted Time Series Model]\x0A"), NTI138);
		if (result_223227 != null) { result_223227 = (result_223227).concat(makeNimstrLit("* Coefficients:\x0A")); } else { result_223227 = makeNimstrLit("* Coefficients:\x0A"); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_218538(model_223226.model.before_model.coefficients[0], true, makeNimstrLit("       slope (pre)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_218538(model_223226.model.before_model.coefficients[0], true, makeNimstrLit("       slope (pre)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_218538(model_223226.model.before_model.coefficients[1], false, makeNimstrLit("   intercept (pre)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_218538(model_223226.model.before_model.coefficients[1], false, makeNimstrLit("   intercept (pre)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_218538(model_223226.model.before_residual_model.coefficients[0], false, makeNimstrLit("    autocorr (pre)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_218538(model_223226.model.before_residual_model.coefficients[0], false, makeNimstrLit("    autocorr (pre)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_218538(model_223226.model.after_model.coefficients[0], false, makeNimstrLit("      slope (post)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_218538(model_223226.model.after_model.coefficients[0], false, makeNimstrLit("      slope (post)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_218538(model_223226.model.after_model.coefficients[1], false, makeNimstrLit("  intercept (post)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_218538(model_223226.model.after_model.coefficients[1], false, makeNimstrLit("  intercept (post)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_218538(model_223226.model.after_residual_model.coefficients[0], false, makeNimstrLit("   autocorr (post)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_218538(model_223226.model.after_residual_model.coefficients[0], false, makeNimstrLit("   autocorr (post)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat(makeNimstrLit("* Noise estimates:\x0A")); } else { result_223227 = makeNimstrLit("* Noise estimates:\x0A"); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_223466(model_223226.model.before_residual_model.noise_variance, false, makeNimstrLit("    variance (pre)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_223466(model_223226.model.before_residual_model.noise_variance, false, makeNimstrLit("    variance (pre)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat((estimate_as_string_223466(model_223226.model.after_residual_model.noise_variance, false, makeNimstrLit("   variance (post)")) || []).concat(makeNimstrLit("\x0A") || [])); } else { result_223227 = (estimate_as_string_223466(model_223226.model.after_residual_model.noise_variance, false, makeNimstrLit("   variance (post)")) || []).concat(makeNimstrLit("\x0A") || []).slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat(makeNimstrLit("* Log-likelihood evaluations:\x0A")); } else { result_223227 = makeNimstrLit("* Log-likelihood evaluations:\x0A"); };
		if (result_223227 != null) { result_223227 = (result_223227).concat(makeNimstrLit(" Change-point| Log-likelihood\x0A")); } else { result_223227 = makeNimstrLit(" Change-point| Log-likelihood\x0A"); };
		L1: do {
			var k_223824 = 0;
			var colontmp__231641 = 0;
			colontmp__231641 = (model_223226.change_point_candidates != null ? (model_223226.change_point_candidates.length-1) : -1);
			var res_231642 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231642 <= colontmp__231641)) break L3;
						k_223824 = res_231642;
						var fmt_res_223825 = [mnewString(0)];
						if (fmt_res_223825[0] != null) { fmt_res_223825[0] = (fmt_res_223825[0]).concat(makeNimstrLit("       ")); } else { fmt_res_223825[0] = makeNimstrLit("       "); };
						format_value_208902(fmt_res_223825, 0, model_223226.change_point_candidates[k_223824], makeNimstrLit(">5"));
						if (fmt_res_223825[0] != null) { fmt_res_223825[0] = (fmt_res_223825[0]).concat(makeNimstrLit(" | ")); } else { fmt_res_223825[0] = makeNimstrLit(" | "); };
						format_value_208333(fmt_res_223825, 0, model_223226.loglikelihood_candidates[k_223824], makeNimstrLit(".3f"));
						if (fmt_res_223825[0] != null) { fmt_res_223825[0] = (fmt_res_223825[0]).concat(makeNimstrLit(" ")); } else { fmt_res_223825[0] = makeNimstrLit(" "); };
						if ((model_223226.change_point_candidates[k_223824] == model_223226.change_point_index)) {
						Tmp4 = makeNimstrLit("***\x0A");
						}
						else {
						Tmp4 = makeNimstrLit("\x0A");
						}
						
						if (result_223227 != null) { result_223227 = (result_223227).concat((fmt_res_223825[0] || []).concat(Tmp4 || [])); } else { result_223227 = (fmt_res_223825[0] || []).concat(Tmp4 || []).slice(); };
						res_231642 += 1;
					}
			} while(false);
		} while(false);
		if (result_223227 != null) { result_223227 = (result_223227).concat(makeNimstrLit("* Wald test:\x0A")); } else { result_223227 = makeNimstrLit("* Wald test:\x0A"); };
		var fmt_res_223841 = [mnewString(0)];
		if (fmt_res_223841[0] != null) { fmt_res_223841[0] = (fmt_res_223841[0]).concat(makeNimstrLit("  H0: There is not change point at ")); } else { fmt_res_223841[0] = makeNimstrLit("  H0: There is not change point at "); };
		format_value_208333(fmt_res_223841, 0, model_223226.change_point_x, []);
		if (fmt_res_223841[0] != null) { fmt_res_223841[0] = (fmt_res_223841[0]).concat(makeNimstrLit(":\x0A")); } else { fmt_res_223841[0] = makeNimstrLit(":\x0A"); };
		if (result_223227 != null) { result_223227 = (result_223227).concat(fmt_res_223841[0]); } else { result_223227 = fmt_res_223841[0].slice(); };
		if (result_223227 != null) { result_223227 = (result_223227).concat(makeNimstrLit("  H1: At least one of the after C.P. parameters is not 0:\x0A  ")); } else { result_223227 = makeNimstrLit("  H1: At least one of the after C.P. parameters is not 0:\x0A  "); };
		if (result_223227 != null) { result_223227 = (result_223227).concat(nsuReplaceStr(HEX24_223857(model_223226.model.existence_change_point_hypothesis), makeNimstrLit("\x0A"), makeNimstrLit("\x0A  "))); } else { result_223227 = nsuReplaceStr(HEX24_223857(model_223226.model.existence_change_point_hypothesis), makeNimstrLit("\x0A"), makeNimstrLit("\x0A  ")).slice(); };

	return result_223227;

}

function new_ritsperiod_229188() {
	var result_229190 = null;

		result_229190 = {slope: null, intercept: null, level: null, autocorrelation: null, noise: null, residuals: null};
		result_229190.slope = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_229190.intercept = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_229190.level = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_229190.autocorrelation = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_229190.noise = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_229190.residuals = {values: null, autocorrelation: null, autocorrelation_null_confidence_interval: null};

	return result_229190;

}

function clean_nan_229340(v_229342, d_229343) {
							var Tmp5;

	var result_229344 = null;

		L1: do {
			var iHEX60gensym229347_229608 = 0;
			var resultHEX60gensym229348_229620 = new_seq_207262((v_229342 != null ? v_229342.length : 0));
			L2: do {
				var it_229627 = 0.0;
				var i_231743 = 0;
				var l_231744 = (v_229342 != null ? v_229342.length : 0);
				L3: do {
						L4: while (true) {
						if (!(i_231743 < l_231744)) break L4;
							it_229627 = v_229342[i_231743];
							if ((classify_54030(it_229627) == 4)) {
							Tmp5 = d_229343;
							}
							else {
							Tmp5 = it_229627;
							}
							
							resultHEX60gensym229348_229620[iHEX60gensym229347_229608] = Tmp5;
							iHEX60gensym229347_229608 += 1;
							i_231743 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_229344 = nimCopy(null, resultHEX60gensym229348_229620, NTI207266);

	return result_229344;

}

function sum_169414(a_169416) {
	var result_169417 = [0.0];

		L1: do {
			var k_169435 = 0;
			var colontmp__231754 = 0;
			colontmp__231754 = (a_169416 != null ? (a_169416.length-1) : -1);
			var res_231755 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231755 <= colontmp__231754)) break L3;
						k_169435 = res_231755;
						HEX2BHEX3D_60121(result_169417, 0, a_169416[k_169435]);
						res_231755 += 1;
					}
			} while(false);
		} while(false);

	return result_169417[0];

}

function multiply_165614(a_165616, b_165617) {
	var result_165618 = null;

		L1: do {
			var k_165818 = 0;
			var colontmp__231761 = 0;
			colontmp__231761 = (a_165616 != null ? (a_165616.length-1) : -1);
			var res_231762 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231762 <= colontmp__231761)) break L3;
						k_165818 = res_231762;
						if (result_165618 != null) { result_165618.push((a_165616[k_165818] * b_165617[k_165818])); } else { result_165618 = [(a_165616[k_165818] * b_165617[k_165818])]; };
						res_231762 += 1;
					}
			} while(false);
		} while(false);

	return result_165618;

}

function HEX2A_165900(a_165902, b_165903) {
	var result_165904 = null;

		result_165904 = nimCopy(null, multiply_165614(a_165902, b_165903), NTI164064);

	return result_165904;

}

function scaled_shifted_216517(distribution_216520, location_216521, scale_216522) {
	var result_216524 = null;

		result_216524 = {distribution: null, location: 0.0, scale: 0.0};
		result_216524.distribution = distribution_216520;
		result_216524.location = location_216521;
		result_216524.scale = scale_216522;

	return result_216524;

}

function htest_score_216590(distribution_216593, score_216594, test_type_216595) {
	var result_216597 = null;

		result_216597 = {distribution: null, test_score: 0.0, test_type: 0};
		result_216597.distribution = distribution_216593;
		result_216597.test_score = score_216594;
		result_216597.test_type = test_type_216595;

	return result_216597;

}

function shifted_estimator_216509(distribution_216512, location_216513, scale_216514) {
	var result_216516 = null;

		var est_distribution_216574 = scaled_shifted_216517(distribution_216512, location_216513, scale_216514);
		var est_null_distribution_216582 = scaled_shifted_216517(distribution_216512, 0.0, scale_216514);
		result_216516 = {distribution: null, hypothesis_test: null};
		result_216516.distribution = est_distribution_216574;
		result_216516.hypothesis_test = htest_score_216590(est_null_distribution_216582, location_216513, 0);

	return result_216516;

}

function autocorrelation_function_216032(x_216034, max_lags_216035) {
	var result_216036 = null;

		result_216036 = {estimators: null, null_distribution: null, estimators_mean: null, lags: null};
		var x_mean_216044 = mean_171214(x_216034, 0);
		var n_216051 = (x_216034 != null ? (x_216034.length-1) : -1);
		L1: do {
			var k_216060 = 0;
			var colontmp__231747 = 0;
			colontmp__231747 = nimMin(max_lags_216035, n_216051);
			var res_231748 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231748 <= colontmp__231747)) break L3;
						k_216060 = res_231748;
						var acf_216463 = (sum_169414(HEX2A_165900(HEX2D_165293(HEX5BHEX5D_216081(x_216034, HEX2EHEX2E_74220(0, (n_216051 - k_216060))), x_mean_216044), HEX2D_165293(HEX5BHEX5D_216081(x_216034, HEX2EHEX2E_74220(k_216060, n_216051)), x_mean_216044))) / sum_169414(HEX2EHEX5E_169918(HEX2D_165293(x_216034, mean_171214(x_216034, 0)), 2.0000000000000000e+00)));
						if (result_216036.lags != null) { result_216036.lags.push(to_float_10657(k_216060)); } else { result_216036.lags = [to_float_10657(k_216060)]; };
						if (result_216036.estimators_mean != null) { result_216036.estimators_mean.push(acf_216463); } else { result_216036.estimators_mean = [acf_216463]; };
						if (result_216036.estimators != null) { result_216036.estimators.push(shifted_estimator_216509(normal_209863(0.0, 1.0000000000000000e+00), acf_216463, Math.sqrt((1.0000000000000000e+00 + ((1.0000000000000000e+00 + (2.0000000000000000e+00 * sum_169414(HEX2EHEX5E_169918(HEX5BHEX5D_216081(x_216034, HEX2EHEX2E_74220(0, k_216060)), 2.0000000000000000e+00)))) / to_float_10657(n_216051)))))); } else { result_216036.estimators = [shifted_estimator_216509(normal_209863(0.0, 1.0000000000000000e+00), acf_216463, Math.sqrt((1.0000000000000000e+00 + ((1.0000000000000000e+00 + (2.0000000000000000e+00 * sum_169414(HEX2EHEX5E_169918(HEX5BHEX5D_216081(x_216034, HEX2EHEX2E_74220(0, k_216060)), 2.0000000000000000e+00)))) / to_float_10657(n_216051)))))]; };
						res_231748 += 1;
					}
			} while(false);
		} while(false);
		result_216036.null_distribution = shifted_estimator_216509(normal_209863(0.0, 1.0000000000000000e+00), 0.0, (1.0000000000000000e+00 / Math.sqrt(to_float_10657(n_216051))));

	return result_216036;

}

function flatten_229717(estimator_229721) {
	var result_229722 = null;

		result_229722 = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_229722.mean = estimate_218585(estimator_229721);
		result_229722.standard_deviation = standard_deviation_218679(estimator_229721);
		result_229722.confidence_interval = nimCopy(null, confidence_interval_218739(estimator_229721, 5.0000000000000003e-02), NTI215893);
		result_229722.p_value = p_value_218956(estimator_229721);
		result_229722.score = test_score_218894(estimator_229721);
		result_229722.t_value = test_score_218894(estimator_229721);

	return result_229722;

}

function flatten_230092(estimator_230096) {
	var result_230097 = null;

		result_230097 = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_230097.mean = estimate_219271(estimator_230096);
		result_230097.standard_deviation = standard_deviation_219365(estimator_230096);
		result_230097.confidence_interval = nimCopy(null, confidence_interval_219425(estimator_230096, 5.0000000000000003e-02), NTI215893);
		result_230097.p_value = p_value_219642(estimator_230096);
		result_230097.score = test_score_219580(estimator_230096);
		result_230097.t_value = test_score_219580(estimator_230096);

	return result_230097;

}

function erf_206583(x_206585) {
		var Tmp3;

	var result_206586 = 0.0;

	BeforeRet: do {
		var x2_206590 = x_206585;
		var j_206614 = 27;
		var isneg_206615 = false;
		var d_206616 = 0.0;
		var dd_206617 = 0.0;
		var t_206618 = 0.0;
		var ty_206619 = 0.0;
		var tmp_206620 = 0.0;
		var res_206621 = 0.0;
		if ((x_206585 < 0.0)) {
		x2_206590 = -(x_206585);
		isneg_206615 = true;
		}
		
		t_206618 = (2.0000000000000000e+00 / (2.0000000000000000e+00 + x2_206590));
		ty_206619 = ((4.0000000000000000e+00 * t_206618) - 2.0000000000000000e+00);
		L1: do {
				L2: while (true) {
				if (!(0 < j_206614)) break L2;
					tmp_206620 = d_206616;
					d_206616 = (((ty_206619 * d_206616) - dd_206617) + cof_206589[j_206614]);
					dd_206617 = tmp_206620;
					j_206614 -= 1;
				}
		} while(false);
		res_206621 = (t_206618 * Math.exp((((-(x_206585) * x_206585) + (5.0000000000000000e-01 * (-1.3026537197817094e+00 + (ty_206619 * d_206616)))) - dd_206617)));
		if (isneg_206615) {
		Tmp3 = (res_206621 - 1.0000000000000000e+00);
		}
		else {
		Tmp3 = (1.0000000000000000e+00 - res_206621);
		}
		
		result_206586 = Tmp3;
		break BeforeRet;
	} while (false);

	return result_206586;

}

function erfc_206643(x_206645) {
	var result_206646 = 0.0;

		result_206646 = (1.0000000000000000e+00 - erf_206583(x_206645));

	return result_206646;

}

function erfcinv_206660(p_206662) {
		var Tmp1;
		var Tmp5;

	var result_206663 = 0.0;

	BeforeRet: do {
		if ((2.0000000000000000e+00 <= p_206662)) {
		result_206663 = -1.0000000000000000e+02;
		break BeforeRet;
		}
		
		if ((p_206662 <= 0.0)) {
		result_206663 = 1.0000000000000000e+02;
		break BeforeRet;
		}
		
		if ((p_206662 < 1.0000000000000000e+00)) {
		Tmp1 = p_206662;
		}
		else {
		Tmp1 = (2.0000000000000000e+00 - p_206662);
		}
		
		var pp_206664 = Tmp1;
		var t_206665 = Math.sqrt((-2.0000000000000000e+00 * Math.log((pp_206664 / 2.0000000000000000e+00))));
		var x_206666 = [(-7.0711000000000002e-01 * (((2.3075299999999999e+00 + (t_206665 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_206665 * (9.9229000000000001e-01 + (t_206665 * 4.4810000000000003e-02))))) - t_206665))];
		var err_206667 = 0.0;
		L2: do {
			var j_206677 = 0;
			var res_231768 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_231768 <= 1)) break L4;
						j_206677 = res_231768;
						err_206667 = (erfc_206643(x_206666[0]) - pp_206664);
						HEX2BHEX3D_60121(x_206666, 0, (err_206667 / ((1.1283791670955126e+00 * Math.exp((-(x_206666[0]) * x_206666[0]))) - (x_206666[0] * err_206667))));
						res_231768 += 1;
					}
			} while(false);
		} while(false);
		if ((p_206662 < 1.0000000000000000e+00)) {
		Tmp5 = x_206666[0];
		}
		else {
		Tmp5 = -(x_206666[0]);
		}
		
		result_206663 = Tmp5;
		break BeforeRet;
	} while (false);

	return result_206663;

}

function inv_209970(d_209972, p_209973) {
	var result_209974 = 0.0;

	BeforeRet: do {
		result_209974 = (((-1.4142135623730951e+00 * d_209972.std) * erfcinv_206660((2.0000000000000000e+00 * p_209973))) + d_209972.mean);
		break BeforeRet;
	} while (false);

	return result_209974;

}

function inv_230399(d_230403, p_230404) {
	var result_230405 = 0.0;

		result_230405 = ((inv_209970(d_230403.distribution, p_230404) * d_230403.scale) + d_230403.location);

	return result_230405;

}

function confidence_interval_230383(sd_230387, alpha_230388) {
	var result_230389 = null;

		result_230389 = nimCopy(null, [inv_230399(sd_230387.distribution, (5.0000000000000000e-01 * alpha_230388)), inv_230399(sd_230387.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_230388)))], NTI215481);

	return result_230389;

}

function addition_164414(a_164416, b_164417) {
	var result_164418 = null;

		L1: do {
			var k_164618 = 0;
			var colontmp__231775 = 0;
			colontmp__231775 = (a_164416 != null ? (a_164416.length-1) : -1);
			var res_231776 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231776 <= colontmp__231775)) break L3;
						k_164618 = res_231776;
						if (result_164418 != null) { result_164418.push((a_164416[k_164618] + b_164417[k_164618])); } else { result_164418 = [(a_164416[k_164618] + b_164417[k_164618])]; };
						res_231776 += 1;
					}
			} while(false);
		} while(false);

	return result_164418;

}

function HEX2B_164700(a_164702, b_164703) {
	var result_164704 = null;

		result_164704 = nimCopy(null, addition_164414(a_164702, b_164703), NTI164064);

	return result_164704;

}

function multiply_165839(a_165841, b_165842) {
	var result_165843 = null;

		L1: do {
			var k_165861 = 0;
			var colontmp__231782 = 0;
			colontmp__231782 = (a_165841 != null ? (a_165841.length-1) : -1);
			var res_231783 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231783 <= colontmp__231782)) break L3;
						k_165861 = res_231783;
						if (result_165843 != null) { result_165843.push((a_165841[k_165861] * b_165842)); } else { result_165843 = [(a_165841[k_165861] * b_165842)]; };
						res_231783 += 1;
					}
			} while(false);
		} while(false);

	return result_165843;

}

function HEX2A_165918(a_165920, b_165921) {
	var result_165922 = null;

		result_165922 = nimCopy(null, multiply_165839(a_165920, b_165921), NTI164064);

	return result_165922;

}

function flatten_229667(model_229669) {
	var result_229670 = null;

		result_229670 = {change_point_candidates: null, loglikelihood_candidates: null, change_point_index: 0, change_point_x: 0.0, initial: null, increment_change: null, existence_change_point_hypothesis: null};
		result_229670.initial = new_ritsperiod_229188();
		result_229670.increment_change = new_ritsperiod_229188();
		result_229670.change_point_candidates = nimCopy(null, model_229669.change_point_candidates, NTI223188);
		result_229670.loglikelihood_candidates = nimCopy(null, clean_nan_229340(model_229669.loglikelihood_candidates, -Infinity), NTI164064);
		result_229670.change_point_index = model_229669.change_point_index;
		result_229670.change_point_x = model_229669.change_point_x;
		var acf1_229678 = autocorrelation_function_216032(clean_nan_229340(model_229669.model.before_residual_model.residuals, -Infinity), 100);
		var acf2_229680 = autocorrelation_function_216032(clean_nan_229340(model_229669.model.after_residual_model.residuals, -Infinity), 100);
		result_229670.initial.slope = flatten_229717(model_229669.model.before_model.coefficients[0]);
		result_229670.initial.intercept = flatten_229717(model_229669.model.before_model.coefficients[1]);
		result_229670.initial.autocorrelation = flatten_229717(model_229669.model.before_residual_model.coefficients[0]);
		result_229670.initial.noise = flatten_230092(model_229669.model.before_residual_model.noise_variance);
		result_229670.initial.residuals.values = nimCopy(null, clean_nan_229340(model_229669.model.before_residual_model.residuals, -Infinity), NTI164064);
		result_229670.initial.residuals.autocorrelation = nimCopy(null, clean_nan_229340(acf1_229678.estimators_mean, 0.0), NTI164064);
		result_229670.initial.residuals.autocorrelation_null_confidence_interval = nimCopy(null, confidence_interval_230383(acf1_229678.null_distribution, 5.0000000000000003e-02), NTI215893);
		result_229670.increment_change.slope = flatten_229717(model_229669.model.after_model.coefficients[0]);
		result_229670.increment_change.intercept = flatten_229717(model_229669.model.after_model.coefficients[1]);
		result_229670.increment_change.autocorrelation = flatten_229717(model_229669.model.after_residual_model.coefficients[0]);
		result_229670.increment_change.noise = flatten_230092(model_229669.model.after_residual_model.noise_variance);
		result_229670.increment_change.residuals.values = nimCopy(null, clean_nan_229340(model_229669.model.after_residual_model.residuals, -Infinity), NTI164064);
		result_229670.increment_change.residuals.autocorrelation = nimCopy(null, clean_nan_229340(acf2_229680.estimators_mean, 0.0), NTI164064);
		result_229670.increment_change.residuals.autocorrelation_null_confidence_interval = nimCopy(null, confidence_interval_230383(acf2_229680.null_distribution, 5.0000000000000003e-02), NTI215893);
		result_229670.increment_change.level.mean = ((result_229670.increment_change.slope.mean * result_229670.change_point_x) + result_229670.increment_change.intercept.mean);
		result_229670.increment_change.level.standard_deviation = ((result_229670.increment_change.slope.standard_deviation * result_229670.change_point_x) + result_229670.increment_change.intercept.standard_deviation);
		result_229670.increment_change.level.confidence_interval = nimCopy(null, HEX2B_164700(HEX2A_165918(result_229670.increment_change.slope.confidence_interval, result_229670.change_point_x), result_229670.increment_change.intercept.confidence_interval), NTI164064);
		result_229670.existence_change_point_hypothesis = flatten_230696(model_229669.model.existence_change_point_hypothesis);

	return result_229670;

}

function robust_interrupted_time_series(x_231091, y_231092, change_point_candidates_start_231093, change_point_candidates_end_231094) {
	var result_231095 = null;

		var model_231096 = rits_model_228528(x_231091, y_231092, change_point_candidates_start_231093, change_point_candidates_end_231094);
		rawEcho(HEX24_223224(model_231096));
		result_231095 = flatten_229667(model_231096);

	return result_231095;

}

function subsample_172014(v_172016, sampling_172017) {
	var result_172018 = null;

		L1: do {
			var k_172036 = 0;
			var colontmp__231827 = 0;
			colontmp__231827 = (v_172016 != null ? (v_172016.length-1) : -1);
			var res_231828 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_231828 <= colontmp__231827)) break L3;
						k_172036 = res_231828;
						L4: do {
							if (!((Math.trunc(k_172036 % sampling_172017) == 0))) {
							break L4;
							}
							
							if (result_172018 != null) { result_172018.push(interpolated_if_not_valid_171829(v_172016, k_172036)); } else { result_172018 = [interpolated_if_not_valid_171829(v_172016, k_172036)]; };
						} while(false);
						res_231828 += 1;
					}
			} while(false);
		} while(false);

	return result_172018;

}

function robust_interrupted_time_series_approximated(sampling_231803, x_231804, y_231805, change_point_candidates_start_231806, change_point_candidates_end_231807) {
	var result_231808 = null;

		var model_231809 = rits_model_228528(subsample_172014(x_231804, sampling_231803), y_231805, to_int_10691((to_float_10657(change_point_candidates_start_231806) / to_float_10657(sampling_231803))), to_int_10691((to_float_10657(change_point_candidates_end_231807) / to_float_10657(sampling_231803))));
		rawEcho(HEX24_223224(model_231809));
		result_231808 = flatten_229667(model_231809);

	return result_231808;

}
exports.robust_interrupted_time_series = robust_interrupted_time_series
exports.robust_interrupted_time_series_approximated = robust_interrupted_time_series_approximated
exports.existence_change_point_hypothesis = existence_change_point_hypothesis
