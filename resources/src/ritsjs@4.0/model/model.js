/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI192727 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI207896 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI234191 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI246093 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI193277 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI199009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI199008 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI234163 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI234162 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI245425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI245247 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI244293 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI244215 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI244113 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI17403 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI154433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI154638 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI177626 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI208864 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI207666 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI208749 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI208748 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI197649 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI197648 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI208722 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI208721 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI208718 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI208717 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI209450 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148064 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148068 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI207715 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI207502 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI192086 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI175878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI175816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI175818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI176020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
NTI176020.base = NTI112;
NTI175816.base = NTI175878;
var NNI175818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI175816, name: "nanosecond", sons: null}]};
NTI175818.node = NNI175818;
NTI192086.base = NTI128;
NTI207502.base = NTI124;
NTI207715.base = NTI124;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3852.base = NTI3828;
NTI148068.base = NTI124;
NTI148067.base = NTI148068;
NTI148064.base = NTI124;
var NNI197649 = {kind: 1, offset: "dof", len: 0, typ: NTI104, name: "dof", sons: null};
NTI197649.node = NNI197649;
NTI197648.base = NTI197649;
var NNI208722 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI197648, name: "distribution", sons: null}, 
{kind: 1, offset: "location", len: 0, typ: NTI124, name: "location", sons: null}, 
{kind: 1, offset: "scale", len: 0, typ: NTI124, name: "scale", sons: null}]};
NTI208722.node = NNI208722;
NTI208721.base = NTI208722;
var NNI207666 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI207666, name: "twoTailed", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI207666, name: "oneTailed", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI207666, name: "rightTailed", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI207666, name: "leftTailed", len: 0, sons: null}}};
NTI207666.node = NNI207666;
var NNI208749 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI208721, name: "distribution", sons: null}, 
{kind: 1, offset: "test_score", len: 0, typ: NTI124, name: "test_score", sons: null}, 
{kind: 1, offset: "test_type", len: 0, typ: NTI207666, name: "test_type", sons: null}]};
NTI208749.node = NNI208749;
NTI208748.base = NTI208749;
var NNI208718 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI208721, name: "distribution", sons: null}, 
{kind: 1, offset: "hypothesis_test", len: 0, typ: NTI208748, name: "hypothesis_test", sons: null}]};
NTI208718.node = NNI208718;
NTI208717.base = NTI208718;
NTI209450.base = NTI208717;
NTI208864.base = NTI138;
NTI177626.base = NTI138;
NTI154638.base = NTI124;
NTI154433.base = NTI124;
NTI244113.base = NTI124;
NTI244215.base = NTI148068;
NTI244293.base = NTI148068;
NTI245247.base = NTI124;
var NNI199009 = {kind: 1, offset: "dof", len: 0, typ: NTI124, name: "dof", sons: null};
NTI199009.node = NNI199009;
NTI199008.base = NTI199009;
var NNI234163 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "distribution", len: 0, typ: NTI199008, name: "distribution", sons: null}, 
{kind: 1, offset: "test_score", len: 0, typ: NTI124, name: "test_score", sons: null}, 
{kind: 1, offset: "test_type", len: 0, typ: NTI207666, name: "test_type", sons: null}]};
NTI234163.node = NNI234163;
NTI234162.base = NTI234163;
NTI245425.base = NTI234162;
NTI193277.base = NTI124;
NTI246093.base = NTI234162;
NTI234191.base = NTI104;
NTI207896.base = NTI124;
NTI192727.base = NTI124;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}
		var unit_weights_176017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI176020);
						var cof_192085 = nimCopy(null, [7.6180091729471457e+01, -8.6505320329416776e+01, 2.4014098240830911e+01, -1.2317395724501550e+00, 1.2086509738661790e-03, -5.3952393849530003e-06], NTI192086);

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		throw e_15818;

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
					var cof_192726 = nimCopy(null, [-1.3026537197817094e+00, 6.4196979235649021e-01, 1.9476473204185836e-02, -9.5615147868086305e-03, -9.4659534448203605e-04, 3.6683949785276101e-04, 4.2523324806907003e-05, -2.0278578112534001e-05, -1.6242900046470000e-06, 1.3036558355800000e-06, 1.5626441722000001e-08, -8.5238095914999995e-08, 6.5290544390000001e-09, 5.0593434950000004e-09, -9.9136415599999992e-10, -2.2736512200000000e-10, 9.6467910999999994e-11, 2.3940379999999998e-12, -6.8860269999999998e-12, 8.9448700000000004e-13, 3.1309199999999997e-13, -1.1270800000000000e-13, 3.8099999999999998e-16, 7.1059999999999999e-15, -1.5230000000000001e-15, -9.3999999999999999e-17, 1.2099999999999999e-16, -2.7999999999999999e-17], NTI192727);
var nimvm_7173 = false;
process.exitCode = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];

function classify_29030(x_29032) {
	var result_29033 = 0;

	BeforeRet: do {
		if ((x_29032 == 0.0)) {
		if (((1.0000000000000000e+00 / x_29032) == Infinity)) {
		result_29033 = 2;
		break BeforeRet;
		}
		else {
			result_29033 = 3;
			break BeforeRet;
		}
		
		}
		
		if (((x_29032 * 5.0000000000000000e-01) == x_29032)) {
		if ((0.0 < x_29032)) {
		result_29033 = 5;
		break BeforeRet;
		}
		else {
			result_29033 = 6;
			break BeforeRet;
		}
		
		}
		
		if (!((x_29032 == x_29032))) {
		result_29033 = 4;
		break BeforeRet;
		}
		
		result_29033 = 0;
		break BeforeRet;
	} while (false);

	return result_29033;

}

function interpolated_if_not_valid_155829(data_155831, i_155832) {
			var Tmp1;

	var result_155833 = 0.0;

	BeforeRet: do {
		var v_155834 = data_155831[i_155832];
			if ((((classify_29030(v_155834) == 4) || (classify_29030(v_155834) == 5)) || (classify_29030(v_155834) == 6))) Tmp1 = true; else {				Tmp1 = !((((v_155834 * 1.0000000000000000e+01) / 1.0000000000000000e+01) == v_155834));			}		if (Tmp1) {
		if ((i_155832 == 0)) {
		result_155833 = data_155831[(i_155832 + 1)];
		break BeforeRet;
		}
		else {
		if ((i_155832 == (data_155831 != null ? (data_155831.length-1) : -1))) {
		result_155833 = data_155831[(i_155832 - 1)];
		break BeforeRet;
		}
		else {
			result_155833 = (5.0000000000000000e-01 * (data_155831[(i_155832 - 1)] + data_155831[(i_155832 + 1)]));
			break BeforeRet;
		}
		}
		}
		
		result_155833 = data_155831[i_155832];
		break BeforeRet;
	} while (false);

	return result_155833;

}

function fill_non_numerical(v_155889) {
	var result_155890 = null;

		L1: do {
			var k_155914 = 0;
			var colontmp__155926 = 0;
			colontmp__155926 = (v_155889 != null ? (v_155889.length-1) : -1);
			var res_155929 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_155929 <= colontmp__155926)) break L3;
						k_155914 = res_155929;
						if (result_155890 != null) { result_155890.push(interpolated_if_not_valid_155829(v_155889, k_155914)); } else { result_155890 = [interpolated_if_not_valid_155829(v_155889, k_155914)]; };
						res_155929 += 1;
					}
			} while(false);
		} while(false);

	return result_155890;

}
var state_171605 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_178832 = [null];
var local_instance_178833 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function HEX2A_175401(a_175403, b_175404) {
	var result_175405 = 0;

		result_175405 = (a_175403 * b_175404);

	return result_175405;

}

function convert_176448(unit_from_176452, unit_to_176454, quantity_176456) {
		var Tmp1;

	var result_176457 = 0;

		if ((unit_from_176452 < unit_to_176454)) {
		Tmp1 = Math.trunc(quantity_176456 / Math.trunc(unit_weights_176017[unit_to_176454] / unit_weights_176017[unit_from_176452]));
		}
		else {
		Tmp1 = HEX2A_175401(Math.trunc(unit_weights_176017[unit_from_176452] / unit_weights_176017[unit_to_176454]), quantity_176456);
		}
		
		result_176457 = Tmp1;

	return result_176457;

}

function init_time_176085(unix_176087, nanosecond_176088) {
	var result_178018 = {seconds: 0, nanosecond: 0};

		result_178018.seconds = unix_176087;
		result_178018.nanosecond = nanosecond_176088;

	return result_178018;

}

function get_time_178961() {
	var result_178963 = {seconds: 0, nanosecond: 0};

		var millis_179001 = new Date().getTime();
		var seconds_179012 = convert_176448(2, 3, millis_179001);
		var nanos_179034 = convert_176448(2, 0, Math.trunc(millis_179001 % convert_176448(3, 2, 1)));
		nimCopy(result_178963, init_time_176085(seconds_179012, nanos_179034), NTI175818);

	return result_178963;

}
var start_188831 = [get_time_178961()];
var lc_191331 = [{}];

function min_251005(x_251010) {
	var result_251011 = 0.0;

		result_251011 = x_251010[0];
		L1: do {
			var i_251030 = 0;
			var colontmp__251032 = 0;
			colontmp__251032 = (x_251010 != null ? (x_251010.length-1) : -1);
			var res_251035 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_251035 <= colontmp__251032)) break L3;
						i_251030 = res_251035;
						if ((x_251010[i_251030] < result_251011)) {
						result_251011 = x_251010[i_251030];
						}
						
						res_251035 += 1;
					}
			} while(false);
		} while(false);

	return result_251011;

}

function HEX2DHEX3D_168580(x_168585, x_168585_Idx, y_168587) {
		x_168585[x_168585_Idx] = (x_168585[x_168585_Idx] - y_168587);

	
}

function HEX2BHEX3D_44127(x_44132, x_44132_Idx, y_44134) {
		x_44132[x_44132_Idx] = (x_44132[x_44132_Idx] + y_44134);

	
}

function gammaln_192081(x_192083) {
	var result_192084 = 0.0;

	BeforeRet: do {
		var ser_192088 = [1.0000000001900149e+00];
		var xx_192089 = x_192083;
		var y_192090 = [x_192083];
		var tmp_192091 = [(x_192083 + 5.5000000000000000e+00)];
		HEX2DHEX3D_168580(tmp_192091, 0, ((xx_192089 + 5.0000000000000000e-01) * Math.log(tmp_192091[0])));
		L1: do {
			var j_192122 = 0;
			var res_192146 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_192146 <= 5)) break L3;
						j_192122 = res_192146;
						HEX2BHEX3D_44127(y_192090, 0, 1.0000000000000000e+00);
						HEX2BHEX3D_44127(ser_192088, 0, (cof_192085[j_192122] / y_192090[0]));
						res_192146 += 1;
					}
			} while(false);
		} while(false);
		result_192084 = (Math.log(((2.5066282746310007e+00 * ser_192088[0]) / xx_192089)) - tmp_192091[0]);
		break BeforeRet;
	} while (false);

	return result_192084;

}

function HEX2AHEX3D_144887(x_144892, x_144892_Idx, y_144894) {
		x_144892[x_144892_Idx] = (x_144892[x_144892_Idx] * y_144894);

	
}

function low_reg_gamma_192313(a_192315, x_192316) {
		var Tmp1;

	var result_192317 = 0.0;

	BeforeRet: do {
		var ap_192318 = [a_192315];
		var sum_192320 = [(1.0000000000000000e+00 - (0.0 / a_192315))];
		var del_192321 = [sum_192320[0]];
		var b_192322 = [((x_192316 + 1.0000000000000000e+00) - a_192315)];
		var c_192323 = 9.9999999999999988e+29;
		var d_192324 = (1.0000000000000000e+00 / b_192322[0]);
		var h_192325 = [d_192324];
		var an_192326 = 0.0;
		var endval_192327 = 0.0;
		var aln_192328 = gammaln_192081(a_192315);
		if ((1.0000000000000000e+00 <= a_192315)) {
		Tmp1 = a_192315;
		}
		else {
		Tmp1 = (1.0000000000000000e+00 / a_192315);
		}
		
		var itmax_192329 = Math.trunc((((-1.0000000000000000e+00 + (Math.log(Tmp1) * 8.5000000000000000e+00)) + (a_192315 * 4.0000000000000002e-01)) + 1.7000000000000000e+01));
		if (((x_192316 < 0.0) || (a_192315 <= 0.0))) {
		result_192317 = NaN;
		break BeforeRet;
		}
		else {
		if ((x_192316 < (a_192315 + 1.0000000000000000e+00))) {
		L2: do {
			var i_192341 = 0;
			var res_192419 = 1;
			L3: do {
					L4: while (true) {
					if (!(res_192419 <= itmax_192329)) break L4;
						i_192341 = res_192419;
						HEX2BHEX3D_44127(ap_192318, 0, 1.0000000000000000e+00);
						HEX2AHEX3D_144887(del_192321, 0, (x_192316 / ap_192318[0]));
						HEX2BHEX3D_44127(sum_192320, 0, del_192321[0]);
						res_192419 += 1;
					}
			} while(false);
		} while(false);
		var p_a_x_192372 = [(sum_192320[0] * Math.exp(((-(x_192316) + (a_192315 * Math.log(x_192316))) - aln_192328)))];
		HEX2AHEX3D_144887(p_a_x_192372, 0, 5.0000000000000000e-01);
		result_192317 = p_a_x_192372[0];
		break BeforeRet;
		}
		}
		L5: do {
			var i_192394 = 0;
			var res_192426 = 1;
			L6: do {
					L7: while (true) {
					if (!(res_192426 <= itmax_192329)) break L7;
						i_192394 = res_192426;
						an_192326 = (-(i_192394) * (i_192394 - a_192315));
						HEX2BHEX3D_44127(b_192322, 0, 2.0000000000000000e+00);
						d_192324 = ((an_192326 * d_192324) + b_192322[0]);
						c_192323 = (b_192322[0] + (an_192326 / c_192323));
						d_192324 = (1.0000000000000000e+00 / d_192324);
						HEX2AHEX3D_144887(h_192325, 0, (d_192324 * c_192323));
						res_192426 += 1;
					}
			} while(false);
		} while(false);
		result_192317 = (1.0000000000000000e+00 - (h_192325[0] * Math.exp(((-(x_192316) + (a_192315 * Math.log(x_192316))) - aln_192328))));
		break BeforeRet;
	} while (false);

	return result_192317;

}

function cdf_199232(d_199234, x_199235) {
	var result_199236 = 0.0;

	BeforeRet: do {
		if ((x_199235 <= 0.0)) {
		result_199236 = 0.0;
		break BeforeRet;
		}
		
		result_199236 = low_reg_gamma_192313((d_199234.dof / 2.0000000000000000e+00), (x_199235 / 2.0000000000000000e+00));
		break BeforeRet;
	} while (false);

	return result_199236;

}

function p_value_243852(sd_243857) {
		var Tmp1;
			var Tmp2;

	var result_243858 = 0.0;

	BeforeRet: do {
		if ((sd_243857.test_type == 0)) {
		result_243858 = ((1.0000000000000000e+00 - cdf_199232(sd_243857.distribution, Math.abs(sd_243857.test_score))) + cdf_199232(sd_243857.distribution, -(Math.abs(sd_243857.test_score))));
		break BeforeRet;
		}
		
		if ((sd_243857.test_type == 3)) {
		result_243858 = cdf_199232(sd_243857.distribution, sd_243857.test_score);
		break BeforeRet;
		}
		
		if ((sd_243857.test_type == 2)) {
		result_243858 = (1.0000000000000000e+00 - cdf_199232(sd_243857.distribution, sd_243857.test_score));
		break BeforeRet;
		}
		
		var p1_243889 = (1.0000000000000000e+00 - cdf_199232(sd_243857.distribution, sd_243857.test_score));
		var p2_243890 = cdf_199232(sd_243857.distribution, sd_243857.test_score);
			if (!(p1_243889 < p2_243890)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_243889);			}		if (Tmp2) {
		Tmp1 = p1_243889;
		}
		else {
		Tmp1 = p2_243890;
		}
		
		result_243858 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_243858;

}

function HEX5E_148027(a_148029, b_148030) {
	var result_148031 = 0.0;

		result_148031 = Math.pow(a_148029, b_148030);

	return result_148031;

}

function gammapinv_192662(p_192664, a_192665) {
		var Tmp1;

	var result_192666 = 0.0;

	BeforeRet: do {
		var a1_192667 = (a_192665 - 1.0000000000000000e+00);
		var eps_192668 = 1.0000000000000000e-08;
		var gln_192669 = gammaln_192081(a_192665);
		var x_192670 = [0.0];
		var err_192671 = 0.0;
		var t_192672 = 0.0;
		var u_192673 = 0.0;
		var pp_192674 = 0.0;
		var lna1_192675 = 0.0;
		var afac_192676 = 0.0;
		if ((1.0000000000000000e+00 <= p_192664)) {
		result_192666 = nimMax(1.0000000000000000e+02, (a_192665 + (1.0000000000000000e+02 * Math.sqrt(a_192665))));
		break BeforeRet;
		}
		
		if ((p_192664 <= 0.0)) {
		result_192666 = 0.0;
		break BeforeRet;
		}
		
		if ((1.0000000000000000e+00 < a_192665)) {
		lna1_192675 = Math.log(a1_192667);
		afac_192676 = Math.exp(((a1_192667 * (lna1_192675 - 1.0000000000000000e+00)) - gln_192669));
		if ((p_192664 < 5.0000000000000000e-01)) {
		Tmp1 = p_192664;
		}
		else {
		Tmp1 = (1.0000000000000000e+00 - p_192664);
		}
		
		pp_192674 = Tmp1;
		t_192672 = Math.sqrt((-2.0000000000000000e+00 * Math.log(pp_192674)));
		x_192670[0] = (((2.3075299999999999e+00 + (t_192672 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_192672 * (9.9229000000000001e-01 + (t_192672 * 4.4810000000000003e-02))))) - t_192672);
		if ((p_192664 < 5.0000000000000000e-01)) {
		x_192670[0] = -(x_192670[0]);
		}
		
		x_192670[0] = nimMax(1.0000000000000000e-03, (a_192665 * HEX5E_148027(((1.0000000000000000e+00 - (1.0000000000000000e+00 / (9.0000000000000000e+00 * a_192665))) - (x_192670[0] / (3.0000000000000000e+00 * Math.sqrt(a_192665)))), 3.0000000000000000e+00)));
		}
		else {
			t_192672 = (1.0000000000000000e+00 - (a_192665 * (2.5300000000000000e-01 + (a_192665 * 1.2000000000000000e-01))));
			if ((p_192664 < t_192672)) {
			x_192670[0] = HEX5E_148027((p_192664 / t_192672), (1.0000000000000000e+00 / a_192665));
			}
			else {
				x_192670[0] = (1.0000000000000000e+00 - Math.log((1.0000000000000000e+00 - ((p_192664 - t_192672) / (1.0000000000000000e+00 - t_192672)))));
			}
			
		}
		
		L2: do {
			var j_192691 = 0;
			var res_192705 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_192705 <= 11)) break L4;
						j_192691 = res_192705;
						if ((x_192670[0] <= 0.0)) {
						result_192666 = 0.0;
						break BeforeRet;
						}
						
						err_192671 = (low_reg_gamma_192313(a_192665, x_192670[0]) - p_192664);
						if ((1.0000000000000000e+00 < a_192665)) {
						t_192672 = (afac_192676 * Math.exp((-((x_192670[0] - a1_192667)) + (a1_192667 * (Math.log(x_192670[0]) - lna1_192675)))));
						}
						else {
							t_192672 = Math.exp(((-(x_192670[0]) + (a1_192667 * Math.log(x_192670[0]))) - gln_192669));
						}
						
						u_192673 = (err_192671 / t_192672);
						t_192672 = (u_192673 / (1.0000000000000000e+00 - (5.0000000000000000e-01 * nimMin(1.0000000000000000e+00, (u_192673 * (((a_192665 - 1.0000000000000000e+00) / x_192670[0]) - 1.0000000000000000e+00))))));
						HEX2DHEX3D_168580(x_192670, 0, t_192672);
						if ((x_192670[0] <= 0.0)) {
						x_192670[0] = (5.0000000000000000e-01 * (x_192670[0] + t_192672));
						}
						
						if ((Math.abs(t_192672) < (eps_192668 * x_192670[0]))) {
						break L2;
						}
						
						res_192705 += 1;
					}
			} while(false);
		} while(false);
		result_192666 = x_192670[0];
		break BeforeRet;
	} while (false);

	return result_192666;

}

function inv_199250(d_199252, p_199253) {
	var result_199254 = 0.0;

	BeforeRet: do {
		result_199254 = (2.0000000000000000e+00 * gammapinv_192662(p_199253, (5.0000000000000000e-01 * d_199252.dof)));
		break BeforeRet;
	} while (false);

	return result_199254;

}

function mean_199268(d_199270) {
	var result_199271 = 0.0;

	BeforeRet: do {
		result_199271 = d_199270.dof;
		break BeforeRet;
	} while (false);

	return result_199271;

}

function null_confidence_interval_241413(sd_241418, alpha_241420) {
	var result_241421 = null;

	BeforeRet: do {
		var default_ci_241434 = [inv_199250(sd_241418.distribution, (5.0000000000000000e-01 * alpha_241420)), inv_199250(sd_241418.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_241420)))];
		var right_ci_241447 = [inv_199250(sd_241418.distribution, 0.0), inv_199250(sd_241418.distribution, (1.0000000000000000e+00 - alpha_241420))];
		var left_ci_241461 = [inv_199250(sd_241418.distribution, (1.0000000000000000e+00 - alpha_241420)), inv_199250(sd_241418.distribution, 1.0000000000000000e+00)];
		var test_score_241462 = mean_199268(sd_241418.distribution);
		if ((test_score_241462 < default_ci_241434[0])) {
		result_241421 = nimCopy(null, right_ci_241447, NTI207502);
		break BeforeRet;
		}
		else {
		if ((default_ci_241434[1] < test_score_241462)) {
		result_241421 = nimCopy(null, left_ci_241461, NTI207502);
		break BeforeRet;
		}
		}
		result_241421 = nimCopy(null, default_ci_241434, NTI207502);
		break BeforeRet;
	} while (false);

	return result_241421;

}

function HEX24_199078(d_199080) {
	var result_199081 = null;

		var fmt_res_199084 = mnewString(0);
		if (fmt_res_199084 != null) { fmt_res_199084 = (fmt_res_199084).concat(makeNimstrLit("ChiSquare(dof=")); } else { fmt_res_199084 = makeNimstrLit("ChiSquare(dof="); };
		if (fmt_res_199084 != null) { fmt_res_199084 = (fmt_res_199084).concat(cstrToNimstr((Math.trunc(d_199080.dof))+"")); } else { fmt_res_199084 = cstrToNimstr((Math.trunc(d_199080.dof))+"").slice(); };
		if (fmt_res_199084 != null) { fmt_res_199084 = (fmt_res_199084).concat(makeNimstrLit(")")); } else { fmt_res_199084 = makeNimstrLit(")"); };
		result_199081 = nimCopy(null, fmt_res_199084, NTI138);

	return result_199081;

}

function flatten_250873(test_250878) {
	var result_250879 = null;

		result_250879 = {score: 0.0, p_value: 0.0, null_confidence_interval: null, distribution: null};
		result_250879.score = test_250878.test_score;
		result_250879.p_value = p_value_243852(test_250878);
		result_250879.null_confidence_interval = nimCopy(null, null_confidence_interval_241413(test_250878, 5.0000000000000003e-02), NTI207715);
		result_250879.distribution = nimCopy(null, HEX24_199078(test_250878.distribution), NTI138);

	return result_250879;

}

function htest_score_245358(distribution_245362, score_245364, test_type_245366) {
	var result_245368 = null;

		result_245368 = {distribution: null, test_score: 0.0, test_type: 0};
		result_245368.distribution = distribution_245362;
		result_245368.test_score = score_245364;
		result_245368.test_type = test_type_245366;

	return result_245368;

}

function chisquare_199053(dof_199055) {
	var result_199056 = null;

		result_199056 = {dof: 0.0};
		result_199056.dof = dof_199055;

	return result_199056;

}

function existence_change_point_hypothesis(test_scores_250994) {
	var result_250995 = null;

		var total_score_251052 = ((test_scores_250994 != null ? test_scores_250994.length : 0) * min_251005(test_scores_250994));
		result_250995 = flatten_250873(htest_score_245358(chisquare_199053((2.0000000000000000e+00 * (test_scores_250994 != null ? test_scores_250994.length : 0))), total_score_251052, 1));

	return result_250995;

}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function add_intercept_207463(x_207465) {
	var result_207466 = null;

		L1: do {
			var r_207490 = 0;
			var colontmp__207514 = 0;
			colontmp__207514 = (x_207465 != null ? (x_207465.length-1) : -1);
			var res_207517 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_207517 <= colontmp__207514)) break L3;
						r_207490 = res_207517;
						if (result_207466 != null) { result_207466.push([x_207465[r_207490], 1.0000000000000000e+00]); } else { result_207466 = [[x_207465[r_207490], 1.0000000000000000e+00]]; };
						res_207517 += 1;
					}
			} while(false);
		} while(false);

	return result_207466;

}

function HEX5BHEX5D_208119(s_208126, x_208129) {
	var result_208131 = null;

		var a_208201 = x_208129.a;
		var l_208401 = ((x_208129.b - a_208201) + 1);
		result_208131 = new Array(l_208401); for (var i=0;i<l_208401;++i) {result_208131[i]=0.0;}		L1: do {
			var i_208421 = 0;
			var i_208429 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_208429 < l_208401)) break L3;
						i_208421 = i_208429;
						result_208131[i_208421] = s_208126[(i_208421 + a_208201)];
						i_208429 += 1;
					}
			} while(false);
		} while(false);

	return result_208131;

}

function HEX2EHEX2E_57828(a_57833, b_57835) {
	var result_57843 = {a: 0, b: 0};

		result_57843.a = a_57833;
		result_57843.b = b_57835;

	return result_57843;

}

function cols_157438(a_157440) {
	var result_157441 = 0;

		result_157441 = (a_157440[0] != null ? a_157440[0].length : 0);

	return result_157441;

}

function as_column_vector_155014(v_155016) {
	var result_155017 = null;

		L1: do {
			var i_155036 = 0;
			var colontmp__155060 = 0;
			colontmp__155060 = (v_155016 != null ? v_155016.length : 0);
			var res_155063 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_155063 <= colontmp__155060)) break L3;
						i_155036 = res_155063;
						if (result_155017 != null) { result_155017.push([v_155016[(i_155036 - 1)]]); } else { result_155017 = [[v_155016[(i_155036 - 1)]]]; };
						res_155063 += 1;
					}
			} while(false);
		} while(false);

	return result_155017;

}

function identity_166014(rows_166016, cols_166018) {
	var result_166019 = null;

		var cols0_166020 = cols_166018;
		if ((cols_166018 < 0)) {
		cols0_166020 = rows_166016;
		}
		
		L1: do {
			var i_166032 = 0;
			var res_166100 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_166100 <= rows_166016)) break L3;
						i_166032 = res_166100;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_166019 != null) { result_166019.push(Tmp4); } else { result_166019 = [Tmp4]; };
						L5: do {
							var j_166069 = 0;
							var res_166094 = 1;
							L6: do {
									L7: while (true) {
									if (!(res_166094 <= cols0_166020)) break L7;
										j_166069 = res_166094;
										if ((i_166032 == j_166069)) {
										if (result_166019[(i_166032 - 1)] != null) { result_166019[(i_166032 - 1)].push(1.0000000000000000e+00); } else { result_166019[(i_166032 - 1)] = [1.0000000000000000e+00]; };
										}
										else {
										if (result_166019[(i_166032 - 1)] != null) { result_166019[(i_166032 - 1)].push(0.0); } else { result_166019[(i_166032 - 1)] = [0.0]; };
										}
										
										res_166094 += 1;
									}
							} while(false);
						} while(false);
						res_166100 += 1;
					}
			} while(false);
		} while(false);

	return result_166019;

}

function rows_157414(a_157416) {
	var result_157417 = 0;

		result_157417 = (a_157416 != null ? a_157416.length : 0);

	return result_157417;

}

function hstack_167014(matrices_167017) {
	var result_167018 = null;

		L1: do {
			var k_167036 = 0;
			var colontmp__167300 = 0;
			colontmp__167300 = ((matrices_167017 != null ? matrices_167017.length : 0) - 1);
			var res_167303 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_167303 <= colontmp__167300)) break L3;
						k_167036 = res_167303;
						res_167303 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var r_167212 = 0;
			var colontmp__167320 = 0;
			colontmp__167320 = (rows_157414(matrices_167017[0]) - 1);
			var res_167323 = 0;
			L5: do {
					L6: while (true) {
					if (!(res_167323 <= colontmp__167320)) break L6;
						r_167212 = res_167323;
						var Tmp7 = nimCopy(null, [], NTI148068);
						if (result_167018 != null) { result_167018.push(Tmp7); } else { result_167018 = [Tmp7]; };
						L8: do {
							var a_167276 = null;
							var i_167319 = 0;
							L9: do {
									L10: while (true) {
									if (!(i_167319 < (matrices_167017 != null ? matrices_167017.length : 0))) break L10;
										a_167276 = matrices_167017[i_167319];
										L11: do {
											var c_167288 = 0;
											var colontmp__167310 = 0;
											colontmp__167310 = (cols_157438(a_167276) - 1);
											var res_167313 = 0;
											L12: do {
													L13: while (true) {
													if (!(res_167313 <= colontmp__167310)) break L13;
														c_167288 = res_167313;
														var Tmp14 = nimCopy(null, a_167276[r_167212][c_167288], NTI124);
														if (result_167018[r_167212] != null) { result_167018[r_167212].push(Tmp14); } else { result_167018[r_167212] = [Tmp14]; };
														res_167313 += 1;
													}
											} while(false);
										} while(false);
										i_167319 += 1;
									}
							} while(false);
						} while(false);
						res_167323 += 1;
					}
			} while(false);
		} while(false);

	return result_167018;

}

function HEX2FHEX3D_20255(x_20258, x_20258_Idx, y_20259) {
		x_20258[x_20258_Idx] = (x_20258[x_20258_Idx] / y_20259);

	
}

function gauss_jordan_168519(a_168521, b_168522) {
	var result_168523 = null;

	BeforeRet: do {
		var m_168526 = hstack_167014([a_168521, b_168522]);
		var c_168527 = 0.0;
		var maxrow_168529 = 0;
		L1: do {
			var y_168541 = 0;
			var colontmp__168684 = 0;
			colontmp__168684 = (rows_157414(m_168526) - 1);
			var res_168687 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_168687 <= colontmp__168684)) break L3;
						y_168541 = res_168687;
						maxrow_168529 = y_168541;
						L4: do {
							var y2_168550 = 0;
							var colontmp__168659 = 0;
							var colontmp__168660 = 0;
							colontmp__168659 = (y_168541 + 1);
							colontmp__168660 = (rows_157414(m_168526) - 1);
							var res_168663 = colontmp__168659;
							L5: do {
									L6: while (true) {
									if (!(res_168663 <= colontmp__168660)) break L6;
										y2_168550 = res_168663;
										if ((Math.abs(m_168526[maxrow_168529][y_168541]) < Math.abs(m_168526[y2_168550][y_168541]))) {
										maxrow_168529 = y2_168550;
										}
										
										res_168663 += 1;
									}
							} while(false);
						} while(false);
						var Tmp7 = m_168526[y_168541]; m_168526[y_168541] = m_168526[maxrow_168529]; m_168526[maxrow_168529] = Tmp7;						L8: do {
							var y2_168569 = 0;
							var colontmp__168676 = 0;
							var colontmp__168677 = 0;
							colontmp__168676 = (y_168541 + 1);
							colontmp__168677 = (rows_157414(m_168526) - 1);
							var res_168680 = colontmp__168676;
							L9: do {
									L10: while (true) {
									if (!(res_168680 <= colontmp__168677)) break L10;
										y2_168569 = res_168680;
										c_168527 = (m_168526[y2_168569][y_168541] / m_168526[y_168541][y_168541]);
										L11: do {
											var x_168578 = 0;
											var colontmp__168669 = 0;
											colontmp__168669 = (cols_157438(m_168526) - 1);
											var res_168672 = y_168541;
											L12: do {
													L13: while (true) {
													if (!(res_168672 <= colontmp__168669)) break L13;
														x_168578 = res_168672;
														HEX2DHEX3D_168580(m_168526[y2_168569], x_168578, (m_168526[y_168541][x_168578] * c_168527));
														res_168672 += 1;
													}
											} while(false);
										} while(false);
										res_168680 += 1;
									}
							} while(false);
						} while(false);
						res_168687 += 1;
					}
			} while(false);
		} while(false);
		var y_168602 = (rows_157414(m_168526) - 1);
		var x0_168604 = 0;
		L14: do {
				L15: while (true) {
				if (!(0 <= y_168602)) break L15;
					c_168527 = m_168526[y_168602][y_168602];
					L16: do {
						var y2_168617 = 0;
						var colontmp__168694 = 0;
						colontmp__168694 = (y_168602 - 1);
						var res_168697 = 0;
						L17: do {
								L18: while (true) {
								if (!(res_168697 <= colontmp__168694)) break L18;
									y2_168617 = res_168697;
									x0_168604 = (cols_157438(m_168526) - 1);
									L19: do {
											L20: while (true) {
											if (!((y_168602 - 1) < x0_168604)) break L20;
												HEX2DHEX3D_168580(m_168526[y2_168617], x0_168604, ((m_168526[y_168602][x0_168604] * m_168526[y2_168617][y_168602]) / c_168527));
												x0_168604 -= 1;
											}
									} while(false);
									res_168697 += 1;
								}
						} while(false);
					} while(false);
					HEX2FHEX3D_20255(m_168526[y_168602], y_168602, c_168527);
					L21: do {
						var x_168646 = 0;
						var colontmp__168702 = 0;
						var colontmp__168703 = 0;
						colontmp__168702 = rows_157414(m_168526);
						colontmp__168703 = (cols_157438(m_168526) - 1);
						var res_168706 = colontmp__168702;
						L22: do {
								L23: while (true) {
								if (!(res_168706 <= colontmp__168703)) break L23;
									x_168646 = res_168706;
									HEX2FHEX3D_20255(m_168526[y_168602], x_168646, c_168527);
									res_168706 += 1;
								}
						} while(false);
					} while(false);
					y_168602 -= 1;
				}
		} while(false);
		result_168523 = nimCopy(null, m_168526, NTI148067);
		break BeforeRet;
	} while (false);

	return result_168523;

}

function inverse_168723(a_168725) {
	var result_168726 = null;

		var b_168727 = identity_166014(rows_157414(a_168725), cols_157438(a_168725));
		var c_168728 = gauss_jordan_168519(a_168725, b_168727);
		L1: do {
			var i_168740 = 0;
			var colontmp__168795 = 0;
			colontmp__168795 = (rows_157414(a_168725) - 1);
			var res_168798 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_168798 <= colontmp__168795)) break L3;
						i_168740 = res_168798;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_168726 != null) { result_168726.push(Tmp4); } else { result_168726 = [Tmp4]; };
						L5: do {
							var j_168774 = 0;
							var colontmp__168787 = 0;
							var colontmp__168788 = 0;
							colontmp__168787 = cols_157438(a_168725);
							colontmp__168788 = (cols_157438(c_168728) - 1);
							var res_168791 = colontmp__168787;
							L6: do {
									L7: while (true) {
									if (!(res_168791 <= colontmp__168788)) break L7;
										j_168774 = res_168791;
										var Tmp8 = nimCopy(null, c_168728[i_168740][j_168774], NTI124);
										if (result_168726[i_168740] != null) { result_168726[i_168740].push(Tmp8); } else { result_168726[i_168740] = [Tmp8]; };
										res_168791 += 1;
									}
							} while(false);
						} while(false);
						res_168798 += 1;
					}
			} while(false);
		} while(false);

	return result_168726;

}

function standard_matrix_product_159614(a_159616, b_159617) {
	var result_159618 = null;

		var n_159808 = (a_159616 != null ? a_159616.length : 0);
		L1: do {
			var i_159832 = 0;
			var colontmp__159957 = 0;
			colontmp__159957 = (a_159616 != null ? (a_159616.length-1) : -1);
			var res_159960 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_159960 <= colontmp__159957)) break L3;
						i_159832 = res_159960;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_159618 != null) { result_159618.push(Tmp4); } else { result_159618 = [Tmp4]; };
						L5: do {
							var j_159895 = 0;
							var colontmp__159950 = 0;
							colontmp__159950 = (b_159617[0] != null ? (b_159617[0].length-1) : -1);
							var res_159953 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_159953 <= colontmp__159950)) break L7;
										j_159895 = res_159953;
										if (result_159618[i_159832] != null) { result_159618[i_159832].push(0.0); } else { result_159618[i_159832] = [0.0]; };
										L8: do {
											var k_159929 = 0;
											var colontmp__159943 = 0;
											colontmp__159943 = (b_159617 != null ? (b_159617.length-1) : -1);
											var res_159946 = 0;
											L9: do {
													L10: while (true) {
													if (!(res_159946 <= colontmp__159943)) break L10;
														k_159929 = res_159946;
														HEX2BHEX3D_44127(result_159618[i_159832], j_159895, (a_159616[i_159832][k_159929] * b_159617[k_159929][j_159895]));
														res_159946 += 1;
													}
											} while(false);
										} while(false);
										res_159953 += 1;
									}
							} while(false);
						} while(false);
						res_159960 += 1;
					}
			} while(false);
		} while(false);

	return result_159618;

}

function multiply_159977(a_159979, b_159980) {
	var result_159981 = null;

		result_159981 = nimCopy(null, standard_matrix_product_159614(a_159979, b_159980), NTI148067);

	return result_159981;

}

function HEX2A_159995(a_159997, b_159998) {
	var result_159999 = null;

		result_159999 = nimCopy(null, multiply_159977(a_159997, b_159998), NTI148067);

	return result_159999;

}

function transpose_166814(a_166816) {
	var result_166817 = null;

		L1: do {
			var q_166855 = 0;
			var colontmp__166924 = 0;
			colontmp__166924 = (a_166816[0] != null ? (a_166816[0].length-1) : -1);
			var res_166927 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_166927 <= colontmp__166924)) break L3;
						q_166855 = res_166927;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_166817 != null) { result_166817.push(Tmp4); } else { result_166817 = [Tmp4]; };
						L5: do {
							var k_166904 = 0;
							var colontmp__166917 = 0;
							colontmp__166917 = (a_166816 != null ? (a_166816.length-1) : -1);
							var res_166920 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_166920 <= colontmp__166917)) break L7;
										k_166904 = res_166920;
										var Tmp8 = nimCopy(null, a_166816[k_166904][q_166855], NTI124);
										if (result_166817[q_166855] != null) { result_166817[q_166855].push(Tmp8); } else { result_166817[q_166855] = [Tmp8]; };
										res_166920 += 1;
									}
							} while(false);
						} while(false);
						res_166927 += 1;
					}
			} while(false);
		} while(false);

	return result_166817;

}

function t_166944(a_166946) {
	var result_166947 = null;

		result_166947 = nimCopy(null, transpose_166814(a_166946), NTI148067);

	return result_166947;

}

function subtract_157814(a_157816, b_157817) {
	var result_157818 = null;

		L1: do {
			var k_158224 = 0;
			var colontmp__158307 = 0;
			colontmp__158307 = (a_157816 != null ? (a_157816.length-1) : -1);
			var res_158310 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_158310 <= colontmp__158307)) break L3;
						k_158224 = res_158310;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_157818 != null) { result_157818.push(Tmp4); } else { result_157818 = [Tmp4]; };
						L5: do {
							var q_158287 = 0;
							var colontmp__158300 = 0;
							colontmp__158300 = (a_157816[0] != null ? (a_157816[0].length-1) : -1);
							var res_158303 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_158303 <= colontmp__158300)) break L7;
										q_158287 = res_158303;
										if (result_157818[k_158224] != null) { result_157818[k_158224].push((a_157816[k_158224][q_158287] - b_157817[k_158224][q_158287])); } else { result_157818[k_158224] = [(a_157816[k_158224][q_158287] - b_157817[k_158224][q_158287])]; };
										res_158303 += 1;
									}
							} while(false);
						} while(false);
						res_158310 += 1;
					}
			} while(false);
		} while(false);

	return result_157818;

}

function HEX2D_158363(a_158365, b_158366) {
	var result_158367 = null;

		result_158367 = nimCopy(null, subtract_157814(a_158365, b_158366), NTI148067);

	return result_158367;

}

function norm_153214(a_153216, p_153217) {
	var result_153218 = [0.0];

		L1: do {
			var k_153242 = 0;
			var colontmp__153254 = 0;
			colontmp__153254 = (a_153216 != null ? (a_153216.length-1) : -1);
			var res_153257 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_153257 <= colontmp__153254)) break L3;
						k_153242 = res_153257;
						HEX2BHEX3D_44127(result_153218, 0, Math.pow(a_153216[k_153242], p_153217));
						res_153257 += 1;
					}
			} while(false);
		} while(false);
		result_153218[0] = Math.pow(result_153218[0], (1.0000000000000000e+00 / p_153217));

	return result_153218[0];

}

function wise_multiply_159127(a_159129, b_159130) {
	var result_159131 = null;

		L1: do {
			var k_159155 = 0;
			var colontmp__159238 = 0;
			colontmp__159238 = (a_159129 != null ? (a_159129.length-1) : -1);
			var res_159241 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_159241 <= colontmp__159238)) break L3;
						k_159155 = res_159241;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_159131 != null) { result_159131.push(Tmp4); } else { result_159131 = [Tmp4]; };
						L5: do {
							var q_159218 = 0;
							var colontmp__159231 = 0;
							colontmp__159231 = (a_159129[0] != null ? (a_159129[0].length-1) : -1);
							var res_159234 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_159234 <= colontmp__159231)) break L7;
										q_159218 = res_159234;
										if (result_159131[k_159155] != null) { result_159131[k_159155].push((a_159129[k_159155][q_159218] * b_159130)); } else { result_159131[k_159155] = [(a_159129[k_159155][q_159218] * b_159130)]; };
										res_159234 += 1;
									}
							} while(false);
						} while(false);
						res_159241 += 1;
					}
			} while(false);
		} while(false);

	return result_159131;

}

function wise_multiply_159258(a_159260, b_159261) {
	var result_159262 = null;

		result_159262 = nimCopy(null, wise_multiply_159127(b_159261, a_159260), NTI148067);

	return result_159262;

}

function HEX2A_159384(a_159386, b_159387) {
	var result_159388 = null;

		result_159388 = nimCopy(null, wise_multiply_159258(a_159386, b_159387), NTI148067);

	return result_159388;

}

function pow_153856(a_153858, b_153859) {
	var result_153860 = null;

		L1: do {
			var k_153884 = 0;
			var colontmp__153896 = 0;
			colontmp__153896 = (a_153858 != null ? (a_153858.length-1) : -1);
			var res_153899 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_153899 <= colontmp__153896)) break L3;
						k_153884 = res_153899;
						if (result_153860 != null) { result_153860.push(Math.pow(a_153858[k_153884], b_153859)); } else { result_153860 = [Math.pow(a_153858[k_153884], b_153859)]; };
						res_153899 += 1;
					}
			} while(false);
		} while(false);

	return result_153860;

}

function HEX2EHEX5E_153952(a_153954, b_153955) {
	var result_153956 = null;

		result_153956 = nimCopy(null, pow_153856(a_153954, b_153955), NTI148064);

	return result_153956;

}

function constant_vector_154014(cols_154016, constant_154017) {
	var result_154018 = null;

		L1: do {
			var i_154030 = 0;
			var res_154044 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_154044 <= cols_154016)) break L3;
						i_154030 = res_154044;
						var Tmp4 = nimCopy(null, constant_154017, NTI124);
						if (result_154018 != null) { result_154018.push(Tmp4); } else { result_154018 = [Tmp4]; };
						res_154044 += 1;
					}
			} while(false);
		} while(false);

	return result_154018;

}

function zeros_154061(col_154063) {
	var result_154064 = null;

		result_154064 = nimCopy(null, constant_vector_154014(col_154063, 0.0), NTI148064);

	return result_154064;

}

function diag_157614(a_157616) {
	var result_157617 = null;

		result_157617 = nimCopy(null, zeros_154061(rows_157414(a_157616)), NTI148064);
		L1: do {
			var i_157629 = 0;
			var colontmp__157631 = 0;
			colontmp__157631 = (rows_157414(a_157616) - 1);
			var res_157634 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_157634 <= colontmp__157631)) break L3;
						i_157629 = res_157634;
						result_157617[i_157629] = a_157616[i_157629][i_157629];
						res_157634 += 1;
					}
			} while(false);
		} while(false);

	return result_157617;

}

function any_val_151414(a_151416, true_val_151417) {
	var result_151418 = false;

	BeforeRet: do {
		L1: do {
			var k_151442 = 0;
			var colontmp__151444 = 0;
			colontmp__151444 = (a_151416 != null ? (a_151416.length-1) : -1);
			var res_151447 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_151447 <= colontmp__151444)) break L3;
						k_151442 = res_151447;
						if ((a_151416[k_151442] == true_val_151417)) {
						result_151418 = true;
						break BeforeRet;
						}
						
						res_151447 += 1;
					}
			} while(false);
		} while(false);
		result_151418 = false;
		break BeforeRet;
	} while (false);

	return result_151418;

}

function subtract_149014(a_149016, b_149017) {
	var result_149018 = null;

		L1: do {
			var k_149224 = 0;
			var colontmp__149236 = 0;
			colontmp__149236 = (a_149016 != null ? (a_149016.length-1) : -1);
			var res_149239 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_149239 <= colontmp__149236)) break L3;
						k_149224 = res_149239;
						if (result_149018 != null) { result_149018.push((a_149016[k_149224] - b_149017[k_149224])); } else { result_149018 = [(a_149016[k_149224] - b_149017[k_149224])]; };
						res_149239 += 1;
					}
			} while(false);
		} while(false);

	return result_149018;

}

function HEX2D_149292(a_149294, b_149295) {
	var result_149296 = null;

		result_149296 = nimCopy(null, subtract_149014(a_149294, b_149295), NTI148064);

	return result_149296;

}

function divide_150456(a_150458, b_150459) {
	var result_150460 = null;

		L1: do {
			var k_150484 = 0;
			var colontmp__150496 = 0;
			colontmp__150496 = (a_150458 != null ? (a_150458.length-1) : -1);
			var res_150499 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_150499 <= colontmp__150496)) break L3;
						k_150484 = res_150499;
						if (result_150460 != null) { result_150460.push((a_150458[k_150484] / b_150459)); } else { result_150460 = [(a_150458[k_150484] / b_150459)]; };
						res_150499 += 1;
					}
			} while(false);
		} while(false);

	return result_150460;

}

function HEX2F_150594(a_150596, b_150597) {
	var result_150598 = null;

		result_150598 = nimCopy(null, divide_150456(a_150596, b_150597), NTI148064);

	return result_150598;

}

function sum_160414(a_160416, axis_160417) {
	var result_160418 = [null];

		if ((axis_160417 == 0)) {
		L1: do {
			var c_160456 = 0;
			var colontmp__160592 = 0;
			colontmp__160592 = (a_160416[0] != null ? (a_160416[0].length-1) : -1);
			var res_160595 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_160595 <= colontmp__160592)) break L3;
						c_160456 = res_160595;
						if (result_160418[0] != null) { result_160418[0].push(0.0); } else { result_160418[0] = [0.0]; };
						L4: do {
							var r_160490 = 0;
							var colontmp__160585 = 0;
							colontmp__160585 = (a_160416 != null ? (a_160416.length-1) : -1);
							var res_160588 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_160588 <= colontmp__160585)) break L6;
										r_160490 = res_160588;
										HEX2BHEX3D_44127(result_160418[0], c_160456, a_160416[r_160490][c_160456]);
										res_160588 += 1;
									}
							} while(false);
						} while(false);
						res_160595 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			L7: do {
				var r_160524 = 0;
				var colontmp__160608 = 0;
				colontmp__160608 = (a_160416 != null ? (a_160416.length-1) : -1);
				var res_160611 = 0;
				L8: do {
						L9: while (true) {
						if (!(res_160611 <= colontmp__160608)) break L9;
							r_160524 = res_160611;
							if (result_160418[0] != null) { result_160418[0].push(0.0); } else { result_160418[0] = [0.0]; };
							L10: do {
								var c_160572 = 0;
								var colontmp__160601 = 0;
								colontmp__160601 = (a_160416[0] != null ? (a_160416[0].length-1) : -1);
								var res_160604 = 0;
								L11: do {
										L12: while (true) {
										if (!(res_160604 <= colontmp__160601)) break L12;
											c_160572 = res_160604;
											HEX2BHEX3D_44127(result_160418[0], r_160524, a_160416[r_160524][c_160572]);
											res_160604 += 1;
										}
								} while(false);
							} while(false);
							res_160611 += 1;
						}
				} while(false);
			} while(false);
		}
		

	return result_160418[0];

}

function mean_161814(a_161816, axis_161817) {
	var result_161818 = null;

	BeforeRet: do {
		if ((axis_161817 == 0)) {
		result_161818 = nimCopy(null, HEX2F_150594(sum_160414(a_161816, axis_161817), cols_157438(a_161816)), NTI148064);
		break BeforeRet;
		}
		
		result_161818 = nimCopy(null, HEX2F_150594(sum_160414(a_161816, axis_161817), rows_157414(a_161816)), NTI148064);
		break BeforeRet;
	} while (false);

	return result_161818;

}

function pow_161327(a_161329, b_161330) {
	var result_161331 = null;

		L1: do {
			var k_161355 = 0;
			var colontmp__161438 = 0;
			colontmp__161438 = (a_161329 != null ? (a_161329.length-1) : -1);
			var res_161441 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_161441 <= colontmp__161438)) break L3;
						k_161355 = res_161441;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_161331 != null) { result_161331.push(Tmp4); } else { result_161331 = [Tmp4]; };
						L5: do {
							var q_161418 = 0;
							var colontmp__161431 = 0;
							colontmp__161431 = (a_161329[0] != null ? (a_161329[0].length-1) : -1);
							var res_161434 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_161434 <= colontmp__161431)) break L7;
										q_161418 = res_161434;
										if (result_161331[k_161355] != null) { result_161331[k_161355].push(Math.pow(a_161329[k_161355][q_161418], b_161330)); } else { result_161331[k_161355] = [Math.pow(a_161329[k_161355][q_161418], b_161330)]; };
										res_161434 += 1;
									}
							} while(false);
						} while(false);
						res_161441 += 1;
					}
			} while(false);
		} while(false);

	return result_161331;

}

function HEX2EHEX5E_161494(a_161496, b_161497) {
	var result_161498 = null;

		result_161498 = nimCopy(null, pow_161327(a_161496, b_161497), NTI148067);

	return result_161498;

}

function wise_variance_162034(a_162036, axis_162037) {
	var result_162038 = null;

	BeforeRet: do {
		result_162038 = nimCopy(null, HEX2EHEX5E_153952(HEX2D_149292(mean_161814(HEX2EHEX5E_161494(a_162036, 2.0000000000000000e+00), axis_162037), mean_161814(a_162036, axis_162037)), 2.0000000000000000e+00), NTI148064);
		break BeforeRet;
	} while (false);

	return result_162038;

}

function wise_standard_deviation_162235(a_162237, axis_162238) {
	var result_162239 = null;

	BeforeRet: do {
		result_162239 = nimCopy(null, HEX2EHEX5E_153952(wise_variance_162034(a_162237, axis_162238), 5.0000000000000000e-01), NTI148064);
		break BeforeRet;
	} while (false);

	return result_162239;

}

function addition_148656(a_148658, b_148659) {
	var result_148660 = null;

		L1: do {
			var k_148684 = 0;
			var colontmp__148696 = 0;
			colontmp__148696 = (a_148658 != null ? (a_148658.length-1) : -1);
			var res_148699 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_148699 <= colontmp__148696)) break L3;
						k_148684 = res_148699;
						if (result_148660 != null) { result_148660.push((a_148658[k_148684] + b_148659)); } else { result_148660 = [(a_148658[k_148684] + b_148659)]; };
						res_148699 += 1;
					}
			} while(false);
		} while(false);

	return result_148660;

}

function subtract_149256(a_149258, b_149259) {
	var result_149260 = null;

		result_149260 = nimCopy(null, addition_148656(a_149258, -(b_149259)), NTI148064);

	return result_149260;

}

function HEX2D_149310(a_149312, b_149313) {
	var result_149314 = null;

		result_149314 = nimCopy(null, subtract_149256(a_149312, b_149313), NTI148064);

	return result_149314;

}

function ravel_168014(a_168016) {
	var result_168017 = null;

		L1: do {
			var r_168029 = 0;
			var colontmp__168061 = 0;
			colontmp__168061 = (rows_157414(a_168016) - 1);
			var res_168064 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_168064 <= colontmp__168061)) break L3;
						r_168029 = res_168064;
						L4: do {
							var c_168041 = 0;
							var colontmp__168054 = 0;
							colontmp__168054 = (cols_157438(a_168016) - 1);
							var res_168057 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_168057 <= colontmp__168054)) break L6;
										c_168041 = res_168057;
										var Tmp7 = nimCopy(null, a_168016[r_168029][c_168041], NTI124);
										if (result_168017 != null) { result_168017.push(Tmp7); } else { result_168017 = [Tmp7]; };
										res_168057 += 1;
									}
							} while(false);
						} while(false);
						res_168064 += 1;
					}
			} while(false);
		} while(false);

	return result_168017;

}

function mean_155214(a_155216, axis_155217) {
	var result_155218 = [0.0];

		L1: do {
			var k_155424 = 0;
			var colontmp__155443 = 0;
			colontmp__155443 = (a_155216 != null ? (a_155216.length-1) : -1);
			var res_155446 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_155446 <= colontmp__155443)) break L3;
						k_155424 = res_155446;
						HEX2BHEX3D_44127(result_155218, 0, a_155216[k_155424]);
						res_155446 += 1;
					}
			} while(false);
		} while(false);
		result_155218[0] = (result_155218[0] / (a_155216 != null ? a_155216.length : 0));

	return result_155218[0];

}

function loglikelihood_198964(d_198966, y_198967) {
	var result_198968 = [0.0];

		L1: do {
			var yi_198977 = 0.0;
			var i_198991 = 0;
			var l_198993 = (y_198967 != null ? y_198967.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_198991 < l_198993)) break L3;
						yi_198977 = y_198967[i_198991];
						HEX2BHEX3D_44127(result_198968, 0, (((-5.0000000000000000e-01 * Math.log(6.2831853071795862e+00)) - Math.log(d_198966.std)) - (Math.pow((yi_198977 - d_198966.mean), 2.0000000000000000e+00) / ((2.0000000000000000e+00 * d_198966.std) * d_198966.std))));
						i_198991 += 1;
					}
			} while(false);
		} while(false);

	return result_198968[0];

}

function normal_198031(mean_198033, std_198034) {
	var result_198035 = null;

		result_198035 = {mean: 0.0, std: 0.0};
		result_198035.mean = mean_198033;
		result_198035.std = std_198034;

	return result_198035;

}

function scaled_shifted_208959(distribution_208963, location_208965, scale_208967) {
	var result_208969 = null;

		result_208969 = {distribution: null, location: 0.0, scale: 0.0};
		result_208969.distribution = distribution_208963;
		result_208969.location = location_208965;
		result_208969.scale = scale_208967;

	return result_208969;

}

function htest_score_209014(distribution_209018, score_209020, test_type_209022) {
	var result_209024 = null;

		result_209024 = {distribution: null, test_score: 0.0, test_type: 0};
		result_209024.distribution = distribution_209018;
		result_209024.test_score = score_209020;
		result_209024.test_type = test_type_209022;

	return result_209024;

}

function shifted_estimator_208947(distribution_208951, location_208953, scale_208955) {
	var result_208957 = null;

		var est_distribution_208991 = scaled_shifted_208959(distribution_208951, location_208953, scale_208955);
		var est_null_distribution_209003 = scaled_shifted_208959(distribution_208951, 0.0, scale_208955);
		result_208957 = {distribution: null, hypothesis_test: null};
		result_208957.distribution = est_distribution_208991;
		result_208957.hypothesis_test = htest_score_209014(est_null_distribution_209003, location_208953, 0);

	return result_208957;

}

function invchisquare_200866(dof_200868, scale_200869) {
		var Tmp1;

	var result_200870 = null;

		result_200870 = {dof: 0.0, scale: 0.0};
		result_200870.dof = dof_200868;
		if ((classify_29030(scale_200869) == 4)) {
		Tmp1 = (1.0000000000000000e+00 / dof_200868);
		}
		else {
		Tmp1 = scale_200869;
		}
		
		result_200870.scale = Tmp1;

	return result_200870;

}

function new_seq_209445(len_209449) {
	var result_209451 = null;

		result_209451 = new Array(len_209449); for (var i=0;i<len_209449;++i) {result_209451[i]=null;}
	return result_209451;

}

function len_193237(x_193243) {
	var result_193244 = 0;

		result_193244 = nimMax(0, ((x_193243.b - x_193243.a) + 1));

	return result_193244;

}

function scaled_shifted_209113(distribution_209117, location_209119, scale_209121) {
	var result_209123 = null;

		result_209123 = {distribution: null, location: 0.0, scale: 0.0};
		result_209123.distribution = distribution_209117;
		result_209123.location = location_209119;
		result_209123.scale = scale_209121;

	return result_209123;

}

function htest_score_209168(distribution_209172, score_209174, test_type_209176) {
	var result_209178 = null;

		result_209178 = {distribution: null, test_score: 0.0, test_type: 0};
		result_209178.distribution = distribution_209172;
		result_209178.test_score = score_209174;
		result_209178.test_type = test_type_209176;

	return result_209178;

}

function shifted_estimator_209101(distribution_209105, location_209107, scale_209109) {
	var result_209111 = null;

		var est_distribution_209145 = scaled_shifted_209113(distribution_209105, location_209107, scale_209109);
		var est_null_distribution_209157 = scaled_shifted_209113(distribution_209105, 0.0, scale_209109);
		result_209111 = {distribution: null, hypothesis_test: null};
		result_209111.distribution = est_distribution_209145;
		result_209111.hypothesis_test = htest_score_209168(est_null_distribution_209157, location_209107, 0);

	return result_209111;

}

function studentt_197693(dof_197695) {
	var result_197696 = null;

		result_197696 = {dof: 0};
		result_197696.dof = Math.trunc(dof_197695);

	return result_197696;

}

function htest_score_209511(distribution_209515, score_209517, test_type_209519) {
	var result_209521 = null;

		result_209521 = {distribution: null, test_score: 0.0, test_type: 0};
		result_209521.distribution = distribution_209515;
		result_209521.test_score = score_209517;
		result_209521.test_type = test_type_209519;

	return result_209521;

}

function central_f_201848(df1_201850, df2_201851) {
	var result_201852 = null;

		result_201852 = {df1: 0.0, df2: 0.0};
		result_201852.df1 = df1_201850;
		result_201852.df2 = df2_201851;

	return result_201852;

}

function new_seq_177621(len_177625) {
	var result_177627 = null;

		result_177627 = new Array(len_177625); for (var i=0;i<len_177625;++i) {result_177627[i]=null;}
	return result_177627;

}

function ols_model_208860(x_208862, y_208863, names_208880) {
			var Tmp1;
		var Tmp2;
		var Tmp3;
		var Tmp9;

	var result_208881 = null;

		result_208881 = {residuals: null, sum_squared_errors: 0.0, degrees_of_freedom: 0.0, variance_matrix_coefficients: null, include_intercept: false, loglikelihood: 0.0, R2: 0.0, adjustedR2: 0.0, beta_hat: null, coefficients: null, noise_variance: null, model_significance: null, feature_names: null};
			if (!(0 < (names_208880 != null ? names_208880.length : 0))) Tmp1 = false; else {				Tmp1 = !(((names_208880 != null ? names_208880.length : 0) == cols_157438(x_208862)));			}		if (Tmp1) {
		var e_208919 = null;
		e_208919 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_208919.message = nimCopy(null, makeNimstrLit("incorrect number of feature names"), NTI138);
		e_208919.parent = null;
		raiseException(e_208919, "ValueError");
		}
		
		var y_208928 = as_column_vector_155014(y_208863);
		var xp_x_208929 = inverse_168723(HEX2A_159995(t_166944(x_208862), x_208862));
		var beta_hat_208930 = HEX2A_159995(HEX2A_159995(xp_x_208929, t_166944(x_208862)), y_208928);
		var ypred_208931 = HEX2A_159995(x_208862, beta_hat_208930);
		var residuals_208932 = nimCopy(null, t_166944(HEX2D_158363(y_208928, ypred_208931))[0], NTI148068);
		var sse_208933 = HEX5E_148027(norm_153214(residuals_208932, 2.0000000000000000e+00), 2.0000000000000000e+00);
		var variance_normalization_factor_208934 = (((rows_157414(x_208862) - cols_157438(x_208862)) - 1) / (rows_157414(x_208862) - cols_157438(x_208862)));
		var s2_208935 = ((sse_208933 / ((rows_157414(x_208862) - cols_157438(x_208862)) - 1)) * variance_normalization_factor_208934);
		var var_beta_hat_208936 = HEX2A_159384(s2_208935, xp_x_208929);
		var estimate_std_208937 = HEX2EHEX5E_153952(diag_157614(var_beta_hat_208936), 5.0000000000000000e-01);
		var coefficients_208938 = nimCopy(null, t_166944(beta_hat_208930)[0], NTI148068);
		var include_intercept_208939 = any_val_151414(wise_standard_deviation_162235(x_208862, 0), 0.0);
		var total_model_variation_208941 = HEX5E_148027(norm_153214(HEX2D_149310(ravel_168014(ypred_208931), mean_155214(ravel_168014(ypred_208931), 0)), 2.0000000000000000e+00), 2.0000000000000000e+00);
		if (include_intercept_208939) {
		total_model_variation_208941 = HEX5E_148027(norm_153214(HEX2D_149310(ravel_168014(ypred_208931), mean_155214(y_208863, 0)), 2.0000000000000000e+00), 2.0000000000000000e+00);
		}
		else {
			total_model_variation_208941 = HEX5E_148027(norm_153214(HEX2D_149292(y_208863, residuals_208932), 2.0000000000000000e+00), 2.0000000000000000e+00);
		}
		
		if (include_intercept_208939) {
		Tmp2 = -1;
		}
		else {
		Tmp2 = 0;
		}
		
		var f_score_208944 = ((total_model_variation_208941 / (cols_157438(x_208862) + Tmp2)) / (sse_208933 / (rows_157414(x_208862) - cols_157438(x_208862))));
		result_208881.include_intercept = include_intercept_208939;
		result_208881.residuals = nimCopy(null, residuals_208932, NTI148068);
		result_208881.sum_squared_errors = sse_208933;
		result_208881.variance_matrix_coefficients = nimCopy(null, var_beta_hat_208936, NTI148067);
		result_208881.R2 = (total_model_variation_208941 / (total_model_variation_208941 + sse_208933));
		if (include_intercept_208939) {
		Tmp3 = -1;
		}
		else {
		Tmp3 = 0;
		}
		
		result_208881.adjustedR2 = (1.0000000000000000e+00 - (((rows_157414(x_208862) + Tmp3) / (rows_157414(x_208862) - cols_157438(x_208862))) * (1.0000000000000000e+00 - result_208881.R2)));
		result_208881.beta_hat = nimCopy(null, ravel_168014(beta_hat_208930), NTI148064);
		result_208881.loglikelihood = loglikelihood_198964(normal_198031(0.0, Math.sqrt(Math.abs(((sse_208933 * ((result_208881.degrees_of_freedom + 1.0000000000000000e-10) - 2.0000000000000000e+00)) / (rows_157414(x_208862) - cols_157438(x_208862)))))), residuals_208932);
		result_208881.degrees_of_freedom = (rows_157414(x_208862) - cols_157438(x_208862));
		result_208881.noise_variance = shifted_estimator_208947(invchisquare_200866((result_208881.degrees_of_freedom + 1.0000000000000000e-10), NaN), 0.0, ((sse_208933 * ((result_208881.degrees_of_freedom + 1.0000000000000000e-10) - 2.0000000000000000e+00)) / (rows_157414(x_208862) - cols_157438(x_208862))));
		L4: do {
			var HEX3Atmp_209409 = HEX2EHEX2E_57828(0, (estimate_std_208937 != null ? (estimate_std_208937.length-1) : -1));
			var i_209413 = 0;
			var result_209476 = new_seq_209445(len_193237(HEX3Atmp_209409));
			L5: do {
				var it_209484 = 0;
				L6: do {
					var x_210015 = 0;
					var colontmp__210017 = 0;
					var colontmp__210019 = 0;
					colontmp__210017 = HEX3Atmp_209409.a;
					colontmp__210019 = HEX3Atmp_209409.b;
					var res_210021 = colontmp__210017;
					L7: do {
							L8: while (true) {
							if (!(res_210021 <= colontmp__210019)) break L8;
								x_210015 = res_210021;
								it_209484 = x_210015;
								result_209476[i_209413] = shifted_estimator_209101(studentt_197693(result_208881.degrees_of_freedom), coefficients_208938[it_209484], estimate_std_208937[it_209484]);
								i_209413 += 1;
								res_210021 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
		} while(false);
		result_208881.coefficients = nimCopy(null, result_209476, NTI209450);
		if (include_intercept_208939) {
		Tmp9 = -1;
		}
		else {
		Tmp9 = 0;
		}
		
		var ms_model_dof_209508 = (cols_157438(x_208862) + Tmp9);
		var ms_residual_dof_209509 = (rows_157414(x_208862) - cols_157438(x_208862));
		result_208881.model_significance = htest_score_209511(central_f_201848(ms_model_dof_209508, ms_residual_dof_209509), ((total_model_variation_208941 / ms_model_dof_209508) / (sse_208933 / ms_residual_dof_209509)), 1);
		if ((0 < (names_208880 != null ? names_208880.length : 0))) {
		result_208881.feature_names = nimCopy(null, names_208880, NTI208864);
		}
		else {
			L10: do {
				var HEX3Atmp_209809 = HEX2EHEX2E_57828(1, cols_157438(x_208862));
				var i_209813 = 0;
				var result_209852 = new_seq_177621(len_193237(HEX3Atmp_209809));
				L11: do {
					var it_209860 = 0;
					L12: do {
						var x_210030 = 0;
						var colontmp__210032 = 0;
						var colontmp__210034 = 0;
						colontmp__210032 = HEX3Atmp_209809.a;
						colontmp__210034 = HEX3Atmp_209809.b;
						var res_210036 = colontmp__210032;
						L13: do {
								L14: while (true) {
								if (!(res_210036 <= colontmp__210034)) break L14;
									x_210030 = res_210036;
									it_209860 = x_210030;
									var fmt_res_209865 = mnewString(0);
									if (fmt_res_209865 != null) { fmt_res_209865 = (fmt_res_209865).concat(makeNimstrLit("x")); } else { fmt_res_209865 = makeNimstrLit("x"); };
									if (fmt_res_209865 != null) { fmt_res_209865 = (fmt_res_209865).concat(cstrToNimstr((it_209860)+"")); } else { fmt_res_209865 = cstrToNimstr((it_209860)+"").slice(); };
									result_209852[i_209813] = nimCopy(null, fmt_res_209865, NTI138);
									i_209813 += 1;
									res_210036 += 1;
								}
						} while(false);
					} while(false);
				} while(false);
			} while(false);
			result_208881.feature_names = nimCopy(null, result_209852, NTI177626);
		}
		

	return result_208881;

}

function wise_multiply_158614(a_158616, b_158617) {
	var result_158618 = null;

		L1: do {
			var k_159024 = 0;
			var colontmp__159107 = 0;
			colontmp__159107 = (a_158616 != null ? (a_158616.length-1) : -1);
			var res_159110 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_159110 <= colontmp__159107)) break L3;
						k_159024 = res_159110;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_158618 != null) { result_158618.push(Tmp4); } else { result_158618 = [Tmp4]; };
						L5: do {
							var q_159087 = 0;
							var colontmp__159100 = 0;
							colontmp__159100 = (a_158616[0] != null ? (a_158616[0].length-1) : -1);
							var res_159103 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_159103 <= colontmp__159100)) break L7;
										q_159087 = res_159103;
										if (result_158618[k_159024] != null) { result_158618[k_159024].push((a_158616[k_159024][q_159087] * b_158617[k_159024][q_159087])); } else { result_158618[k_159024] = [(a_158616[k_159024][q_159087] * b_158617[k_159024][q_159087])]; };
										res_159103 += 1;
									}
							} while(false);
						} while(false);
						res_159110 += 1;
					}
			} while(false);
		} while(false);

	return result_158618;

}

function HEX2EHEX2A_159276(a_159278, b_159279) {
	var result_159280 = null;

		result_159280 = nimCopy(null, wise_multiply_158614(a_159278, b_159279), NTI148067);

	return result_159280;

}

function predict_231035(model_231037, x_231038) {
	var result_231039 = null;

		result_231039 = {predictions: null, degrees_of_freedom: 0.0, prediction_means: null};
		var yhat_231048 = ravel_168014(HEX2A_159995(x_231038, as_column_vector_155014(model_231037.beta_hat)));
		var yvar_231050 = sum_160414(HEX2EHEX2A_159276(HEX2A_159995(x_231038, model_231037.variance_matrix_coefficients), x_231038), 1);
		var estimate_std_231051 = HEX2EHEX5E_153952(yvar_231050, 5.0000000000000000e-01);
		result_231039.prediction_means = nimCopy(null, yhat_231048, NTI148064);
		result_231039.degrees_of_freedom = ((estimate_std_231051 != null ? estimate_std_231051.length : 0) - 1);
		L1: do {
			var HEX3Atmp_231209 = HEX2EHEX2E_57828(0, (estimate_std_231051 != null ? (estimate_std_231051.length-1) : -1));
			var i_231213 = 0;
			var result_231252 = new_seq_209445(len_193237(HEX3Atmp_231209));
			L2: do {
				var it_231260 = 0;
				L3: do {
					var x_231288 = 0;
					var colontmp__231290 = 0;
					var colontmp__231292 = 0;
					colontmp__231290 = HEX3Atmp_231209.a;
					colontmp__231292 = HEX3Atmp_231209.b;
					var res_231294 = colontmp__231290;
					L4: do {
							L5: while (true) {
							if (!(res_231294 <= colontmp__231292)) break L5;
								x_231288 = res_231294;
								it_231260 = x_231288;
								result_231252[i_231213] = shifted_estimator_209101(studentt_197693(result_231039.degrees_of_freedom), yhat_231048[it_231260], estimate_std_231051[it_231260]);
								i_231213 += 1;
								res_231294 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
		} while(false);
		result_231039.predictions = nimCopy(null, result_231252, NTI209450);

	return result_231039;

}

function data_transform_207230(x_207232, dt_207233) {
	var result_207234 = null;

		L1: do {
			var r_207246 = 0;
			var colontmp__207258 = 0;
			colontmp__207258 = rows_157414(x_207232);
			var res_207261 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_207261 <= colontmp__207258)) break L3;
						r_207246 = res_207261;
						if (result_207234 != null) { result_207234.push(dt_207233(x_207232[(r_207246 - 1)])); } else { result_207234 = [dt_207233(x_207232[(r_207246 - 1)])]; };
						res_207261 += 1;
					}
			} while(false);
		} while(false);

	return result_207234;

}

function add_154450(x_154456, x_154456_Idx, y_154459) {
		var xl_154467 = (x_154456[x_154456_Idx] != null ? x_154456[x_154456_Idx].length : 0);
		if (x_154456[x_154456_Idx].length < (xl_154467 + (y_154459 != null ? y_154459.length : 0))) { for (var i=x_154456[x_154456_Idx].length;i<(xl_154467 + (y_154459 != null ? y_154459.length : 0));++i) x_154456[x_154456_Idx].push(0.0); }
               else { x_154456[x_154456_Idx].length = (xl_154467 + (y_154459 != null ? y_154459.length : 0)); };
		L1: do {
			var i_154502 = 0;
			var colontmp__154504 = 0;
			colontmp__154504 = (y_154459 != null ? (y_154459.length-1) : -1);
			var res_154507 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_154507 <= colontmp__154504)) break L3;
						i_154502 = res_154507;
						x_154456[x_154456_Idx][(xl_154467 + i_154502)] = y_154459[i_154502];
						res_154507 += 1;
					}
			} while(false);
		} while(false);

	
}

function hstack_154619(a_154621, b_154622) {
	var result_154623 = [null];

		result_154623[0] = nimCopy(null, [], NTI154638);
		add_154450(result_154623, 0, []);
		L1: do {
			var c_154684 = 0;
			var colontmp__154707 = 0;
			colontmp__154707 = ((a_154621 != null ? a_154621.length : 0) - 1);
			var res_154710 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_154710 <= colontmp__154707)) break L3;
						c_154684 = res_154710;
						var Tmp4 = nimCopy(null, a_154621[c_154684], NTI124);
						if (result_154623[0] != null) { result_154623[0].push(Tmp4); } else { result_154623[0] = [Tmp4]; };
						res_154710 += 1;
					}
			} while(false);
		} while(false);
		var Tmp5 = nimCopy(null, b_154622, NTI124);
		if (result_154623[0] != null) { result_154623[0].push(Tmp5); } else { result_154623[0] = [Tmp5]; };

	return result_154623[0];

}

function ar1_232214(y_232216, include_mean_232217, feature_name_232218) {

		function HEX3Aanonymous_232314(x_232322) {
			var result_232327 = null;

				result_232327 = nimCopy(null, hstack_154619(x_232322, 1.0000000000000000e+00), NTI148064);

			return result_232327;

		}

	var result_232219 = null;

		var y_0_to_t_1_232266 = HEX5BHEX5D_208119(y_232216, HEX2EHEX2E_57828(0, ((y_232216 != null ? (y_232216.length-1) : -1) - 1)));
		var y_1_to_t_232313 = HEX5BHEX5D_208119(y_232216, HEX2EHEX2E_57828(1, (y_232216 != null ? (y_232216.length-1) : -1)));
		if (include_mean_232217) {
		result_232219 = ols_model_208860(data_transform_207230(as_column_vector_155014(y_0_to_t_1_232266), HEX3Aanonymous_232314), y_1_to_t_232313, [feature_name_232218]);
		}
		else {
			result_232219 = ols_model_208860(as_column_vector_155014(y_0_to_t_1_232266), y_1_to_t_232313, [feature_name_232218]);
		}
		

	return result_232219;

}

function mean_200681(d_200683) {
		var Tmp1;

	var result_200684 = 0.0;

	BeforeRet: do {
		if ((1.0000000000000000e+00 < d_200683.shape)) {
		Tmp1 = (d_200683.scale / (d_200683.shape - 1.0000000000000000e+00));
		}
		else {
		Tmp1 = NaN;
		}
		
		result_200684 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_200684;

}

function as_inv_gamma_201625(d_201627) {
	var result_201628 = null;

		result_201628 = {shape: (d_201627.dof / 2.0000000000000000e+00), scale: ((d_201627.dof * d_201627.scale) / 2.0000000000000000e+00)};

	return result_201628;

}

function mean_201697(d_201699) {
	var result_201700 = 0.0;

		result_201700 = mean_200681(as_inv_gamma_201625(d_201699));

	return result_201700;

}

function mean_218067(d_218072) {
	var result_218073 = 0.0;

		result_218073 = ((mean_201697(d_218072.distribution) * d_218072.scale) + d_218072.location);

	return result_218073;

}

function estimate_218048(d_218053) {
	var result_218054 = 0.0;

		result_218054 = mean_218067(d_218053.distribution);

	return result_218054;

}

function hstack_154414(vectors_154417) {
	var result_154418 = [null];

		result_154418[0] = nimCopy(null, [], NTI154433);
		add_154450(result_154418, 0, []);
		L1: do {
			var a_154563 = null;
			var i_154605 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_154605 < (vectors_154417 != null ? vectors_154417.length : 0))) break L3;
						a_154563 = vectors_154417[i_154605];
						L4: do {
							var c_154582 = 0;
							var colontmp__154596 = 0;
							colontmp__154596 = ((a_154563 != null ? a_154563.length : 0) - 1);
							var res_154599 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_154599 <= colontmp__154596)) break L6;
										c_154582 = res_154599;
										var Tmp7 = nimCopy(null, a_154563[c_154582], NTI124);
										if (result_154418[0] != null) { result_154418[0].push(Tmp7); } else { result_154418[0] = [Tmp7]; };
										res_154599 += 1;
									}
							} while(false);
						} while(false);
						i_154605 += 1;
					}
			} while(false);
		} while(false);

	return result_154418[0];

}

function model_candidate_244501(x_244503, y_244504, change_point_244505) {
	var result_244506 = null;

		result_244506 = {after_model: null, before_model: null, after_residual_model: null, before_residual_model: null, loglikelihood: 0.0, change_point_candidate: 0, parameters_mean: null, before_model_covariance_parameters: null, existence_change_point_hypothesis: null};
		var pre_x_244553 = add_intercept_207463(HEX5BHEX5D_208119(x_244503, HEX2EHEX2E_57828(0, change_point_244505)));
		var pre_y_244592 = HEX5BHEX5D_208119(y_244504, HEX2EHEX2E_57828(0, change_point_244505));
		var post_x_244637 = add_intercept_207463(HEX5BHEX5D_208119(x_244503, HEX2EHEX2E_57828((change_point_244505 + 1), (x_244503 != null ? (x_244503.length-1) : -1))));
		var post_y_244682 = HEX5BHEX5D_208119(y_244504, HEX2EHEX2E_57828((change_point_244505 + 1), (y_244504 != null ? (y_244504.length-1) : -1)));
		var pre_ols_model_244695 = ols_model_208860(pre_x_244553, pre_y_244592, [makeNimstrLit("beta1"), makeNimstrLit("beta0")]);
		var post_ols_model_244708 = ols_model_208860(post_x_244637, HEX2D_149292(post_y_244682, predict_231035(pre_ols_model_244695, post_x_244637).prediction_means), [makeNimstrLit("delta1"), makeNimstrLit("delta0")]);
		var pre_residual_ar_model_244709 = ar1_232214(pre_ols_model_244695.residuals, false, makeNimstrLit("phi0"));
		var post_residual_ar_model_244710 = ar1_232214(post_ols_model_244708.residuals, false, makeNimstrLit("phi1"));
		var likelihood_model_244817 = (loglikelihood_198964(normal_198031(0.0, Math.sqrt(estimate_218048(pre_residual_ar_model_244709.noise_variance))), pre_ols_model_244695.residuals) + loglikelihood_198964(normal_198031(0.0, Math.sqrt(estimate_218048(post_residual_ar_model_244710.noise_variance))), post_ols_model_244708.residuals));
		result_244506 = {before_model: pre_ols_model_244695, after_model: post_ols_model_244708, before_residual_model: pre_residual_ar_model_244709, after_residual_model: post_residual_ar_model_244710, loglikelihood: likelihood_model_244817, change_point_candidate: change_point_244505, parameters_mean: hstack_154414([pre_ols_model_244695.beta_hat, pre_residual_ar_model_244709.beta_hat, post_ols_model_244708.beta_hat, post_residual_ar_model_244710.beta_hat]), before_model_covariance_parameters: null, existence_change_point_hypothesis: null};

	return result_244506;

}

function data_transform_207278(x_207280, dt_207281) {
	var result_207282 = null;

		L1: do {
			var r_207294 = 0;
			var colontmp__207306 = 0;
			colontmp__207306 = (rows_157414(x_207280) - 1);
			var res_207309 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_207309 <= colontmp__207306)) break L3;
						r_207294 = res_207309;
						if (result_207282 != null) { result_207282.push(dt_207281(x_207280[r_207294], r_207294)); } else { result_207282 = [dt_207281(x_207280[r_207294], r_207294)]; };
						res_207309 += 1;
					}
			} while(false);
		} while(false);

	return result_207282;

}

function constant_matrix_166414(rows_166416, cols_166417, constant_166418) {
	var result_166419 = null;

		L1: do {
			var i_166431 = 0;
			var res_166489 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_166489 <= rows_166416)) break L3;
						i_166431 = res_166489;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (result_166419 != null) { result_166419.push(Tmp4); } else { result_166419 = [Tmp4]; };
						L5: do {
							var j_166468 = 0;
							var res_166483 = 1;
							L6: do {
									L7: while (true) {
									if (!(res_166483 <= cols_166417)) break L7;
										j_166468 = res_166483;
										var Tmp8 = nimCopy(null, constant_166418, NTI124);
										if (result_166419[(i_166431 - 1)] != null) { result_166419[(i_166431 - 1)].push(Tmp8); } else { result_166419[(i_166431 - 1)] = [Tmp8]; };
										res_166483 += 1;
									}
							} while(false);
						} while(false);
						res_166489 += 1;
					}
			} while(false);
		} while(false);

	return result_166419;

}

function ones_166524(row_166526, col_166527) {
	var result_166528 = null;

		result_166528 = nimCopy(null, constant_matrix_166414(row_166526, col_166527, 1.0000000000000000e+00), NTI148067);

	return result_166528;

}

function covariance_matrix_for_before_model_243964(model_243966, x_243967) {

		function HEX3Aanonymous_244080(x_244091, i_244093) {
				var Tmp1;
				var Tmp2;

			var result_244101 = null;

				if ((model_243966.change_point_candidate < i_244093)) {
				Tmp1 = x_244091[0];
				}
				else {
				Tmp1 = 0.0;
				}
				
				if ((model_243966.change_point_candidate < i_244093)) {
				Tmp2 = 1.0000000000000000e+00;
				}
				else {
				Tmp2 = 0.0;
				}
				
				result_244101 = nimCopy(null, [x_244091[0], 1.0000000000000000e+00, Tmp1, Tmp2], NTI244113);

			return result_244101;

		}

	var result_243968 = null;

	BeforeRet: do {
		var t_243976 = (x_243967 != null ? x_243967.length : 0);
		var phi_243978 = nimMin(Math.abs(model_243966.before_residual_model.beta_hat[0]), 9.9999000000000005e-01);
		var covariance_factor_244033 = (estimate_218048(model_243966.before_model.noise_variance) / (1.0000000000000000e+00 - HEX5E_148027(phi_243978, 2.0000000000000000e+00)));
		var x_244127 = data_transform_207278(as_column_vector_155014(HEX5BHEX5D_208119(x_243967, HEX2EHEX2E_57828(1, (x_243967 != null ? (x_243967.length-1) : -1)))), HEX3Aanonymous_244080);
		var covariance_approx_244216 = nimCopy(null, [], NTI244215);
		L1: do {
			var r_244229 = 0;
			var res_244452 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_244452 <= 2)) break L3;
						r_244229 = res_244452;
						var Tmp4 = nimCopy(null, [], NTI148068);
						if (covariance_approx_244216 != null) { covariance_approx_244216.push(Tmp4); } else { covariance_approx_244216 = [Tmp4]; };
						L5: do {
							var c_244267 = 0;
							var res_244446 = 0;
							L6: do {
									L7: while (true) {
									if (!(res_244446 <= 2)) break L7;
										c_244267 = res_244446;
										if (covariance_approx_244216[r_244229] != null) { covariance_approx_244216[r_244229].push((covariance_factor_244033 * HEX5E_148027(phi_243978, Math.abs(Math.trunc((c_244267 - r_244229) % t_243976))))); } else { covariance_approx_244216[r_244229] = [(covariance_factor_244033 * HEX5E_148027(phi_243978, Math.abs(Math.trunc((c_244267 - r_244229) % t_243976))))]; };
										res_244446 += 1;
									}
							} while(false);
						} while(false);
						res_244452 += 1;
					}
			} while(false);
		} while(false);
		var inverse_approximation_244278 = inverse_168723(covariance_approx_244216);
		var inverted_matrix_244294 = nimCopy(null, [], NTI244293);
		L8: do {
			var r_244314 = 0;
			var colontmp__244465 = 0;
			colontmp__244465 = ((x_243967 != null ? (x_243967.length-1) : -1) - 1);
			var res_244468 = 0;
			L9: do {
					L10: while (true) {
					if (!(res_244468 <= colontmp__244465)) break L10;
						r_244314 = res_244468;
						var Tmp11 = nimCopy(null, [], NTI148068);
						if (inverted_matrix_244294 != null) { inverted_matrix_244294.push(Tmp11); } else { inverted_matrix_244294 = [Tmp11]; };
						L12: do {
							var c_244359 = 0;
							var colontmp__244458 = 0;
							colontmp__244458 = ((x_243967 != null ? (x_243967.length-1) : -1) - 1);
							var res_244461 = 0;
							L13: do {
									L14: while (true) {
									if (!(res_244461 <= colontmp__244458)) break L14;
										c_244359 = res_244461;
										if (inverted_matrix_244294[r_244314] != null) { inverted_matrix_244294[r_244314].push(0.0); } else { inverted_matrix_244294[r_244314] = [0.0]; };
										if (((r_244314 == c_244359) && ((r_244314 == 0) || (r_244314 == ((x_243967 != null ? (x_243967.length-1) : -1) - 1))))) {
										inverted_matrix_244294[r_244314][c_244359] = inverse_approximation_244278[0][0];
										}
										else {
										if ((r_244314 == c_244359)) {
										inverted_matrix_244294[r_244314][c_244359] = inverse_approximation_244278[1][1];
										}
										else {
										if ((Math.abs((r_244314 - c_244359)) <= 1)) {
										inverted_matrix_244294[r_244314][c_244359] = inverse_approximation_244278[1][0];
										}
										}}
										res_244461 += 1;
									}
							} while(false);
						} while(false);
						res_244468 += 1;
					}
			} while(false);
		} while(false);
		result_243968 = nimCopy(null, inverse_168723(HEX2A_159995(HEX2A_159995(t_166944(x_244127), inverted_matrix_244294), x_244127)), NTI148067);
		break BeforeRet;
		var covariance_244401 = ones_166524((t_243976 - 1), (t_243976 - 1));
		L15: do {
			var r_244421 = 0;
			var colontmp__244481 = 0;
			colontmp__244481 = ((x_243967 != null ? (x_243967.length-1) : -1) - 1);
			var res_244484 = 0;
			L16: do {
					L17: while (true) {
					if (!(res_244484 <= colontmp__244481)) break L17;
						r_244421 = res_244484;
						L18: do {
							var c_244441 = 0;
							var colontmp__244474 = 0;
							colontmp__244474 = ((x_243967 != null ? (x_243967.length-1) : -1) - 1);
							var res_244477 = 0;
							L19: do {
									L20: while (true) {
									if (!(res_244477 <= colontmp__244474)) break L20;
										c_244441 = res_244477;
										covariance_244401[r_244421][c_244441] = (covariance_factor_244033 * HEX5E_148027(phi_243978, Math.abs(Math.trunc((c_244441 - r_244421) % t_243976))));
										res_244477 += 1;
									}
							} while(false);
						} while(false);
						res_244484 += 1;
					}
			} while(false);
		} while(false);
		result_243968 = nimCopy(null, inverse_168723(HEX2A_159995(HEX2A_159995(t_166944(x_244127), inverse_168723(covariance_244401)), x_244127)), NTI148067);
	} while (false);

	return result_243968;

}

function HEX5BHEX5D_156218(a_156220, r_156221, c_156222) {
	var result_156223 = 0.0;

		result_156223 = a_156220[r_156221][c_156222];

	return result_156223;

}

function new_seq_245420(len_245424) {
	var result_245426 = null;

		result_245426 = new Array(len_245424); for (var i=0;i<len_245424;++i) {result_245426[i]=null;}
	return result_245426;

}

function new_seq_193272(len_193276) {
	var result_193278 = null;

		result_193278 = new Array(len_193276); for (var i=0;i<len_193276;++i) {result_193278[i]=0.0;}
	return result_193278;

}

function HEX2A_133072(x_133074, order_133075) {
	var result_133076 = 0;

		var y_133083 = (order_133075 - 1);
		result_133076 = ((x_133074 ^ y_133083) - y_133083);

	return result_133076;

}

function merge_204579(a_204585, b_204589, lo_204591, m_204593, hi_204595, cmp_204602, order_204604) {
	BeforeRet: do {
		if ((HEX2A_133072(cmp_204602(a_204585[m_204593], a_204585[(m_204593 + 1)]), order_204604) <= 0)) {
		break BeforeRet;
		}
		
		var j_204605 = lo_204591;
		var bb_205002 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_204605 <= m_204593)) break L2;
					b_204589[bb_205002] = a_204585[j_204605];
					bb_205002 += 1;
					j_204605 += 1;
				}
		} while(false);
		var i_205220 = 0;
		var k_205221 = lo_204591;
		L3: do {
				L4: while (true) {
				if (!((k_205221 < j_204605) && (j_204605 <= hi_204595))) break L4;
					if ((HEX2A_133072(cmp_204602(b_204589[i_205220], a_204585[j_204605]), order_204604) <= 0)) {
					a_204585[k_205221] = b_204589[i_205220];
					i_205220 += 1;
					}
					else {
						a_204585[k_205221] = a_204585[j_204605];
						j_204605 += 1;
					}
					
					k_205221 += 1;
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_205221 < j_204605)) break L6;
					a_204585[k_205221] = b_204589[i_205220];
					k_205221 += 1;
					i_205220 += 1;
				}
		} while(false);
	} while (false);

	
}

function sort_204537(a_204543, cmp_204550, order_204552) {
		var n_204559 = (a_204543 != null ? a_204543.length : 0);
		var b_204561 = null;
		b_204561 = new Array(Math.trunc(n_204559 / 2)); for (var i=0;i<Math.trunc(n_204559 / 2);++i) {b_204561[i]=0.0;}		var s_204573 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_204573 < n_204559)) break L2;
					var m_204574 = ((n_204559 - 1) - s_204573);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_204574)) break L4;
								merge_204579(a_204543, b_204561, nimMax(((m_204574 - s_204573) + 1), 0), m_204574, (m_204574 + s_204573), cmp_204550, order_204552);
								m_204574 -= (s_204573 * 2);
							}
					} while(false);
					s_204573 = (s_204573 * 2);
				}
		} while(false);

	
}

function sorted_204482(a_204487, cmp_204494, order_204496) {
	var result_204498 = null;

		result_204498 = nimCopy(null, new_seq_193272((a_204487 != null ? a_204487.length : 0)), NTI193277);
		L1: do {
			var i_204531 = 0;
			var colontmp__206060 = 0;
			colontmp__206060 = (a_204487 != null ? (a_204487.length-1) : -1);
			var res_206063 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_206063 <= colontmp__206060)) break L3;
						i_204531 = res_206063;
						result_204498[i_204531] = a_204487[i_204531];
						res_206063 += 1;
					}
			} while(false);
		} while(false);
		sort_204537(result_204498, cmp_204494, order_204496);

	return result_204498;

}

function cmp_204454(x_204458, y_204460) {
	var result_204461 = 0;

	BeforeRet: do {
		if ((x_204458 == y_204460)) {
		result_204461 = 0;
		break BeforeRet;
		}
		
		if ((x_204458 < y_204460)) {
		result_204461 = -1;
		break BeforeRet;
		}
		
		result_204461 = 1;
		break BeforeRet;
	} while (false);

	return result_204461;

}

function benjamini_hochberg_fdr_204436(v_204438, alpha_204439) {
	var result_204440 = [0.0];

		var m_204448 = (v_204438 != null ? v_204438.length : 0);
		var vs_206080 = sorted_204482(v_204438, cmp_204454, 1);
		L1: do {
			var i_x_206127 = 0;
			var x_206128 = 0.0;
			var i_206143 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_206143 < (vs_206080 != null ? vs_206080.length : 0))) break L3;
						i_x_206127 = i_206143;
						x_206128 = vs_206080[i_206143];
						var bh_206129 = ((alpha_204439 / m_204448) * (i_x_206127 + 1));
						if ((x_206128 < bh_206129)) {
						HEX2BHEX3D_44127(result_204440, 0, 1.0000000000000000e+00);
						}
						
						i_206143 += 1;
					}
			} while(false);
		} while(false);

	return result_204440[0];

}

function new_seq_246088(len_246092) {
	var result_246094 = null;

		result_246094 = new Array(len_246092); for (var i=0;i<len_246092;++i) {result_246094[i]=null;}
	return result_246094;

}

function merge_246184(a_246190, b_246194, lo_246196, m_246198, hi_246200, cmp_246207, order_246209) {
	BeforeRet: do {
		if ((HEX2A_133072(cmp_246207(a_246190[m_246198], a_246190[(m_246198 + 1)]), order_246209) <= 0)) {
		break BeforeRet;
		}
		
		var j_246210 = lo_246196;
		var bb_246602 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_246210 <= m_246198)) break L2;
					b_246194[bb_246602] = a_246190[j_246210];
					bb_246602 += 1;
					j_246210 += 1;
				}
		} while(false);
		var i_246820 = 0;
		var k_246821 = lo_246196;
		L3: do {
				L4: while (true) {
				if (!((k_246821 < j_246210) && (j_246210 <= hi_246200))) break L4;
					if ((HEX2A_133072(cmp_246207(b_246194[i_246820], a_246190[j_246210]), order_246209) <= 0)) {
					a_246190[k_246821] = b_246194[i_246820];
					i_246820 += 1;
					}
					else {
						a_246190[k_246821] = a_246190[j_246210];
						j_246210 += 1;
					}
					
					k_246821 += 1;
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_246821 < j_246210)) break L6;
					a_246190[k_246821] = b_246194[i_246820];
					k_246821 += 1;
					i_246820 += 1;
				}
		} while(false);
	} while (false);

	
}

function sort_246142(a_246148, cmp_246155, order_246157) {
		var n_246164 = (a_246148 != null ? a_246148.length : 0);
		var b_246166 = null;
		b_246166 = new Array(Math.trunc(n_246164 / 2)); for (var i=0;i<Math.trunc(n_246164 / 2);++i) {b_246166[i]=null;}		var s_246178 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_246178 < n_246164)) break L2;
					var m_246179 = ((n_246164 - 1) - s_246178);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_246179)) break L4;
								merge_246184(a_246148, b_246166, nimMax(((m_246179 - s_246178) + 1), 0), m_246179, (m_246179 + s_246178), cmp_246155, order_246157);
								m_246179 -= (s_246178 * 2);
							}
					} while(false);
					s_246178 = (s_246178 * 2);
				}
		} while(false);

	
}

function sorted_246063(a_246068, cmp_246075, order_246077) {
	var result_246079 = null;

		result_246079 = nimCopy(null, new_seq_246088((a_246068 != null ? a_246068.length : 0)), NTI246093);
		L1: do {
			var i_246136 = 0;
			var colontmp__247660 = 0;
			colontmp__247660 = (a_246068 != null ? (a_246068.length-1) : -1);
			var res_247663 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_247663 <= colontmp__247660)) break L3;
						i_246136 = res_247663;
						result_246079[i_246136] = a_246068[i_246136];
						res_247663 += 1;
					}
			} while(false);
		} while(false);
		sort_246142(result_246079, cmp_246075, order_246077);

	return result_246079;

}

function existence_change_point_wald_test_245214(models_245217) {

		function HEX3Aanonymous_245908(h1_245919, h2_245921) {
			var result_245929 = false;

				result_245929 = (p_value_243852(h1_245919) < p_value_243852(h2_245921));

			return result_245929;

		}

	var result_245222 = null;

	BeforeRet: do {
		var m_245230 = (models_245217 != null ? models_245217.length : 0);
		var base_distribution_245231 = {dof: 2.0000000000000000e+00};
		var scores_245248 = nimCopy(null, [], NTI245247);
		L1: do {
			var j_245268 = 0;
			var colontmp__247683 = 0;
			colontmp__247683 = (models_245217 != null ? (models_245217.length-1) : -1);
			var res_247686 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_247686 <= colontmp__247683)) break L3;
						j_245268 = res_247686;
						var cov_245269 = nimCopy(null, models_245217[j_245268].before_model_covariance_parameters, NTI148067);
						var beta_245270 = as_column_vector_155014(models_245217[j_245268].after_model.beta_hat);
						var reduced_cov_245323 = [[HEX5BHEX5D_156218(cov_245269, 2, 2), HEX5BHEX5D_156218(cov_245269, 2, 3)], [HEX5BHEX5D_156218(cov_245269, 3, 2), HEX5BHEX5D_156218(cov_245269, 3, 3)]];
						var score_245324 = HEX2A_159995(HEX2A_159995(t_166944(beta_245270), inverse_168723(reduced_cov_245323)), beta_245270)[0][0];
						var Tmp4 = nimCopy(null, score_245324, NTI124);
						if (scores_245248 != null) { scores_245248.push(Tmp4); } else { scores_245248 = [Tmp4]; };
						res_247686 += 1;
					}
			} while(false);
		} while(false);
		L5: do {
			var i_245410 = 0;
			var result_245451 = new_seq_245420((scores_245248 != null ? scores_245248.length : 0));
			L6: do {
				var it_245460 = 0.0;
				var i_247695 = 0;
				var l_247697 = (scores_245248 != null ? scores_245248.length : 0);
				L7: do {
						L8: while (true) {
						if (!(i_247695 < l_247697)) break L8;
							it_245460 = scores_245248[i_247695];
							result_245451[i_245410] = htest_score_245358({dof: (2.0000000000000000e+00 * m_245230)}, it_245460, 2);
							i_245410 += 1;
							i_247695 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var hypothesis_set_245483 = nimCopy(null, result_245451, NTI245425);
		L9: do {
			var i_245810 = 0;
			var result_245827 = new_seq_193272((hypothesis_set_245483 != null ? hypothesis_set_245483.length : 0));
			L10: do {
				var it_245836 = null;
				var i_247702 = 0;
				var l_247704 = (hypothesis_set_245483 != null ? hypothesis_set_245483.length : 0);
				L11: do {
						L12: while (true) {
						if (!(i_247702 < l_247704)) break L12;
							it_245836 = hypothesis_set_245483[i_247702];
							result_245827[i_245810] = p_value_243852(it_245836);
							i_245810 += 1;
							i_247702 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		var p_values_245905 = nimCopy(null, result_245827, NTI193277);
		var number_rejected_245906 = benjamini_hochberg_fdr_204436(p_values_245905, 5.0000000000000003e-02);
		var hypothesis_247680 = sorted_246063(hypothesis_set_245483, HEX3Aanonymous_245908, 1)[0];
		result_245222 = hypothesis_247680;
		break BeforeRet;
	} while (false);

	return result_245222;

}

function rits_model_248092(x_248094, y_248095, candidate_change_point_start_248096, candidate_change_point_end_248097) {
								var Tmp5;
								var Tmp8;

	var result_248098 = null;

		result_248098 = {candidates: null, change_point_candidates: null, loglikelihood_candidates: null, loglikelihood: 0.0, change_point_index: 0, change_point_x: 0.0, model: null, parameters_mean: null};
		if (!(((y_248095 != null ? y_248095.length : 0) == (x_248094 != null ? x_248094.length : 0)))) {
		var e_248127 = null;
		e_248127 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_248127.message = nimCopy(null, makeNimstrLit("x and y must have the same size"), NTI138);
		e_248127.parent = null;
		raiseException(e_248127, "ValueError");
		}
		
		var likely_change_point_248138 = -1;
		result_248098.loglikelihood = -Infinity;
		L1: do {
			var k_248147 = 0;
			var res_248201 = candidate_change_point_start_248096;
			L2: do {
					L3: while (true) {
					if (!(res_248201 <= candidate_change_point_end_248097)) break L3;
						k_248147 = res_248201;
						L4: do {
								if ((k_248147 < 1)) Tmp5 = true; else {									Tmp5 = (((y_248095 != null ? (y_248095.length-1) : -1) - 2) < k_248147);								}							if (Tmp5) {
							break L4;
							}
							
							var candidate_248156 = model_candidate_244501(x_248094, y_248095, k_248147);
							var Tmp6 = nimCopy(null, k_248147, NTI17403);
							if (result_248098.change_point_candidates != null) { result_248098.change_point_candidates.push(Tmp6); } else { result_248098.change_point_candidates = [Tmp6]; };
							var Tmp7 = nimCopy(null, candidate_248156.loglikelihood, NTI124);
							if (result_248098.loglikelihood_candidates != null) { result_248098.loglikelihood_candidates.push(Tmp7); } else { result_248098.loglikelihood_candidates = [Tmp7]; };
								if (!!((classify_29030(candidate_248156.loglikelihood) == 4))) Tmp8 = false; else {									Tmp8 = (result_248098.loglikelihood < candidate_248156.loglikelihood);								}							if (Tmp8) {
							result_248098.loglikelihood = candidate_248156.loglikelihood;
							result_248098.model = candidate_248156;
							likely_change_point_248138 = k_248147;
							}
							
						} while(false);
						res_248201 += 1;
					}
			} while(false);
		} while(false);
		result_248098.parameters_mean = nimCopy(null, result_248098.model.parameters_mean, NTI148064);
		result_248098.model.before_model_covariance_parameters = nimCopy(null, covariance_matrix_for_before_model_243964(result_248098.model, x_248094), NTI148067);
		result_248098.model.existence_change_point_hypothesis = existence_change_point_wald_test_245214([result_248098.model]);
		result_248098.change_point_index = likely_change_point_248138;
		result_248098.change_point_x = x_248094[likely_change_point_248138];

	return result_248098;

}

function nsuRepeatStr(s_140022, n_140023) {
	var result_140024 = null;

		result_140024 = nimCopy(null, mnewString(0), NTI138);
		L1: do {
			var i_140036 = 0;
			var colontmp__140038 = 0;
			colontmp__140038 = n_140023;
			var res_140041 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_140041 <= colontmp__140038)) break L3;
						i_140036 = res_140041;
						if (result_140024 != null) { result_140024 = (result_140024).concat(s_140022); } else { result_140024 = s_140022.slice(); };
						res_140041 += 1;
					}
			} while(false);
		} while(false);

	return result_140024;

}

function parse_saturated_natural_47485(s_47487, b_47489, b_47489_Idx, start_47490) {
			var Tmp1;
					var Tmp4;

	var result_47492 = 0;

		var i_47493 = start_47490;
		if (((i_47493 < (s_47487 != null ? s_47487.length : 0)) && (s_47487[i_47493] == 43))) {
		i_47493 += 1;
		}
		
			if (!(i_47493 < (s_47487 != null ? s_47487.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_47487[i_47493]] != undefined);			}		if (Tmp1) {
		b_47489[b_47489_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_47493 < (s_47487 != null ? s_47487.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_47487[i_47493]] != undefined);					}				if (!Tmp4) break L3;
					var c_47535 = (s_47487[i_47493] - 48);
					if ((b_47489[b_47489_Idx] <= Math.trunc((2147483647 - c_47535) / 10))) {
					b_47489[b_47489_Idx] = ((b_47489[b_47489_Idx] * 10) + c_47535);
					}
					else {
						b_47489[b_47489_Idx] = 2147483647;
					}
					
					i_47493 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_47493 < (s_47487 != null ? s_47487.length : 0)) && (s_47487[i_47493] == 95))) break L6;
								i_47493 += 1;
							}
					} while(false);
				}
		} while(false);
		result_47492 = (i_47493 - start_47490);
		}
		

	return result_47492;

}

function HEX5BHEX5D_90105(s_90110, x_90113) {
	var result_90114 = null;

		var a_90201 = x_90113.a;
		var l_90401 = ((((s_90110 != null ? s_90110.length : 0) - x_90113.b) - a_90201) + 1);
		result_90114 = nimCopy(null, mnewString(l_90401), NTI138);
		L1: do {
			var i_90411 = 0;
			var i_90423 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_90423 < l_90401)) break L3;
						i_90411 = i_90423;
						result_90114[i_90411] = s_90110[(i_90411 + a_90201)];
						i_90423 += 1;
					}
			} while(false);
		} while(false);

	return result_90114;

}

function HEX2EHEX2E_90053(a_90058, b_90060) {
	var result_90068 = {a: 0, b: 0};

		result_90068.a = a_90058;
		result_90068.b = b_90060;

	return result_90068;

}

function parse_standard_format_specifier_146928(s_146930, start_146931, ignore_unknown_suffix_146933) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_146934 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

		result_146934.fill = 32;
		result_146934.align = 0;
		result_146934.sign = 45;
		var i_146937 = start_146931;
		if ((((i_146937 + 1) < (s_146930 != null ? s_146930.length : 0)) && (ConstSet2[s_146930[(i_146937 + 1)]] != undefined))) {
		result_146934.fill = s_146930[i_146937];
		result_146934.align = s_146930[(i_146937 + 1)];
		i_146937 += 2;
		}
		else {
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (ConstSet3[s_146930[i_146937]] != undefined))) {
		result_146934.align = s_146930[i_146937];
		i_146937 += 1;
		}
		}
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (ConstSet4[s_146930[i_146937]] != undefined))) {
		result_146934.sign = s_146930[i_146937];
		i_146937 += 1;
		}
		
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 35))) {
		result_146934.alternateForm = true;
		i_146937 += 1;
		}
		
			if (!(((i_146937 + 1) < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_146930[(i_146937 + 1)]] != undefined);			}		if (Tmp1) {
		result_146934.padWithZero = true;
		i_146937 += 1;
		}
		
		var parsed_length_147022 = parse_saturated_natural_47485(s_146930, result_146934, "minimumWidth", i_146937);
		i_146937 += parsed_length_147022;
		if (((i_146937 < (s_146930 != null ? s_146930.length : 0)) && (s_146930[i_146937] == 46))) {
		i_146937 += 1;
		var parsed_length_b_147042 = parse_saturated_natural_47485(s_146930, result_146934, "precision", i_146937);
		i_146937 += parsed_length_b_147042;
		}
		else {
			result_146934.precision = -1;
		}
		
			if (!(i_146937 < (s_146930 != null ? s_146930.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_146930[i_146937]] != undefined);			}		if (Tmp2) {
		result_146934.typ = s_146930[i_146937];
		i_146937 += 1;
		}
		
		result_146934.endPosition = i_146937;
			if (!!((i_146937 == (s_146930 != null ? s_146930.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_146933);			}		if (Tmp3) {
		var e_147120 = null;
		e_147120 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_147120.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ")).concat(HEX5BHEX5D_90105(s_146930, HEX2EHEX2E_90053(i_146937, 1))), NTI138);
		e_147120.parent = null;
		raiseException(e_147120, "ValueError");
		}
		

	return result_146934;

}

function nsuformatBiggestFloat(f_144223, format_144224, precision_144230, decimal_sep_144231) {
	var result_144232 = null;

		var precision_144401 = precision_144230;
		if ((precision_144401 == -1)) {
		precision_144401 = 6;
		}
		
		var res_144403 = null;
		switch (format_144224) {
		case 0:
			res_144403 = f_144223.toString();
			break;
		case 1:
			res_144403 = f_144223.toFixed(precision_144401);
			break;
		case 2:
			res_144403 = f_144223.toExponential(precision_144401);
			break;
		}
		result_144232 = nimCopy(null, cstrToNimstr(res_144403), NTI138);
		if (((1.0000000000000000e+00 / f_144223) == -Infinity)) {
		result_144232 = nimCopy(null, (makeNimstrLit("-")).concat(cstrToNimstr(res_144403)), NTI138);
		}
		
		L1: do {
			var i_144413 = 0;
			var colontmp__144425 = 0;
			colontmp__144425 = (result_144232 != null ? result_144232.length : 0);
			var i_144428 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_144428 < colontmp__144425)) break L3;
						i_144413 = i_144428;
						if ((ConstSet9[result_144232[i_144413]] != undefined)) {
						result_144232[i_144413] = decimal_sep_144231;
						}
						
						i_144428 += 1;
					}
			} while(false);
		} while(false);

	return result_144232;

}

function insert_21601(x_21604, x_21604_Idx, item_21605, i_21606) {
		var xl_21607 = (x_21604[x_21604_Idx] != null ? x_21604[x_21604_Idx].length : 0);
		x_21604[x_21604_Idx].length = (xl_21607 + (item_21605 != null ? item_21605.length : 0));
		var j_21608 = (xl_21607 - 1);
		L1: do {
				L2: while (true) {
				if (!(i_21606 <= j_21608)) break L2;
					x_21604[x_21604_Idx][(j_21608 + (item_21605 != null ? item_21605.length : 0))] = x_21604[x_21604_Idx][j_21608];
					j_21608 -= 1;
				}
		} while(false);
		j_21608 = 0;
		L3: do {
				L4: while (true) {
				if (!(j_21608 < (item_21605 != null ? item_21605.length : 0))) break L4;
					x_21604[x_21604_Idx][(j_21608 + i_21606)] = item_21605[j_21608];
					j_21608 += 1;
				}
		} while(false);

	
}

function nsuRepeatChar(c_139984, count_139985) {
	var result_139986 = null;

		result_139986 = nimCopy(null, mnewString(count_139985), NTI138);
		L1: do {
			var i_139998 = 0;
			var colontmp__140000 = 0;
			colontmp__140000 = (count_139985 - 1);
			var res_140003 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_140003 <= colontmp__140000)) break L3;
						i_139998 = res_140003;
						result_139986[i_139998] = c_139984;
						res_140003 += 1;
					}
			} while(false);
		} while(false);

	return result_139986;

}

function validate_utf8_50955(s_50957) {
	var result_50958 = 0;

	BeforeRet: do {
		var i_50960 = 0;
		var l_50961 = (s_50957 != null ? s_50957.length : 0);
		L1: do {
				L2: while (true) {
				if (!(i_50960 < l_50961)) break L2;
					if ((s_50957[i_50960] <= 127)) {
					i_50960 += 1;
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 5) == 6)) {
					if ((s_50957[i_50960] < 194)) {
					result_50958 = i_50960;
					break BeforeRet;
					}
					
					if ((((i_50960 + 1) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2))) {
					i_50960 += 2;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 4) == 14)) {
					if (((((i_50960 + 2) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 2)] >>> 0) >>> 6) == 2))) {
					i_50960 += 3;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_50957[i_50960] >>> 0) >>> 3) == 30)) {
					if ((((((i_50960 + 3) < l_50961) && (((s_50957[(i_50960 + 1)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 2)] >>> 0) >>> 6) == 2)) && (((s_50957[(i_50960 + 3)] >>> 0) >>> 6) == 2))) {
					i_50960 += 4;
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					
					}
					else {
						result_50958 = i_50960;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		result_50958 = -1;
		break BeforeRet;
	} while (false);

	return result_50958;

}

function nucruneLen(s_50507) {
	var result_50508 = 0;

		var i_50510 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_50510 < (s_50507 != null ? s_50507.length : 0))) break L2;
					if ((s_50507[i_50510] <= 127)) {
					i_50510 += 1;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 5) == 6)) {
					i_50510 += 2;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 4) == 14)) {
					i_50510 += 3;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 3) == 30)) {
					i_50510 += 4;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 2) == 62)) {
					i_50510 += 5;
					}
					else {
					if ((((s_50507[i_50510] >>> 0) >>> 1) == 126)) {
					i_50510 += 6;
					}
					else {
					i_50510 += 1;
					}
					}}}}}
					result_50508 += 1;
				}
		} while(false);

	return result_50508;

}

function align_string_146827(s_146829, minimum_width_146830, align_146831, fill_146832) {
			var Tmp1;

	var result_146833 = null;

		if ((minimum_width_146830 == 0)) {
		result_146833 = nimCopy(null, s_146829, NTI138);
		}
		else {
			if ((validate_utf8_50955(s_146829) == -1)) {
			Tmp1 = nucruneLen(s_146829);
			}
			else {
			Tmp1 = (s_146829 != null ? s_146829.length : 0);
			}
			
			var s_rune_len_146835 = Tmp1;
			var to_fill_146836 = (minimum_width_146830 - s_rune_len_146835);
			if ((to_fill_146836 <= 0)) {
			result_146833 = nimCopy(null, s_146829, NTI138);
			}
			else {
			if (((align_146831 == 60) || (align_146831 == 0))) {
			result_146833 = nimCopy(null, (s_146829).concat(nsuRepeatChar(fill_146832, to_fill_146836)), NTI138);
			}
			else {
			if ((align_146831 == 94)) {
			var half_146837 = Math.trunc(to_fill_146836 / 2);
			result_146833 = nimCopy(null, (nsuRepeatChar(fill_146832, half_146837)).concat(s_146829,nsuRepeatChar(fill_146832, (to_fill_146836 - half_146837))), NTI138);
			}
			else {
				result_146833 = nimCopy(null, (nsuRepeatChar(fill_146832, to_fill_146836)).concat(s_146829), NTI138);
			}
			}}
		}
		

	return result_146833;

}

function nsuToUpperAsciiChar(c_137319) {
	var result_137320 = 0;

		if ((ConstSet11[c_137319] != undefined)) {
		result_137320 = (c_137319 - 32);
		}
		else {
			result_137320 = c_137319;
		}
		

	return result_137320;

}

function nsuToUpperAsciiStr(s_137367) {
	var result_137368 = null;

		result_137368 = nimCopy(null, mnewString((s_137367 != null ? s_137367.length : 0)), NTI138);
		L1: do {
			var i_137383 = 0;
			var colontmp__137391 = 0;
			colontmp__137391 = ((s_137367 != null ? s_137367.length : 0) - 1);
			var res_137394 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_137394 <= colontmp__137391)) break L3;
						i_137383 = res_137394;
						result_137368[i_137383] = nsuToUpperAsciiChar(s_137367[i_137383]);
						res_137394 += 1;
					}
			} while(false);
		} while(false);

	return result_137368;

}

function format_195002(value_195006, specifier_195008, res_195010, res_195010_Idx) {
		var Tmp1;

		var spec_195011 = parse_standard_format_specifier_146928(specifier_195008, 0, false);
		var fmode_195012 = 0;
		switch (spec_195011.typ) {
		case 101:
		case 69:
			fmode_195012 = 2;
			break;
		case 102:
		case 70:
			fmode_195012 = 1;
			break;
		case 103:
		case 71:
			fmode_195012 = 0;
			break;
		case 0:
			break;
		default: 
			var e_195018 = null;
			e_195018 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_195018.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ")).concat([spec_195011.typ]), NTI138);
			e_195018.parent = null;
			raiseException(e_195018, "ValueError");
			break;
		}
		var f_195027 = [nsuformatBiggestFloat(value_195006, fmode_195012, spec_195011.precision, 46)];
		var sign_195028 = false;
		if ((0.0 <= value_195006)) {
		if (!((spec_195011.sign == 45))) {
		sign_195028 = true;
		if ((value_195006 == 0.0)) {
		if (((1.0000000000000000e+00 / value_195006) == Infinity)) {
		insert_21601(f_195027, 0, nimCharToStr(spec_195011.sign), 0);
		}
		
		}
		else {
		insert_21601(f_195027, 0, nimCharToStr(spec_195011.sign), 0);
		}
		
		}
		
		}
		else {
			sign_195028 = true;
		}
		
		if (spec_195011.padWithZero) {
		var sign_str_195031 = [];
		if (sign_195028) {
		sign_str_195031 = nimCopy(null, nimCharToStr(f_195027[0][0]), NTI138);
		f_195027[0] = nimCopy(null, HEX5BHEX5D_90105(f_195027[0], HEX2EHEX2E_90053(1, 1)), NTI138);
		}
		
		var to_fill_195086 = ((spec_195011.minimumWidth - (f_195027[0] != null ? f_195027[0].length : 0)) - (sign_195028 ? 1:0));
		if ((0 < to_fill_195086)) {
		f_195027[0] = nimCopy(null, (nsuRepeatChar(48, to_fill_195086)).concat(f_195027[0]), NTI138);
		}
		
		if (sign_195028) {
		f_195027[0] = nimCopy(null, (sign_str_195031).concat(f_195027[0]), NTI138);
		}
		
		}
		
		if ((spec_195011.align == 0)) {
		Tmp1 = 62;
		}
		else {
		Tmp1 = spec_195011.align;
		}
		
		var align_195089 = Tmp1;
		var result_195090 = align_string_146827(f_195027[0], spec_195011.minimumWidth, align_195089, spec_195011.fill);
		if ((ConstSet10[spec_195011.typ] != undefined)) {
		if (res_195010[res_195010_Idx] != null) { res_195010[res_195010_Idx] = (res_195010[res_195010_Idx]).concat(nsuToUpperAsciiStr(result_195090)); } else { res_195010[res_195010_Idx] = nsuToUpperAsciiStr(result_195090).slice(); };
		}
		else {
		if (res_195010[res_195010_Idx] != null) { res_195010[res_195010_Idx] = (res_195010[res_195010_Idx]).concat(result_195090); } else { res_195010[res_195010_Idx] = result_195090.slice(); };
		}
		

	
}

function mean_197874(d_197876) {
		var Tmp1;

	var result_197877 = 0.0;

	BeforeRet: do {
		if ((1 < d_197876.dof)) {
		Tmp1 = 0.0;
		}
		else {
		Tmp1 = NaN;
		}
		
		result_197877 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_197877;

}

function mean_211467(d_211472) {
	var result_211473 = 0.0;

		result_211473 = ((mean_197874(d_211472.distribution) * d_211472.scale) + d_211472.location);

	return result_211473;

}

function estimate_211448(d_211453) {
	var result_211454 = 0.0;

		result_211454 = mean_211467(d_211453.distribution);

	return result_211454;

}

function standard_deviation_212258(sd_212263) {
	var result_212264 = 0.0;

		result_212264 = sd_212263.distribution.scale;

	return result_212264;

}

function betacf_192591(x_192593, a_192594, b_192595) {
	var result_192596 = 0.0;

	BeforeRet: do {
		var qab_192598 = (a_192594 + b_192595);
		var qap_192599 = (a_192594 + 1.0000000000000000e+00);
		var qam_192600 = (a_192594 - 1.0000000000000000e+00);
		var c_192601 = 1.0000000000000000e+00;
		var d_192602 = (1.0000000000000000e+00 - ((qab_192598 * x_192593) / qap_192599));
		var m2_192603 = 0.0;
		var aa_192604 = 0.0;
		var del_192605 = 0.0;
		var h_192606 = [0.0];
		if ((Math.abs(d_192602) < 1.0000000000000001e-30)) {
		d_192602 = 1.0000000000000001e-30;
		}
		
		d_192602 = (1.0000000000000000e+00 / d_192602);
		h_192606[0] = d_192602;
		L1: do {
			var m_192620 = 0;
			var res_192644 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_192644 <= 100)) break L3;
						m_192620 = res_192644;
						m2_192603 = (2.0000000000000000e+00 * m_192620);
						aa_192604 = (((m_192620 * (b_192595 - m_192620)) * x_192593) / ((qam_192600 + m2_192603) * (a_192594 + m2_192603)));
						d_192602 = (1.0000000000000000e+00 + (aa_192604 * d_192602));
						if ((Math.abs(d_192602) < 1.0000000000000001e-30)) {
						d_192602 = 1.0000000000000001e-30;
						}
						
						c_192601 = (1.0000000000000000e+00 + (aa_192604 / c_192601));
						if ((Math.abs(c_192601) < 1.0000000000000001e-30)) {
						c_192601 = 1.0000000000000001e-30;
						}
						
						d_192602 = (1.0000000000000000e+00 / d_192602);
						HEX2AHEX3D_144887(h_192606, 0, (d_192602 * c_192601));
						aa_192604 = (((-((a_192594 + m_192620)) * (qab_192598 + m_192620)) * x_192593) / ((a_192594 + m2_192603) * (qap_192599 + m2_192603)));
						d_192602 = (1.0000000000000000e+00 + (aa_192604 * d_192602));
						if ((Math.abs(d_192602) < 1.0000000000000001e-30)) {
						d_192602 = 1.0000000000000001e-30;
						}
						
						c_192601 = (1.0000000000000000e+00 + (aa_192604 / c_192601));
						if ((Math.abs(c_192601) < 1.0000000000000001e-30)) {
						c_192601 = 1.0000000000000001e-30;
						}
						
						d_192602 = (1.0000000000000000e+00 / d_192602);
						del_192605 = (d_192602 * c_192601);
						HEX2AHEX3D_144887(h_192606, 0, del_192605);
						if ((Math.abs((del_192605 - 1.0000000000000000e+00)) < 2.9999999999999999e-07)) {
						break L1;
						}
						
						res_192644 += 1;
					}
			} while(false);
		} while(false);
		result_192596 = h_192606[0];
		break BeforeRet;
	} while (false);

	return result_192596;

}

function ibeta_192860(x_192862, a_192863, b_192864) {
		var Tmp1;
			var Tmp2;

	var result_192865 = 0.0;

	BeforeRet: do {
		if (((x_192862 == 0.0) || (x_192862 == 1.0000000000000000e+00))) {
		Tmp1 = 0.0;
		}
		else {
		Tmp1 = Math.exp(((((gammaln_192081((a_192863 + b_192864)) - gammaln_192081(a_192863)) - gammaln_192081(b_192864)) + (a_192863 * Math.log(x_192862))) + (b_192864 * Math.log((1.0000000000000000e+00 - x_192862)))));
		}
		
		var bt_192866 = Tmp1;
			if ((x_192862 < 0.0)) Tmp2 = true; else {				Tmp2 = (1.0000000000000000e+00 < x_192862);			}		if (Tmp2) {
		result_192865 = NaN;
		break BeforeRet;
		}
		
		if ((x_192862 < ((a_192863 + 1.0000000000000000e+00) / ((a_192863 + b_192864) + 2.0000000000000000e+00)))) {
		result_192865 = ((bt_192866 * betacf_192591(x_192862, a_192863, b_192864)) / a_192863);
		break BeforeRet;
		}
		
		result_192865 = (1.0000000000000000e+00 - ((bt_192866 * betacf_192591((1.0000000000000000e+00 - x_192862), b_192864, a_192863)) / b_192864));
		break BeforeRet;
	} while (false);

	return result_192865;

}

function ibetainv_192880(p_192882, a_192883, b_192884) {
			var Tmp1;
		var Tmp2;
							var Tmp6;

	var result_192885 = 0.0;

	BeforeRet: do {
		var a1_192887 = (a_192883 - 1.0000000000000000e+00);
		var b1_192888 = (b_192884 - 1.0000000000000000e+00);
		var lna_192889 = 0.0;
		var lnb_192890 = 0.0;
		var pp_192891 = 0.0;
		var t_192892 = 0.0;
		var u_192893 = 0.0;
		var err_192894 = 0.0;
		var x_192895 = [0.0];
		var al_192896 = 0.0;
		var h_192897 = 0.0;
		var w_192898 = 0.0;
		var afac_192899 = 0.0;
		if ((p_192882 <= 0.0)) {
		result_192885 = 0.0;
		break BeforeRet;
		}
		
		if ((1.0000000000000000e+00 <= p_192882)) {
		result_192885 = 1.0000000000000000e+01;
		break BeforeRet;
		}
		
			if (!(1.0000000000000000e+00 <= a_192883)) Tmp1 = false; else {				Tmp1 = (1.0000000000000000e+00 <= b_192884);			}		if (Tmp1) {
		if ((p_192882 < 5.0000000000000000e-01)) {
		Tmp2 = p_192882;
		}
		else {
		Tmp2 = (1.0000000000000000e+00 - p_192882);
		}
		
		pp_192891 = Tmp2;
		t_192892 = Math.sqrt((-2.0000000000000000e+00 * Math.log(pp_192891)));
		x_192895[0] = (((2.3075299999999999e+00 + (t_192892 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_192892 * (9.9229000000000001e-01 + (t_192892 * 4.4810000000000003e-02))))) - t_192892);
		if ((p_192882 < 5.0000000000000000e-01)) {
		x_192895[0] = -(x_192895[0]);
		}
		
		al_192896 = (((x_192895[0] * x_192895[0]) - 3.0000000000000000e+00) / 6.0000000000000000e+00);
		h_192897 = (2.0000000000000000e+00 / ((1.0000000000000000e+00 / ((2.0000000000000000e+00 * a_192883) - 1.0000000000000000e+00)) + (1.0000000000000000e+00 / ((2.0000000000000000e+00 * b_192884) - 1.0000000000000000e+00))));
		w_192898 = (((x_192895[0] * Math.sqrt((al_192896 + h_192897))) / h_192897) - (((1.0000000000000000e+00 / ((2.0000000000000000e+00 * b_192884) - 1.0000000000000000e+00)) - (1.0000000000000000e+00 / ((2.0000000000000000e+00 * a_192883) - 1.0000000000000000e+00))) * ((al_192896 + 8.3333333333333337e-01) - (2.0000000000000000e+00 / (3.0000000000000000e+00 * h_192897)))));
		x_192895[0] = (a_192883 / (a_192883 + (b_192884 * Math.exp((2.0000000000000000e+00 * w_192898)))));
		}
		else {
			lna_192889 = Math.log((a_192883 / (a_192883 + b_192884)));
			lnb_192890 = Math.log((b_192884 / (a_192883 + b_192884)));
			t_192892 = (Math.exp((a_192883 * lna_192889)) / a_192883);
			u_192893 = (Math.exp((b_192884 * lnb_192890)) / b_192884);
			w_192898 = (t_192892 + u_192893);
			if ((p_192882 < (t_192892 / w_192898))) {
			x_192895[0] = Math.pow(((a_192883 * w_192898) * p_192882), (1.0000000000000000e+00 / a_192883));
			}
			else {
				x_192895[0] = (1.0000000000000000e+00 - Math.pow(((b_192884 * w_192898) * (1.0000000000000000e+00 - p_192882)), (1.0000000000000000e+00 / b_192884)));
			}
			
		}
		
		afac_192899 = ((-(gammaln_192081(a_192883)) - gammaln_192081(b_192884)) + gammaln_192081((a_192883 + b_192884)));
		L3: do {
			var j_192916 = 0;
			var res_192932 = 0;
			L4: do {
					L5: while (true) {
					if (!(res_192932 <= 9)) break L5;
						j_192916 = res_192932;
						if (((x_192895[0] == 0.0) || (x_192895[0] == 1.0000000000000000e+00))) {
						result_192885 = x_192895[0];
						break BeforeRet;
						}
						
						err_192894 = (ibeta_192860(x_192895[0], a_192883, b_192884) - p_192882);
						t_192892 = Math.exp((((a1_192887 * Math.log(x_192895[0])) + (b1_192888 * Math.log((1.0000000000000000e+00 - x_192895[0])))) + afac_192899));
						u_192893 = (err_192894 / t_192892);
						t_192892 = (u_192893 / (1.0000000000000000e+00 - (5.0000000000000000e-01 * nimMin(1.0000000000000000e+00, (u_192893 * ((a1_192887 / x_192895[0]) - (b1_192888 / (1.0000000000000000e+00 - x_192895[0]))))))));
						HEX2DHEX3D_168580(x_192895, 0, t_192892);
						if ((x_192895[0] <= 0.0)) {
						x_192895[0] = (5.0000000000000000e-01 * (x_192895[0] + t_192892));
						}
						
						if ((1.0000000000000000e+00 <= x_192895[0])) {
						x_192895[0] = (5.0000000000000000e-01 * ((x_192895[0] + t_192892) + 1.0000000000000000e+00));
						}
						
							if (!(Math.abs(t_192892) < (1.0000000000000000e-08 * x_192895[0]))) Tmp6 = false; else {								Tmp6 = (0 < j_192916);							}						if (Tmp6) {
						break L3;
						}
						
						res_192932 += 1;
					}
			} while(false);
		} while(false);
		result_192885 = x_192895[0];
		break BeforeRet;
	} while (false);

	return result_192885;

}

function inv_197855(d_197857, p_197858) {
		var Tmp1;

	var result_197859 = 0.0;

	BeforeRet: do {
		var x_197860 = ibetainv_192880((2.0000000000000000e+00 * nimMin(p_197858, (1.0000000000000000e+00 - p_197858))), (5.0000000000000000e-01 * d_197857.dof), 5.0000000000000000e-01);
		x_197860 = Math.sqrt(((d_197857.dof * (1.0000000000000000e+00 - x_197860)) / x_197860));
		if ((5.0000000000000000e-01 < p_197858)) {
		Tmp1 = x_197860;
		}
		else {
		Tmp1 = -(x_197860);
		}
		
		result_197859 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_197859;

}

function inv_213270(d_213275, p_213277) {
	var result_213278 = 0.0;

		result_213278 = ((inv_197855(d_213275.distribution, p_213277) * d_213275.scale) + d_213275.location);

	return result_213278;

}

function confidence_interval_213248(sd_213253, alpha_213255) {
	var result_213256 = null;

		result_213256 = nimCopy(null, [inv_213270(sd_213253.distribution, (5.0000000000000000e-01 * alpha_213255)), inv_213270(sd_213253.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_213255)))], NTI207502);

	return result_213256;

}

function test_score_215041(d_215046) {
	var result_215047 = 0.0;

		result_215047 = (d_215046.distribution.location / d_215046.distribution.scale);

	return result_215047;

}

function cdf_197836(d_197838, x_197839) {
	var result_197840 = 0.0;

	BeforeRet: do {
		var dof2_197841 = (d_197838.dof * 5.0000000000000000e-01);
		result_197840 = ibeta_192860(((x_197839 + Math.sqrt(((x_197839 * x_197839) + d_197838.dof))) / (2.0000000000000000e+00 * Math.sqrt(((x_197839 * x_197839) + d_197838.dof)))), dof2_197841, dof2_197841);
		break BeforeRet;
	} while (false);

	return result_197840;

}

function cdf_216538(d_216543, x_216545) {
	var result_216546 = 0.0;

		result_216546 = cdf_197836(d_216543.distribution, ((x_216545 - d_216543.location) / d_216543.scale));

	return result_216546;

}

function p_value_216510(sd_216515) {
		var Tmp1;
			var Tmp2;

	var result_216516 = 0.0;

	BeforeRet: do {
		if ((sd_216515.test_type == 0)) {
		result_216516 = ((1.0000000000000000e+00 - cdf_216538(sd_216515.distribution, Math.abs(sd_216515.test_score))) + cdf_216538(sd_216515.distribution, -(Math.abs(sd_216515.test_score))));
		break BeforeRet;
		}
		
		if ((sd_216515.test_type == 3)) {
		result_216516 = cdf_216538(sd_216515.distribution, sd_216515.test_score);
		break BeforeRet;
		}
		
		if ((sd_216515.test_type == 2)) {
		result_216516 = (1.0000000000000000e+00 - cdf_216538(sd_216515.distribution, sd_216515.test_score));
		break BeforeRet;
		}
		
		var p1_216661 = (1.0000000000000000e+00 - cdf_216538(sd_216515.distribution, sd_216515.test_score));
		var p2_216682 = cdf_216538(sd_216515.distribution, sd_216515.test_score);
			if (!(p1_216661 < p2_216682)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_216661);			}		if (Tmp2) {
		Tmp1 = p1_216661;
		}
		else {
		Tmp1 = p2_216682;
		}
		
		result_216516 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_216516;

}

function p_value_216452(d_216457) {
	var result_216458 = 0.0;

		result_216458 = p_value_216510(d_216457.hypothesis_test);

	return result_216458;

}

function estimate_as_string_210589(estimator_210594, title_210596, name_210598) {
	var result_210599 = null;

		if (title_210596) {
		var fmt_res_210603 = mnewString(0);
		if (fmt_res_210603 != null) { fmt_res_210603 = (fmt_res_210603).concat(makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A")); } else { fmt_res_210603 = makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A"); };
		if (result_210599 != null) { result_210599 = (result_210599).concat((nsuRepeatStr(makeNimstrLit(" "), ((name_210598 != null ? name_210598.length : 0) + 1))).concat(fmt_res_210603)); } else { result_210599 = (nsuRepeatStr(makeNimstrLit(" "), ((name_210598 != null ? name_210598.length : 0) + 1))).concat(fmt_res_210603).slice(); };
		}
		
		var fmt_res_210607 = [mnewString(0)];
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit(" ")); } else { fmt_res_210607[0] = makeNimstrLit(" "); };
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(name_210598); } else { fmt_res_210607[0] = name_210598.slice(); };
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit("|")); } else { fmt_res_210607[0] = makeNimstrLit("|"); };
		format_195002(estimate_211448(estimator_210594), makeNimstrLit(">9.5f"), fmt_res_210607, 0);
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit("| ")); } else { fmt_res_210607[0] = makeNimstrLit("| "); };
		format_195002(standard_deviation_212258(estimator_210594), makeNimstrLit(">9.5f"), fmt_res_210607, 0);
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit("| ")); } else { fmt_res_210607[0] = makeNimstrLit("| "); };
		format_195002(confidence_interval_213248(estimator_210594, 5.0000000000000003e-02)[0], makeNimstrLit(">9.5f"), fmt_res_210607, 0);
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit(" ")); } else { fmt_res_210607[0] = makeNimstrLit(" "); };
		format_195002(confidence_interval_213248(estimator_210594, 5.0000000000000003e-02)[1], makeNimstrLit(">9.5f"), fmt_res_210607, 0);
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit("| ")); } else { fmt_res_210607[0] = makeNimstrLit("| "); };
		format_195002(test_score_215041(estimator_210594), makeNimstrLit(">9.5f"), fmt_res_210607, 0);
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit("| ")); } else { fmt_res_210607[0] = makeNimstrLit("| "); };
		format_195002(p_value_216452(estimator_210594), makeNimstrLit(">9.5e"), fmt_res_210607, 0);
		if (fmt_res_210607[0] != null) { fmt_res_210607[0] = (fmt_res_210607[0]).concat(makeNimstrLit("|")); } else { fmt_res_210607[0] = makeNimstrLit("|"); };
		if (result_210599 != null) { result_210599 = (result_210599).concat(fmt_res_210607[0]); } else { result_210599 = fmt_res_210607[0].slice(); };

	return result_210599;

}

function standard_deviation_218858(sd_218863) {
	var result_218864 = 0.0;

		result_218864 = sd_218863.distribution.scale;

	return result_218864;

}

function inv_200662(d_200664, p_200665) {
	var result_200666 = 0.0;

	BeforeRet: do {
		result_200666 = (d_200664.scale / gammapinv_192662((1.0000000000000000e+00 - p_200665), d_200664.shape));
		break BeforeRet;
	} while (false);

	return result_200666;

}

function inv_201679(d_201681, p_201682) {
	var result_201683 = 0.0;

		result_201683 = inv_200662(as_inv_gamma_201625(d_201681), p_201682);

	return result_201683;

}

function inv_219870(d_219875, p_219877) {
	var result_219878 = 0.0;

		result_219878 = ((inv_201679(d_219875.distribution, p_219877) * d_219875.scale) + d_219875.location);

	return result_219878;

}

function confidence_interval_219848(sd_219853, alpha_219855) {
	var result_219856 = null;

		result_219856 = nimCopy(null, [inv_219870(sd_219853.distribution, (5.0000000000000000e-01 * alpha_219855)), inv_219870(sd_219853.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_219855)))], NTI207502);

	return result_219856;

}

function test_score_221641(d_221646) {
	var result_221647 = 0.0;

		result_221647 = (d_221646.distribution.location / d_221646.distribution.scale);

	return result_221647;

}

function cdf_200643(d_200645, x_200646) {
	var result_200647 = 0.0;

	BeforeRet: do {
		if ((x_200646 < 0.0)) {
		result_200647 = 0.0;
		break BeforeRet;
		}
		
		result_200647 = (1.0000000000000000e+00 - low_reg_gamma_192313(d_200645.shape, (d_200645.scale / x_200646)));
		break BeforeRet;
	} while (false);

	return result_200647;

}

function cdf_201661(d_201663, x_201664) {
	var result_201665 = 0.0;

		result_201665 = cdf_200643(as_inv_gamma_201625(d_201663), x_201664);

	return result_201665;

}

function cdf_223138(d_223143, x_223145) {
	var result_223146 = 0.0;

		result_223146 = cdf_201661(d_223143.distribution, ((x_223145 - d_223143.location) / d_223143.scale));

	return result_223146;

}

function p_value_223110(sd_223115) {
		var Tmp1;
			var Tmp2;

	var result_223116 = 0.0;

	BeforeRet: do {
		if ((sd_223115.test_type == 0)) {
		result_223116 = ((1.0000000000000000e+00 - cdf_223138(sd_223115.distribution, Math.abs(sd_223115.test_score))) + cdf_223138(sd_223115.distribution, -(Math.abs(sd_223115.test_score))));
		break BeforeRet;
		}
		
		if ((sd_223115.test_type == 3)) {
		result_223116 = cdf_223138(sd_223115.distribution, sd_223115.test_score);
		break BeforeRet;
		}
		
		if ((sd_223115.test_type == 2)) {
		result_223116 = (1.0000000000000000e+00 - cdf_223138(sd_223115.distribution, sd_223115.test_score));
		break BeforeRet;
		}
		
		var p1_223261 = (1.0000000000000000e+00 - cdf_223138(sd_223115.distribution, sd_223115.test_score));
		var p2_223282 = cdf_223138(sd_223115.distribution, sd_223115.test_score);
			if (!(p1_223261 < p2_223282)) Tmp2 = false; else {				Tmp2 = (0.0 <= p1_223261);			}		if (Tmp2) {
		Tmp1 = p1_223261;
		}
		else {
		Tmp1 = p2_223282;
		}
		
		result_223116 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_223116;

}

function p_value_223052(d_223057) {
	var result_223058 = 0.0;

		result_223058 = p_value_223110(d_223057.hypothesis_test);

	return result_223058;

}

function estimate_as_string_234571(estimator_234576, title_234578, name_234580) {
	var result_234581 = null;

		if (title_234578) {
		var fmt_res_234585 = mnewString(0);
		if (fmt_res_234585 != null) { fmt_res_234585 = (fmt_res_234585).concat(makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A")); } else { fmt_res_234585 = makeNimstrLit("| Estimate| Std. dev.| Confidence int. 95%|   t-value|   p-value| \x0A"); };
		if (result_234581 != null) { result_234581 = (result_234581).concat((nsuRepeatStr(makeNimstrLit(" "), ((name_234580 != null ? name_234580.length : 0) + 1))).concat(fmt_res_234585)); } else { result_234581 = (nsuRepeatStr(makeNimstrLit(" "), ((name_234580 != null ? name_234580.length : 0) + 1))).concat(fmt_res_234585).slice(); };
		}
		
		var fmt_res_234589 = [mnewString(0)];
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit(" ")); } else { fmt_res_234589[0] = makeNimstrLit(" "); };
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(name_234580); } else { fmt_res_234589[0] = name_234580.slice(); };
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit("|")); } else { fmt_res_234589[0] = makeNimstrLit("|"); };
		format_195002(estimate_218048(estimator_234576), makeNimstrLit(">9.5f"), fmt_res_234589, 0);
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit("| ")); } else { fmt_res_234589[0] = makeNimstrLit("| "); };
		format_195002(standard_deviation_218858(estimator_234576), makeNimstrLit(">9.5f"), fmt_res_234589, 0);
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit("| ")); } else { fmt_res_234589[0] = makeNimstrLit("| "); };
		format_195002(confidence_interval_219848(estimator_234576, 5.0000000000000003e-02)[0], makeNimstrLit(">9.5f"), fmt_res_234589, 0);
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit(" ")); } else { fmt_res_234589[0] = makeNimstrLit(" "); };
		format_195002(confidence_interval_219848(estimator_234576, 5.0000000000000003e-02)[1], makeNimstrLit(">9.5f"), fmt_res_234589, 0);
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit("| ")); } else { fmt_res_234589[0] = makeNimstrLit("| "); };
		format_195002(test_score_221641(estimator_234576), makeNimstrLit(">9.5f"), fmt_res_234589, 0);
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit("| ")); } else { fmt_res_234589[0] = makeNimstrLit("| "); };
		format_195002(p_value_223052(estimator_234576), makeNimstrLit(">9.5e"), fmt_res_234589, 0);
		if (fmt_res_234589[0] != null) { fmt_res_234589[0] = (fmt_res_234589[0]).concat(makeNimstrLit("|")); } else { fmt_res_234589[0] = makeNimstrLit("|"); };
		if (result_234581 != null) { result_234581 = (result_234581).concat(fmt_res_234589[0]); } else { result_234581 = fmt_res_234589[0].slice(); };

	return result_234581;

}

function mk_digit_146621(v_146623, typ_146624) {
			var Tmp1;

	var result_146625 = null;

		if ((v_146623 < 10)) {
		result_146625 = nimCopy(null, nimCharToStr((48 + v_146623)), NTI138);
		}
		else {
			if ((typ_146624 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_146625 = nimCopy(null, nimCharToStr(((Tmp1 + v_146623) - 10)), NTI138);
		}
		

	return result_146625;

}

function format_int_240429(n_240433, radix_240435, spec_240437) {
		var Tmp7;

	var result_240438 = null;

		var v_240601 = n_240433;
		var negative_240602 = (v_240601 < 0);
		if (negative_240602) {
		v_240601 = (v_240601 * -1);
		}
		
		var xx_240604 = [];
		if (spec_240437.alternateForm) {
		switch (spec_240437.typ) {
		case 88:
			xx_240604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			xx_240604 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			xx_240604 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			xx_240604 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_240601 == 0)) {
		result_240438 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			result_240438 = nimCopy(null, [], NTI138);
			L1: do {
					L2: while (true) {
					if (!(0 < v_240601)) break L2;
						var d_240607 = Math.trunc(v_240601 % radix_240435);
						v_240601 = Math.trunc(v_240601 / radix_240435);
						if (result_240438 != null) { result_240438 = (result_240438).concat(mk_digit_146621(d_240607, spec_240437.typ)); } else { result_240438 = mk_digit_146621(d_240607, spec_240437.typ).slice(); };
					}
			} while(false);
			L3: do {
				var idx_240618 = 0;
				var colontmp__240664 = 0;
				colontmp__240664 = Math.trunc((result_240438 != null ? result_240438.length : 0) / 2);
				var i_240667 = 0;
				L4: do {
						L5: while (true) {
						if (!(i_240667 < colontmp__240664)) break L5;
							idx_240618 = i_240667;
							var Tmp6 = result_240438[idx_240618]; result_240438[idx_240618] = result_240438[(((result_240438 != null ? result_240438.length : 0) - idx_240618) - 1)]; result_240438[(((result_240438 != null ? result_240438.length : 0) - idx_240618) - 1)] = Tmp6;							i_240667 += 1;
						}
				} while(false);
			} while(false);
		}
		
		if (spec_240437.padWithZero) {
		if (negative_240602) Tmp7 = true; else {			Tmp7 = !((spec_240437.sign == 45));		}		var sign_240637 = Tmp7;
		var to_fill_240644 = (((spec_240437.minimumWidth - (result_240438 != null ? result_240438.length : 0)) - (xx_240604 != null ? xx_240604.length : 0)) - (sign_240637 ? 1:0));
		if ((0 < to_fill_240644)) {
		result_240438 = nimCopy(null, (nsuRepeatChar(48, to_fill_240644)).concat(result_240438), NTI138);
		}
		
		}
		
		if (negative_240602) {
		result_240438 = nimCopy(null, (makeNimstrLit("-")).concat(xx_240604,result_240438), NTI138);
		}
		else {
		if (!((spec_240437.sign == 45))) {
		result_240438 = nimCopy(null, [spec_240437.sign].concat(xx_240604,result_240438), NTI138);
		}
		else {
			result_240438 = nimCopy(null, (xx_240604).concat(result_240438), NTI138);
		}
		}
		if ((spec_240437.align == 60)) {
		L8: do {
			var i_240655 = 0;
			var colontmp__240670 = 0;
			var colontmp__240671 = 0;
			colontmp__240670 = (result_240438 != null ? result_240438.length : 0);
			colontmp__240671 = spec_240437.minimumWidth;
			var i_240674 = colontmp__240670;
			L9: do {
					L10: while (true) {
					if (!(i_240674 < colontmp__240671)) break L10;
						i_240655 = i_240674;
						if (result_240438 != null) { addChar(result_240438, spec_240437.fill); } else { result_240438 = [spec_240437.fill]; };
						i_240674 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			var to_fill_240656 = (spec_240437.minimumWidth - (result_240438 != null ? result_240438.length : 0));
			if ((spec_240437.align == 94)) {
			var half_240657 = Math.trunc(to_fill_240656 / 2);
			result_240438 = nimCopy(null, (nsuRepeatChar(spec_240437.fill, half_240657)).concat(result_240438,nsuRepeatChar(spec_240437.fill, (to_fill_240656 - half_240657))), NTI138);
			}
			else {
				if ((0 < to_fill_240656)) {
				result_240438 = nimCopy(null, (nsuRepeatChar(spec_240437.fill, to_fill_240656)).concat(result_240438), NTI138);
				}
				
			}
			
		}
		

	return result_240438;

}

function format_240402(value_240406, specifier_240408, res_240410, res_240410_Idx) {
		var spec_240411 = parse_standard_format_specifier_146928(specifier_240408, 0, false);
		var radix_240413 = 10;
		switch (spec_240411.typ) {
		case 120:
		case 88:
			radix_240413 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			radix_240413 = 2;
			break;
		case 111:
			radix_240413 = 8;
			break;
		default: 
			var e_240419 = null;
			e_240419 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			e_240419.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ")).concat([spec_240411.typ]), NTI138);
			e_240419.parent = null;
			raiseException(e_240419, "ValueError");
			break;
		}
		if (res_240410[res_240410_Idx] != null) { res_240410[res_240410_Idx] = (res_240410[res_240410_Idx]).concat(format_int_240429(value_240406, radix_240413, spec_240411)); } else { res_240410[res_240410_Idx] = format_int_240429(value_240406, radix_240413, spec_240411).slice(); };

	
}

function nsuFindChar(s_141416, sub_141417, start_141418, last_141419) {
		var Tmp1;

	var result_141421 = 0;

	BeforeRet: do {
		if ((last_141419 == 0)) {
		Tmp1 = (s_141416 != null ? (s_141416.length-1) : -1);
		}
		else {
		Tmp1 = last_141419;
		}
		
		var last_141423 = Tmp1;
		L2: do {
			var i_141809 = 0;
			var colontmp__142013 = 0;
			colontmp__142013 = start_141418;
			var res_142016 = colontmp__142013;
			L3: do {
					L4: while (true) {
					if (!(res_142016 <= last_141423)) break L4;
						i_141809 = res_142016;
						if ((sub_141417 == s_141416[i_141809])) {
						result_141421 = i_141809;
						break BeforeRet;
						}
						
						res_142016 += 1;
					}
			} while(false);
		} while(false);
		result_141421 = -1;
		break BeforeRet;
	} while (false);

	return result_141421;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

		var first_23428 = nimMax(first_23425, 0);
		var l_23430 = nimMax(((nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)) - first_23428) + 1), 0);
		result_23427 = nimCopy(null, mnewString(l_23430), NTI138);
		L1: do {
			var i_23442 = 0;
			var colontmp__23444 = 0;
			colontmp__23444 = (l_23430 - 1);
			var res_23447 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						i_23442 = res_23447;
						result_23427[i_23442] = s_23424[(i_23442 + first_23428)];
						res_23447 += 1;
					}
			} while(false);
		} while(false);

	return result_23427;

}

function substr_23464(s_23466, first_23467) {
	var result_23469 = null;

		result_23469 = nimCopy(null, substr_23422(s_23466, first_23467, (s_23466 != null ? (s_23466.length-1) : -1)), NTI138);

	return result_23469;

}

function nsuInitSkipTable(a_141262, sub_141263) {
		var m_141264 = (sub_141263 != null ? sub_141263.length : 0);
		var i_141266 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_141266 <= 248)) break L2;
					a_141262[(i_141266 + 0)] = m_141264;
					a_141262[(i_141266 + 1)] = m_141264;
					a_141262[(i_141266 + 2)] = m_141264;
					a_141262[(i_141266 + 3)] = m_141264;
					a_141262[(i_141266 + 4)] = m_141264;
					a_141262[(i_141266 + 5)] = m_141264;
					a_141262[(i_141266 + 6)] = m_141264;
					a_141262[(i_141266 + 7)] = m_141264;
					i_141266 += 8;
				}
		} while(false);
		L3: do {
			var i_141288 = 0;
			var colontmp__141291 = 0;
			colontmp__141291 = (m_141264 - 1);
			var i_141294 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_141294 < colontmp__141291)) break L5;
						i_141288 = i_141294;
						a_141262[sub_141263[i_141288]] = ((m_141264 - 1) - i_141288);
						i_141294 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_141311, s_141312, sub_141313, start_141314, last_141315) {
		var Tmp1;

	var result_141317 = 0;

	BeforeRet: do {
		if ((last_141315 == 0)) {
		Tmp1 = (s_141312 != null ? (s_141312.length-1) : -1);
		}
		else {
		Tmp1 = last_141315;
		}
		
		var last_141319 = Tmp1;
		var s_len_141320 = ((last_141319 - start_141314) + 1);
		var sub_last_141321 = ((sub_141313 != null ? sub_141313.length : 0) - 1);
		if ((sub_last_141321 == -1)) {
		result_141317 = start_141314;
		break BeforeRet;
		}
		
		var skip_141323 = start_141314;
		L2: do {
				L3: while (true) {
				if (!(sub_last_141321 <= (last_141319 - skip_141323))) break L3;
					var i_141324 = sub_last_141321;
					L4: do {
							L5: while (true) {
							if (!(s_141312[(skip_141323 + i_141324)] == sub_141313[i_141324])) break L5;
								if ((i_141324 == 0)) {
								result_141317 = skip_141323;
								break BeforeRet;
								}
								
								i_141324 -= 1;
							}
					} while(false);
					skip_141323 += a_141311[s_141312[(skip_141323 + sub_last_141321)]];
				}
		} while(false);
		result_141317 = -1;
		break BeforeRet;
	} while (false);

	return result_141317;

}

function nsuReplaceStr(s_142719, sub_142720, by_142721) {
	var result_142722 = null;

		result_142722 = nimCopy(null, [], NTI138);
		var sub_len_142723 = (sub_142720 != null ? sub_142720.length : 0);
		if ((sub_len_142723 == 0)) {
		result_142722 = nimCopy(null, s_142719, NTI138);
		}
		else {
		if ((sub_len_142723 == 1)) {
		var c_142724 = sub_142720[0];
		var last_142726 = (s_142719 != null ? (s_142719.length-1) : -1);
		var i_142728 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var j_142729 = nsuFindChar(s_142719, c_142724, i_142728, last_142726);
					if ((j_142729 < 0)) {
					break L1;
					}
					
					if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23422(s_142719, i_142728, (j_142729 - 1))); } else { result_142722 = substr_23422(s_142719, i_142728, (j_142729 - 1)).slice(); };
					if (result_142722 != null) { result_142722 = (result_142722).concat(by_142721); } else { result_142722 = by_142721.slice(); };
					i_142728 = (j_142729 + sub_len_142723);
				}
		} while(false);
		if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23464(s_142719, i_142728)); } else { result_142722 = substr_23464(s_142719, i_142728).slice(); };
		}
		else {
			var a_142730 = [new Int32Array(256)];
			nsuInitSkipTable(a_142730[0], sub_142720);
			var last_142733 = (s_142719 != null ? (s_142719.length-1) : -1);
			var i_142735 = 0;
			L3: do {
					L4: while (true) {
					if (!true) break L4;
						var j_142736 = nsuFindStrA(a_142730[0], s_142719, sub_142720, i_142735, last_142733);
						if ((j_142736 < 0)) {
						break L3;
						}
						
						if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23422(s_142719, i_142735, (j_142736 - 1))); } else { result_142722 = substr_23422(s_142719, i_142735, (j_142736 - 1)).slice(); };
						if (result_142722 != null) { result_142722 = (result_142722).concat(by_142721); } else { result_142722 = by_142721.slice(); };
						i_142735 = (j_142736 + sub_len_142723);
					}
			} while(false);
			if (result_142722 != null) { result_142722 = (result_142722).concat(substr_23464(s_142719, i_142735)); } else { result_142722 = substr_23464(s_142719, i_142735).slice(); };
		}
		}

	return result_142722;

}

function HEX24_241002(d_241006) {
	var result_241007 = null;

		var fmt_res_241011 = mnewString(0);
		if (fmt_res_241011 != null) { fmt_res_241011 = (fmt_res_241011).concat(makeNimstrLit("[Hypothesis test]\x0A* Null distribution: ")); } else { fmt_res_241011 = makeNimstrLit("[Hypothesis test]\x0A* Null distribution: "); };
		if (fmt_res_241011 != null) { fmt_res_241011 = (fmt_res_241011).concat(HEX24_199078(d_241006.distribution)); } else { fmt_res_241011 = HEX24_199078(d_241006.distribution).slice(); };
		if (fmt_res_241011 != null) { fmt_res_241011 = (fmt_res_241011).concat(makeNimstrLit(" \x0A")); } else { fmt_res_241011 = makeNimstrLit(" \x0A"); };
		if (result_241007 != null) { result_241007 = (result_241007).concat(fmt_res_241011); } else { result_241007 = fmt_res_241011.slice(); };
		var fmt_res_241203 = mnewString(0);
		if (fmt_res_241203 != null) { fmt_res_241203 = (fmt_res_241203).concat(makeNimstrLit("      Null C.I. 95%| Test value|    p-value| \x0A")); } else { fmt_res_241203 = makeNimstrLit("      Null C.I. 95%| Test value|    p-value| \x0A"); };
		if (result_241007 != null) { result_241007 = (result_241007).concat(fmt_res_241203); } else { result_241007 = fmt_res_241203.slice(); };
		var fmt_res_241207 = [mnewString(0)];
		format_195002(null_confidence_interval_241413(d_241006, 5.0000000000000003e-02)[0], makeNimstrLit(">9.5f"), fmt_res_241207, 0);
		if (fmt_res_241207[0] != null) { fmt_res_241207[0] = (fmt_res_241207[0]).concat(makeNimstrLit(" ")); } else { fmt_res_241207[0] = makeNimstrLit(" "); };
		format_195002(null_confidence_interval_241413(d_241006, 5.0000000000000003e-02)[1], makeNimstrLit(">9.5f"), fmt_res_241207, 0);
		if (fmt_res_241207[0] != null) { fmt_res_241207[0] = (fmt_res_241207[0]).concat(makeNimstrLit("|  ")); } else { fmt_res_241207[0] = makeNimstrLit("|  "); };
		format_195002(d_241006.test_score, makeNimstrLit(">9.5f"), fmt_res_241207, 0);
		if (fmt_res_241207[0] != null) { fmt_res_241207[0] = (fmt_res_241207[0]).concat(makeNimstrLit("| ")); } else { fmt_res_241207[0] = makeNimstrLit("| "); };
		format_195002(p_value_243852(d_241006), makeNimstrLit(">9.5e"), fmt_res_241207, 0);
		if (fmt_res_241207[0] != null) { fmt_res_241207[0] = (fmt_res_241207[0]).concat(makeNimstrLit("|")); } else { fmt_res_241207[0] = makeNimstrLit("|"); };
		if (result_241007 != null) { result_241007 = (result_241007).concat(fmt_res_241207[0]); } else { result_241007 = fmt_res_241207[0].slice(); };

	return result_241007;

}

function HEX24_234227(model_234229) {
						var Tmp4;

	var result_234230 = null;

		result_234230 = nimCopy(null, makeNimstrLit("[Robust Interrupted Time Series Model]\x0A"), NTI138);
		if (result_234230 != null) { result_234230 = (result_234230).concat(makeNimstrLit("* Coefficients:\x0A")); } else { result_234230 = makeNimstrLit("* Coefficients:\x0A"); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_210589(model_234229.model.before_model.coefficients[0], true, makeNimstrLit("       slope (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_210589(model_234229.model.before_model.coefficients[0], true, makeNimstrLit("       slope (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_210589(model_234229.model.before_model.coefficients[1], false, makeNimstrLit("   intercept (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_210589(model_234229.model.before_model.coefficients[1], false, makeNimstrLit("   intercept (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_210589(model_234229.model.before_residual_model.coefficients[0], false, makeNimstrLit("    autocorr (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_210589(model_234229.model.before_residual_model.coefficients[0], false, makeNimstrLit("    autocorr (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_210589(model_234229.model.after_model.coefficients[0], false, makeNimstrLit("      slope (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_210589(model_234229.model.after_model.coefficients[0], false, makeNimstrLit("      slope (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_210589(model_234229.model.after_model.coefficients[1], false, makeNimstrLit("  intercept (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_210589(model_234229.model.after_model.coefficients[1], false, makeNimstrLit("  intercept (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_210589(model_234229.model.after_residual_model.coefficients[0], false, makeNimstrLit("   autocorr (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_210589(model_234229.model.after_residual_model.coefficients[0], false, makeNimstrLit("   autocorr (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat(makeNimstrLit("* Noise estimates:\x0A")); } else { result_234230 = makeNimstrLit("* Noise estimates:\x0A"); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_234571(model_234229.model.before_residual_model.noise_variance, false, makeNimstrLit("    variance (pre)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_234571(model_234229.model.before_residual_model.noise_variance, false, makeNimstrLit("    variance (pre)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat((estimate_as_string_234571(model_234229.model.after_residual_model.noise_variance, false, makeNimstrLit("   variance (post)"))).concat(makeNimstrLit("\x0A"))); } else { result_234230 = (estimate_as_string_234571(model_234229.model.after_residual_model.noise_variance, false, makeNimstrLit("   variance (post)"))).concat(makeNimstrLit("\x0A")).slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat(makeNimstrLit("* Log-likelihood evaluations:\x0A")); } else { result_234230 = makeNimstrLit("* Log-likelihood evaluations:\x0A"); };
		if (result_234230 != null) { result_234230 = (result_234230).concat(makeNimstrLit(" Change-point| Log-likelihood\x0A")); } else { result_234230 = makeNimstrLit(" Change-point| Log-likelihood\x0A"); };
		L1: do {
			var k_239953 = 0;
			var colontmp__243930 = 0;
			colontmp__243930 = (model_234229.change_point_candidates != null ? (model_234229.change_point_candidates.length-1) : -1);
			var res_243933 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_243933 <= colontmp__243930)) break L3;
						k_239953 = res_243933;
						var fmt_res_239957 = [mnewString(0)];
						if (fmt_res_239957[0] != null) { fmt_res_239957[0] = (fmt_res_239957[0]).concat(makeNimstrLit("       ")); } else { fmt_res_239957[0] = makeNimstrLit("       "); };
						format_240402(model_234229.change_point_candidates[k_239953], makeNimstrLit(">5"), fmt_res_239957, 0);
						if (fmt_res_239957[0] != null) { fmt_res_239957[0] = (fmt_res_239957[0]).concat(makeNimstrLit(" | ")); } else { fmt_res_239957[0] = makeNimstrLit(" | "); };
						format_195002(model_234229.loglikelihood_candidates[k_239953], makeNimstrLit(".3f"), fmt_res_239957, 0);
						if (fmt_res_239957[0] != null) { fmt_res_239957[0] = (fmt_res_239957[0]).concat(makeNimstrLit(" ")); } else { fmt_res_239957[0] = makeNimstrLit(" "); };
						if ((model_234229.change_point_candidates[k_239953] == model_234229.change_point_index)) {
						Tmp4 = makeNimstrLit("***\x0A");
						}
						else {
						Tmp4 = makeNimstrLit("\x0A");
						}
						
						if (result_234230 != null) { result_234230 = (result_234230).concat((fmt_res_239957[0]).concat(Tmp4)); } else { result_234230 = (fmt_res_239957[0]).concat(Tmp4).slice(); };
						res_243933 += 1;
					}
			} while(false);
		} while(false);
		if (result_234230 != null) { result_234230 = (result_234230).concat(makeNimstrLit("* Wald test:\x0A")); } else { result_234230 = makeNimstrLit("* Wald test:\x0A"); };
		var fmt_res_240815 = mnewString(0);
		if (fmt_res_240815 != null) { fmt_res_240815 = (fmt_res_240815).concat(makeNimstrLit("  H0: There is not change point at ")); } else { fmt_res_240815 = makeNimstrLit("  H0: There is not change point at "); };
		if (fmt_res_240815 != null) { fmt_res_240815 = (fmt_res_240815).concat(cstrToNimstr((model_234229.change_point_x)+"")); } else { fmt_res_240815 = cstrToNimstr((model_234229.change_point_x)+"").slice(); };
		if (fmt_res_240815 != null) { fmt_res_240815 = (fmt_res_240815).concat(makeNimstrLit(":\x0A")); } else { fmt_res_240815 = makeNimstrLit(":\x0A"); };
		if (result_234230 != null) { result_234230 = (result_234230).concat(fmt_res_240815); } else { result_234230 = fmt_res_240815.slice(); };
		if (result_234230 != null) { result_234230 = (result_234230).concat(makeNimstrLit("  H1: At least one of the after C.P. parameters is not 0:\x0A  ")); } else { result_234230 = makeNimstrLit("  H1: At least one of the after C.P. parameters is not 0:\x0A  "); };
		if (result_234230 != null) { result_234230 = (result_234230).concat(nsuReplaceStr(HEX24_241002(model_234229.model.existence_change_point_hypothesis), makeNimstrLit("\x0A"), makeNimstrLit("\x0A  "))); } else { result_234230 = nsuReplaceStr(HEX24_241002(model_234229.model.existence_change_point_hypothesis), makeNimstrLit("\x0A"), makeNimstrLit("\x0A  ")).slice(); };

	return result_234230;

}

function new_ritsperiod_249173() {
	var result_249175 = null;

		result_249175 = {slope: null, intercept: null, autocorrelation: null, noise: null, residuals: null};
		result_249175.slope = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_249175.intercept = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_249175.autocorrelation = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_249175.noise = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_249175.residuals = {values: null, autocorrelation: null, autocorrelation_null_confidence_interval: null};

	return result_249175;

}

function clean_nan_249286(v_249288, d_249289) {
							var Tmp5;

	var result_249290 = null;

		L1: do {
			var i_249410 = 0;
			var result_249427 = new_seq_193272((v_249288 != null ? v_249288.length : 0));
			L2: do {
				var it_249436 = 0.0;
				var i_249460 = 0;
				var l_249462 = (v_249288 != null ? v_249288.length : 0);
				L3: do {
						L4: while (true) {
						if (!(i_249460 < l_249462)) break L4;
							it_249436 = v_249288[i_249460];
							if ((classify_29030(it_249436) == 4)) {
							Tmp5 = d_249289;
							}
							else {
							Tmp5 = it_249436;
							}
							
							result_249427[i_249410] = Tmp5;
							i_249410 += 1;
							i_249460 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		result_249290 = nimCopy(null, result_249427, NTI193277);

	return result_249290;

}

function sum_153414(a_153416) {
	var result_153417 = [0.0];

		L1: do {
			var k_153441 = 0;
			var colontmp__153453 = 0;
			colontmp__153453 = (a_153416 != null ? (a_153416.length-1) : -1);
			var res_153456 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_153456 <= colontmp__153453)) break L3;
						k_153441 = res_153456;
						HEX2BHEX3D_44127(result_153417, 0, a_153416[k_153441]);
						res_153456 += 1;
					}
			} while(false);
		} while(false);

	return result_153417[0];

}

function multiply_149614(a_149616, b_149617) {
	var result_149618 = null;

		L1: do {
			var k_149824 = 0;
			var colontmp__149836 = 0;
			colontmp__149836 = (a_149616 != null ? (a_149616.length-1) : -1);
			var res_149839 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_149839 <= colontmp__149836)) break L3;
						k_149824 = res_149839;
						if (result_149618 != null) { result_149618.push((a_149616[k_149824] * b_149617[k_149824])); } else { result_149618 = [(a_149616[k_149824] * b_149617[k_149824])]; };
						res_149839 += 1;
					}
			} while(false);
		} while(false);

	return result_149618;

}

function HEX2A_149934(a_149936, b_149937) {
	var result_149938 = null;

		result_149938 = nimCopy(null, multiply_149614(a_149936, b_149937), NTI148064);

	return result_149938;

}

function scaled_shifted_208556(distribution_208560, location_208562, scale_208564) {
	var result_208566 = null;

		result_208566 = {distribution: null, location: 0.0, scale: 0.0};
		result_208566.distribution = distribution_208560;
		result_208566.location = location_208562;
		result_208566.scale = scale_208564;

	return result_208566;

}

function htest_score_208611(distribution_208615, score_208617, test_type_208619) {
	var result_208621 = null;

		result_208621 = {distribution: null, test_score: 0.0, test_type: 0};
		result_208621.distribution = distribution_208615;
		result_208621.test_score = score_208617;
		result_208621.test_type = test_type_208619;

	return result_208621;

}

function shifted_estimator_208544(distribution_208548, location_208550, scale_208552) {
	var result_208554 = null;

		var est_distribution_208588 = scaled_shifted_208556(distribution_208548, location_208550, scale_208552);
		var est_null_distribution_208600 = scaled_shifted_208556(distribution_208548, 0.0, scale_208552);
		result_208554 = {distribution: null, hypothesis_test: null};
		result_208554.distribution = est_distribution_208588;
		result_208554.hypothesis_test = htest_score_208611(est_null_distribution_208600, location_208550, 0);

	return result_208554;

}

function autocorrelation_function_208057(x_208059, max_lags_208060) {
	var result_208061 = null;

		result_208061 = {estimators: null, null_distribution: null, estimators_mean: null, lags: null};
		var x_mean_208071 = mean_155214(x_208059, 0);
		var n_208080 = (x_208059 != null ? (x_208059.length-1) : -1);
		L1: do {
			var k_208092 = 0;
			var colontmp__208678 = 0;
			colontmp__208678 = nimMin(max_lags_208060, n_208080);
			var res_208681 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_208681 <= colontmp__208678)) break L3;
						k_208092 = res_208681;
						var acf_208483 = (sum_153414(HEX2A_149934(HEX2D_149310(HEX5BHEX5D_208119(x_208059, HEX2EHEX2E_57828(0, (n_208080 - k_208092))), x_mean_208071), HEX2D_149310(HEX5BHEX5D_208119(x_208059, HEX2EHEX2E_57828(k_208092, n_208080)), x_mean_208071))) / sum_153414(HEX2EHEX5E_153952(HEX2D_149310(x_208059, mean_155214(x_208059, 0)), 2.0000000000000000e+00)));
						if (result_208061.lags != null) { result_208061.lags.push(k_208092); } else { result_208061.lags = [k_208092]; };
						var Tmp4 = nimCopy(null, acf_208483, NTI124);
						if (result_208061.estimators_mean != null) { result_208061.estimators_mean.push(Tmp4); } else { result_208061.estimators_mean = [Tmp4]; };
						if (result_208061.estimators != null) { result_208061.estimators.push(shifted_estimator_208544(normal_198031(0.0, 1.0000000000000000e+00), acf_208483, Math.sqrt((1.0000000000000000e+00 + ((1.0000000000000000e+00 + (2.0000000000000000e+00 * sum_153414(HEX2EHEX5E_153952(HEX5BHEX5D_208119(x_208059, HEX2EHEX2E_57828(0, k_208092)), 2.0000000000000000e+00)))) / n_208080))))); } else { result_208061.estimators = [shifted_estimator_208544(normal_198031(0.0, 1.0000000000000000e+00), acf_208483, Math.sqrt((1.0000000000000000e+00 + ((1.0000000000000000e+00 + (2.0000000000000000e+00 * sum_153414(HEX2EHEX5E_153952(HEX5BHEX5D_208119(x_208059, HEX2EHEX2E_57828(0, k_208092)), 2.0000000000000000e+00)))) / n_208080))))]; };
						res_208681 += 1;
					}
			} while(false);
		} while(false);
		result_208061.null_distribution = shifted_estimator_208544(normal_198031(0.0, 1.0000000000000000e+00), 0.0, (1.0000000000000000e+00 / Math.sqrt(n_208080)));

	return result_208061;

}

function flatten_249543(estimator_249548) {
	var result_249549 = null;

		result_249549 = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_249549.mean = estimate_211448(estimator_249548);
		result_249549.standard_deviation = standard_deviation_212258(estimator_249548);
		result_249549.confidence_interval = nimCopy(null, confidence_interval_213248(estimator_249548, 5.0000000000000003e-02), NTI207896);
		result_249549.p_value = p_value_216452(estimator_249548);
		result_249549.score = test_score_215041(estimator_249548);
		result_249549.t_value = test_score_215041(estimator_249548);

	return result_249549;

}

function flatten_250056(estimator_250061) {
	var result_250062 = null;

		result_250062 = {mean: 0.0, standard_deviation: 0.0, confidence_interval: null, p_value: 0.0, t_value: 0.0, score: 0.0};
		result_250062.mean = estimate_218048(estimator_250061);
		result_250062.standard_deviation = standard_deviation_218858(estimator_250061);
		result_250062.confidence_interval = nimCopy(null, confidence_interval_219848(estimator_250061, 5.0000000000000003e-02), NTI207896);
		result_250062.p_value = p_value_223052(estimator_250061);
		result_250062.score = test_score_221641(estimator_250061);
		result_250062.t_value = test_score_221641(estimator_250061);

	return result_250062;

}

function erf_192722(x_192724) {
		var Tmp3;

	var result_192725 = 0.0;

	BeforeRet: do {
		var x2_192729 = x_192724;
		var j_192759 = 27;
		var isneg_192760 = false;
		var d_192761 = 0.0;
		var dd_192762 = 0.0;
		var t_192763 = 0.0;
		var ty_192764 = 0.0;
		var tmp_192765 = 0.0;
		var res_192766 = 0.0;
		if ((x_192724 < 0.0)) {
		x2_192729 = -(x_192724);
		isneg_192760 = true;
		}
		
		t_192763 = (2.0000000000000000e+00 / (2.0000000000000000e+00 + x2_192729));
		ty_192764 = ((4.0000000000000000e+00 * t_192763) - 2.0000000000000000e+00);
		L1: do {
				L2: while (true) {
				if (!(0 < j_192759)) break L2;
					tmp_192765 = d_192761;
					d_192761 = (((ty_192764 * d_192761) - dd_192762) + cof_192726[j_192759]);
					dd_192762 = tmp_192765;
					j_192759 -= 1;
				}
		} while(false);
		res_192766 = (t_192763 * Math.exp((((-(x_192724) * x_192724) + (5.0000000000000000e-01 * (-1.3026537197817094e+00 + (ty_192764 * d_192761)))) - dd_192762)));
		if (isneg_192760) {
		Tmp3 = (res_192766 - 1.0000000000000000e+00);
		}
		else {
		Tmp3 = (1.0000000000000000e+00 - res_192766);
		}
		
		result_192725 = Tmp3;
		break BeforeRet;
	} while (false);

	return result_192725;

}

function erfc_192792(x_192794) {
	var result_192795 = 0.0;

		result_192795 = (1.0000000000000000e+00 - erf_192722(x_192794));

	return result_192795;

}

function erfcinv_192809(p_192811) {
		var Tmp1;
		var Tmp5;

	var result_192812 = 0.0;

	BeforeRet: do {
		if ((2.0000000000000000e+00 <= p_192811)) {
		result_192812 = -1.0000000000000000e+02;
		break BeforeRet;
		}
		
		if ((p_192811 <= 0.0)) {
		result_192812 = 1.0000000000000000e+02;
		break BeforeRet;
		}
		
		if ((p_192811 < 1.0000000000000000e+00)) {
		Tmp1 = p_192811;
		}
		else {
		Tmp1 = (2.0000000000000000e+00 - p_192811);
		}
		
		var pp_192813 = Tmp1;
		var t_192814 = Math.sqrt((-2.0000000000000000e+00 * Math.log((pp_192813 / 2.0000000000000000e+00))));
		var x_192815 = [(-7.0711000000000002e-01 * (((2.3075299999999999e+00 + (t_192814 * 2.7061000000000002e-01)) / (1.0000000000000000e+00 + (t_192814 * (9.9229000000000001e-01 + (t_192814 * 4.4810000000000003e-02))))) - t_192814))];
		var err_192816 = 0.0;
		L2: do {
			var j_192829 = 0;
			var res_192843 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_192843 <= 1)) break L4;
						j_192829 = res_192843;
						err_192816 = (erfc_192792(x_192815[0]) - pp_192813);
						HEX2BHEX3D_44127(x_192815, 0, (err_192816 / ((1.1283791670955126e+00 * Math.exp((-(x_192815[0]) * x_192815[0]))) - (x_192815[0] * err_192816))));
						res_192843 += 1;
					}
			} while(false);
		} while(false);
		if ((p_192811 < 1.0000000000000000e+00)) {
		Tmp5 = x_192815[0];
		}
		else {
		Tmp5 = -(x_192815[0]);
		}
		
		result_192812 = Tmp5;
		break BeforeRet;
	} while (false);

	return result_192812;

}

function inv_198861(d_198863, p_198864) {
	var result_198865 = 0.0;

	BeforeRet: do {
		result_198865 = (((-1.4142135623730951e+00 * d_198863.std) * erfcinv_192809((2.0000000000000000e+00 * p_198864))) + d_198863.mean);
		break BeforeRet;
	} while (false);

	return result_198865;

}

function inv_250473(d_250478, p_250480) {
	var result_250481 = 0.0;

		result_250481 = ((inv_198861(d_250478.distribution, p_250480) * d_250478.scale) + d_250478.location);

	return result_250481;

}

function confidence_interval_250451(sd_250456, alpha_250458) {
	var result_250459 = null;

		result_250459 = nimCopy(null, [inv_250473(sd_250456.distribution, (5.0000000000000000e-01 * alpha_250458)), inv_250473(sd_250456.distribution, (1.0000000000000000e+00 - (5.0000000000000000e-01 * alpha_250458)))], NTI207502);

	return result_250459;

}

function flatten_249476(model_249478) {
	var result_249479 = null;

		result_249479 = {change_point_candidates: null, loglikelihood_candidates: null, change_point_index: 0, change_point_x: 0.0, initial: null, increment_change: null, existence_change_point_hypothesis: null};
		result_249479.initial = new_ritsperiod_249173();
		result_249479.increment_change = new_ritsperiod_249173();
		result_249479.change_point_candidates = nimCopy(null, model_249478.change_point_candidates, NTI234191);
		result_249479.loglikelihood_candidates = nimCopy(null, clean_nan_249286(model_249478.loglikelihood_candidates, -Infinity), NTI148064);
		result_249479.change_point_index = model_249478.change_point_index;
		result_249479.change_point_x = model_249478.change_point_x;
		var acf1_249489 = autocorrelation_function_208057(clean_nan_249286(model_249478.model.before_residual_model.residuals, -Infinity), 100);
		var acf2_249491 = autocorrelation_function_208057(clean_nan_249286(model_249478.model.after_residual_model.residuals, -Infinity), 100);
		result_249479.initial.slope = flatten_249543(model_249478.model.before_model.coefficients[0]);
		result_249479.initial.intercept = flatten_249543(model_249478.model.before_model.coefficients[1]);
		result_249479.initial.autocorrelation = flatten_249543(model_249478.model.before_residual_model.coefficients[0]);
		result_249479.initial.noise = flatten_250056(model_249478.model.before_residual_model.noise_variance);
		result_249479.initial.residuals.values = nimCopy(null, clean_nan_249286(model_249478.model.before_residual_model.residuals, -Infinity), NTI148064);
		result_249479.initial.residuals.autocorrelation = nimCopy(null, clean_nan_249286(acf1_249489.estimators_mean, 0.0), NTI148064);
		result_249479.initial.residuals.autocorrelation_null_confidence_interval = nimCopy(null, confidence_interval_250451(acf1_249489.null_distribution, 5.0000000000000003e-02), NTI207896);
		result_249479.increment_change.slope = flatten_249543(model_249478.model.after_model.coefficients[0]);
		result_249479.increment_change.intercept = flatten_249543(model_249478.model.after_model.coefficients[1]);
		result_249479.increment_change.autocorrelation = flatten_249543(model_249478.model.after_residual_model.coefficients[0]);
		result_249479.increment_change.noise = flatten_250056(model_249478.model.after_residual_model.noise_variance);
		result_249479.increment_change.residuals.values = nimCopy(null, clean_nan_249286(model_249478.model.after_residual_model.residuals, -Infinity), NTI148064);
		result_249479.increment_change.residuals.autocorrelation = nimCopy(null, clean_nan_249286(acf2_249491.estimators_mean, 0.0), NTI148064);
		result_249479.increment_change.residuals.autocorrelation_null_confidence_interval = nimCopy(null, confidence_interval_250451(acf2_249491.null_distribution, 5.0000000000000003e-02), NTI207896);
		result_249479.existence_change_point_hypothesis = flatten_250873(model_249478.model.existence_change_point_hypothesis);

	return result_249479;

}

function robust_interrupted_time_series(x_251143, y_251144, change_point_candidates_start_251145, change_point_candidates_end_251146) {
	var result_251147 = null;

		var model_251148 = rits_model_248092(x_251143, y_251144, change_point_candidates_start_251145, change_point_candidates_end_251146);
		rawEcho(HEX24_234227(model_251148));
		result_251147 = flatten_249476(model_251148);

	return result_251147;

}

function subsample_156014(v_156016, sampling_156017) {
	var result_156018 = null;

		L1: do {
			var k_156042 = 0;
			var colontmp__156055 = 0;
			colontmp__156055 = (v_156016 != null ? (v_156016.length-1) : -1);
			var res_156058 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_156058 <= colontmp__156055)) break L3;
						k_156042 = res_156058;
						L4: do {
							if (!((Math.trunc(k_156042 % sampling_156017) == 0))) {
							break L4;
							}
							
							if (result_156018 != null) { result_156018.push(interpolated_if_not_valid_155829(v_156016, k_156042)); } else { result_156018 = [interpolated_if_not_valid_155829(v_156016, k_156042)]; };
						} while(false);
						res_156058 += 1;
					}
			} while(false);
		} while(false);

	return result_156018;

}

function robust_interrupted_time_series_approximated(sampling_251166, x_251167, y_251168, change_point_candidates_start_251169, change_point_candidates_end_251170) {
	var result_251171 = null;

		var model_251172 = rits_model_248092(subsample_156014(x_251167, sampling_251166), y_251168, Math.trunc((change_point_candidates_start_251169 / sampling_251166)), Math.trunc((change_point_candidates_end_251170 / sampling_251166)));
		rawEcho(HEX24_234227(model_251172));
		result_251171 = flatten_249476(model_251172);

	return result_251171;

}
exports.robust_interrupted_time_series = robust_interrupted_time_series
exports.robust_interrupted_time_series_approximated = robust_interrupted_time_series_approximated
exports.existence_change_point_hypothesis = existence_change_point_hypothesis
